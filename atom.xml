<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>江边的旱鸭子</title>
  
  <subtitle>Blog of Joou</subtitle>
  <link href="https://blog.joouis.com/atom.xml" rel="self"/>
  
  <link href="https://blog.joouis.com/"/>
  <updated>2020-05-05T19:03:00.000Z</updated>
  <id>https://blog.joouis.com/</id>
  
  <author>
    <name>John Chou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三星Note9与米10Pro拍照对比</title>
    <link href="https://blog.joouis.com/2020/photos-comparison-between-note9-and-mi10pro/"/>
    <id>https://blog.joouis.com/2020/photos-comparison-between-note9-and-mi10pro/</id>
    <published>2020-05-04T14:56:21.000Z</published>
    <updated>2020-05-05T19:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在正文开始前，请允许我碎碎念一下。</p><p>我从小喜欢数码产品，各种拆解、修复，初中开始靠使电烙铁拿奖中考加分… 一直以来身边人购置数码产品或者遇到问题都会咨询我，但我好像越长大越懒得折腾这些东西，热情逐渐被岁月磨灭（？）。难得有兴趣在换手机时做个简短的对比评测，就借此机会多写一点吧。</p><a id="more"></a><h2 id="我的玩机历史"><a href="#我的玩机历史" class="headerlink" title="我的玩机历史"></a>我的玩机历史</h2><p>我从高中开始放飞自我，因为囊中羞涩主要倒腾各种二手手机，在此之前只玩过小灵通和 MOTO V3（向永恒的 Razor 系列致敬！）。那会正是诺基亚如日中天的时候，Symbian S40/S60v3平台的手机相对保值，也就蹭同学的手机玩，在二手市场中没有性价比可言。我则从Sony（黑白机）、Sony Ericsson（自研系统和 Symbian OS）、MOTO（自研 Linux 系统和 Windows Phone）、三星（自研系统、Symbian OS 和 Windows Phone）、HP（Windows Phone）到多普达以及 HTC 贴各种运营商牌的 Windows Phone，各种体验、刷机、维修和转卖，度过了高中三年时光。这些手机便宜，但绝大多数内置强大的操作系统，更具体讲可以安装各种应用软件，在还是 GPRS 网络和 Java 小游戏的年代已经具备一定的可玩性。</p><p>记得高三那年 iPhone 3GS 发布，当时还觉得平平无奇，就是贵。而初次见到 HTC Hero G3 被鲜艳的大屏和 UI 震撼到了，开始入坑 Android。大学时主要有两台神机令我印象深刻，持有时间最长。</p><p>第一部是 MOTO Defy，简直是当时的性价比之王，两千元左右的价格配置全面，陪我度过了两年的时光。还记得那时候就开始玩 Real Racing 3，没想到这款游戏在近 10 年后的今天仍然占据着 Android 热门赛车游戏的一席之地，还被 EA 收购了。</p><p>第二部则是 LG G2，这部手机是当时全球最窄边框的智能手机，外观在今天看来仍不过时，非常的“现代化”。除此之外，性能不必多说，还有两大卖点。一是 LCD 的屏幕出自自家 LG Display，是全球最好的 LCD 屏幕没有之一，iPhone 也用的它家屏幕，这和我后来选三星类似。另一卖点则是用上了 OIS 光学防抖的摄像头，这个配置如今司空见惯，但在当年真是鹤立鸡群的技术，拍照素质自然秒杀其他手机一截。这也是我第一次玩韩版机，到三星时代因为指纹支付问题以及蛋疼的系统已经不再碰它们了。</p><p>随后就有点平淡无奇，不爱折腾了，就开始保持品牌忠诚度。我选手机的标准很明确，当下旗舰机保证基本门槛，在此基础上依照拍照、屏幕、 续航、扬声器、是否支持无线充电（从 S7E 尝到甜头开始）、是否支持IP68 防尘防水（依然是从 S7E 开始提高要求）为顺序做挑选。实际的换机轨迹在 G2 之后是 G Pro 2、G3 和 G4，直到 G4 出现大面积主板故障，同时三星的双相位对角、曲面屏开始惊艳市场后，入坑 S7E、S8+ 和 Note9。</p><h2 id="关于米-10-Pro"><a href="#关于米-10-Pro" class="headerlink" title="关于米 10 Pro"></a>关于米 10 Pro</h2><p>去年差点入坑 1+7 Pro，不过之前玩过二手的 1+3T 对拍照表现不太满意，以及看过 1+7 Pro 的各种评测，觉得不少细节还是差点意思（如在 2019 年仍不支持无线充电），于是放弃。直到今年初，三星的系统“负优化”在玩 30 帧“王者荣耀”时竟然会偶尔卡顿，续航也开始退化，决定换其他厂牌，考察一圈最终选择米10 Pro。</p><p>其实这个选择挺容易做的，MIUI 的优化加各种顶配硬件不仅玩游戏体验远胜 Note9，屏幕还是三星家的 A 货，双扬声器在每次 B 站评测中总能引来“全体起立”（毫不夸张讲是我到目前为止听过最棒的手机外放）的弹幕，以及今天要对比的 DXO 评分 124 分的拍照功能，基本上很难找到对手。说起来我对价格不算太敏感，也考虑过 S20+ 甚至 S20 Ultra，不过想到那个“慢吞吞”的 One UI ROM 还是算了吧，S20 Ultra 还被一众测评指出固件并不完善。</p><p>一开始抱着不好用就再卖掉的心态使了两天米 10 Pro，结果它毫无悬念的在绝大多数方面体验完胜 Note9，导致后者被我秒出。除了上述的优点外，米 10 Pro 的背面磨砂玻璃手感很不错，挖孔屏实际带来的干扰也比我想象中要小不少，果然是看习惯就好。而 Note9 还能胜过米 10 Pro 的地方有二：</p><ul><li><p>系统更纯净，也就是大家吐槽已久的 MIUI 广告问题。确实通过各种设置可以关掉绝大多数 MIUI 上的广告，只是我不太理解把这些“狗屁膏药”贴在自己旗舰上真的能增加更多营收吗，要知道这一点劝退了不少人。而我个人认为这会培养消费者对小米品牌的负面认知，这些“狗皮膏药”始终让小米看起来不像真旗舰机。据说把系统改成英文就没这困扰了，um… 🙄 。</p></li><li><p>品控不太好。每年网上吐槽小米手机质量的声音不少，例如出名的断流问题。我对这些问题算是比较包容的态度，实际我手上这台也还没遇到断流等“硬伤”问题。不过我遇到了一个玩机这么多年头次见的小问题，屏幕边缘居然有黑胶，这会导致裸机状态下手感大打折扣。而我作为一个轻度强迫症患者，看到这个瑕疵也是不能忍，弄了半天却没法完全弄掉。还好戴套之后眼不见心不烦。</p><p><img src="https://imuggq.bn.files.1drv.com/y4mqK1EnyRxihRCcB4HqcfYsu-CPN1JpkcZAULVS9VF0xTw9LhqKRc6akvyj3V1RUjDIUui7y8YrytWdH6G1_L9NvGai74xi4rOh1WFKuIoPJS1SKude-wYu3ZAWWoq1E7Tp2VTg-MGQwYCMXAO9bCAGOwQV8D9YvqqM8onFnhahIKQlByxxaIdE0eOecOmmeNi3kIrmUaK7FIA9d_F3I3Vdw?width=1512&height=2016&cropmode=none"></p></li></ul><h2 id="拍照对比总结"><a href="#拍照对比总结" class="headerlink" title="拍照对比总结"></a>拍照对比总结</h2><p>回归正题，在 DXO 上米 10 Pro 的评分比三星 Note9 高了有足足 21 分，那么实际成片效果是否如此，就用我五一前几天随手拍的一些样张作为对比吧。三星 Note9 的固件是 4 月最新的版本，已经用上了 Android 10，不过后续的 OTA 更新基本就是安全补丁，印象中没看到相机方面的优化；而米 10 Pro 的固件是 MIUI 11.0.16.0 稳定版。</p><p>先说结论，拍照方面无论是成像素质还是拍摄场景的多面性，米10 Pro 都毫无疑问比 Note9 强得多，照片文件大小前者是后者的一倍左右，而前者的超广角镜头和多倍混合光学变焦也是后者无法企及的。Note9 唯一值得说道还是它的调色，暖色调、高饱和度、高对比度，某些场景下拍出的照片第一眼讨喜。此外米 10 Pro 偶尔会出现白平衡不准的情况，后面会有照片说明。</p><p>那么开始看照片吧，默认同一内容的两张照片第一张出自 Note9（毕竟是前辈嘛）米 10 Pro 随后，均使用默认配置项，大概也就是使用主摄像头、开启 AI 场景识别优化。我会基于过去玩单反（Pentax 配三饼干）的经验简单评价照片，并选出我更喜欢的一边。这是一件非常主观的事，不过鄙人拍照的初衷就是记录生活、愉悦自己 :)</p><h2 id="样张对比"><a href="#样张对比" class="headerlink" title="样张对比"></a>样张对比</h2><p>公寓的走廊，很明显米 10 Pro 的主摄视角比 Note9 广一些。不过这种题材通常也不会有人关注细节，平手。</p><p><img src="https://imudgq.bn.files.1drv.com/y4mmC210ltAfNP2srWbcSnf0UyMioRRpFBSdL-wKLBcLUA7-jsIVaP1xKvqDS0Mu_BSh3PoxiO7nER7i5NPqL6V_FWL7tan4Acu0HZcR3E2LOK16zUddueqBrVh6ckgug3asBe9NmKf7f3uPDxrGAICAhjkUYP993bniNYNwcPQ6VMof3rXmxSgYM1baC2_RGZg3mIP70BGgvQEvfouAhoNuA?width=1512&height=2016&cropmode=none"></p><p><img src="https://i8uigq.bn.files.1drv.com/y4mBhSfutCHX6O3iWvKL0-NmTtB26Lor-WhdcjYbinNse6uLYO--6qBQDn7_k4aj5-o6n2sFOED6o-nvVMSlyAwn7R2dOqH-OSQcZGmJf6uKUmslInD6F-eiRw3Pq5Iyi05ELPUnf9NW7k3ct3F6eD7gMm9UELfmZC-kb79lp2RCBeJdTmtepdRY6uKjwDO3ecBZFJ93Ct1_YaWVSwajlADJA?width=2172&height=2896&cropmode=none"></p><p>电梯里，弱光环境下米 10 Pro 的曝光第一眼更好看，细看文字都能看得清，差距不大，米 10 Pro 险胜。</p><p><img src="https://imufgq.bn.files.1drv.com/y4m0xG11ZO7LGpeSP8w6hM1RroeDG06U5h7S35upepZCVC0dUQ_tH2mAn62t7VnUrrkYrKktCz8Yt0zacVz8CO9oZ3UjK2jf0oRDwahrt4s7XsbAvooiX8hGORKfXO2OnImYJjwH0YPJVm3zahDlrfboT41I3pfbaDrmcHcNhSlh9g-O7kXtkihO23zsE3t_UtqjvVN-ht58b1tP04ygSflPg?width=1512&height=2016&cropmode=none"></p><p><img src="https://hmu5iw.bn.files.1drv.com/y4m_DT_FPNVT4khtS7ja5uwawjn6tsum4Sm-akHd-ghpwS5JsqXvz_g7iEduPe0VYW_5flSvB0jwQo1O5yJup98PjnKeSESaqBZ4-CfwNEfwpnKPqt4vtJ2Uj8Hl42rMmtGDLWcK6uZ4sqrNyF2TybikAzgWRjOFWx6qtlwmgpMcOLco3QdUX48SafG_FsJJIKWeazsyIyocdcl2jQZ5hbeEQ?width=2172&height=2896&cropmode=none"></p><p>工作日的餐厅和午餐。Note9 的调色显得食物更有食欲，但米 10 Pro 这种更接近食物原本色彩的调色风格我觉得也不错，平手。</p><p><img src="https://imuegq.bn.files.1drv.com/y4mR2lLQLs6jFkqshfTwi_5w7d1YeimXI1QhYCar3afbDeFQZ6GV_ZjvdWO8dOUafEE_lEun0_CZDNZwwyV8clhqANGUPEpjqquUeQxwQGSVWHDb5YRZZNcBi1QmgWIN7GTUBQStQBz1_mYLw_scureSvVxjVhewUKM0N5UsD5dHm2-kUHX02hK1dYsX1y_n1YnPXSJvnkwZ_BIZHsrphxMAQ?width=2016&height=1512&cropmode=none"></p><p><img src="https://i8uggq.bn.files.1drv.com/y4mGLp9VYJbyib-bhMwFtura64YQPlK7qjRdqAx6A_ZZbAZYoO92YOKoJFzajmJ0BoFcvue5r_exN4FOE7wV9lGgYD8qb-bzMWSQwfFVN65F8H5PLPDo-Sim1RtddbAJUWEskXaLzVE24bNDRI3asEfZEwWx-GK1XiI-LsWqXtYGz4_nGVeZorvG1kBKqC_EJ2kq84XEy_F_R4McNid7svCCQ?width=2896&height=2172&cropmode=none"></p><p>视角更广的米 10 Pro 更有优势，同时明亮的调色观感比 Note9 更好，细节就不对比了没有悬念。米 10 Pro 胜。</p><p><img src="https://imucgq.bn.files.1drv.com/y4mVBdu3E9_OcUoewDgRnFUJ0RxOlYivj6VIEU7RErAbPacOp_yA8z8Hnf6e2CQRTuN0wicOoFoDVpgrOCf2m0xundRRbX4V2V8Q-IKcOnAXXy5ckbBfLboLB-dS0oxuCAeIAOOzZuYCk49MXNSjhWwpkRO4iXq1fYdmxI7ZYn8V3ew2JjhuC7UlKeNqEJf_CMIfGTLXV4NwjRJEV2Uu0w20g?width=2016&height=1512&cropmode=none"></p><p><img src="https://i8ufgq.bn.files.1drv.com/y4m8Y6W45BJbQId81ryxVPAwbIkQGvMhUkFkQED-v4U1_eu_9KwdIOW8mF9c-2Tr7e5SctGJuoHwnVyEhZ9dWCnrTwFcPxzeYnUks7wdbkTyRdeQZAHZJFao9S5JtqtqEfmBzIg-RC0YZcjUhBNvgRKzFl7dGQSIukzmGg2hDO58FtS6cOG_QiZbasfrFsSGjyhdwVTzn663oL0-fUpaVcTaA?width=5792&height=4344&cropmode=none"></p><p>杂乱的工位 😅 。平手。</p><p><img src="https://imubgq.bn.files.1drv.com/y4mHjygbrO1Qptgyzxb2_kKtTDP1nySS_rLPqprzywvMDXwfhusqd1e9B2I2gNytebLt-e-S_kL9PGIwmq8ypgBosKWJ2eoD2Bt-L7V4iEJwkCgS6ajDGB9fDmcO4aOmXuJWboutNZf37QHKp9qwrxy7Aaw6WnM4Rywuht8dRtCFvv0M5q6eHB6UmI8J7pkJQwWWJNg27wQsSeYWcV3CKSiGA?width=2016&height=1512&cropmode=none"></p><p><img src="https://i8uegq.bn.files.1drv.com/y4mDV9q6QOUfl0r53r1LgxbeHMPrUH5PXNzvBSUk7a91n-H16pr8teZtOV6CB0HKUpYoV2vwg2e555BFkj-BazHtrokkg9JOhQ6ddEAOiWRwCl6M5w181KO0ryjo_242aFMGOmagpQMQTy1RHg991rTE4Stqyp65zOMzxerZoM0mK4QMLkOb3qc0OwvCiiG4OLy31pqYvwMoTIkhpS2qDU39w?width=2896&height=2172&cropmode=none"></p><p>办公室走廊，两者都支持 HDR，不过米 10 Pro 的宽容度更高，观感也更好，胜出。值得一提的是右侧边缘的文字 Note9 更为清晰。</p><p><img src="https://icukgq.bn.files.1drv.com/y4mCzGBMcoaBVz1kfwx81O6aq1OkjjEoTz_ISSAIU_6pShyBjxIyQ5iP-fwgtacLVmhqvQDkuaoiI0-bh3IgW61xulu_HF99sJHF9FdVYgv-QbDqJ8arz7bovz6IJxlo3IVbYhAMP8vrDWyRG-3O4NkJj_o9DlSkliET-e0zucWXfmof5ZYSgb8gb4BJt1ioBAWXqA5Unvca0fvAZUFcHyJNQ?width=1512&height=2016&cropmode=none"></p><p><img src="https://i8udgq.bn.files.1drv.com/y4mZJLSfkgFZWxJC1myf5ewQ0bMBSUmHneJ5qtwrVuVkfdfXuSASb6YjmcJOH8dQoLEI493Kpdoxq5L5V2VV3n0G17mvkrAYQ225yDaqzxTPfejKows4Db4iGh2IIvV_UagsoA3WHf1Veb2N0qjOU5m0qb0PAfEp0tz7tOzi3Me4x59cUxAyIs3ChLPBvDlWaL0UxJcArCWdO8-uUXd96tncw?width=2172&height=2896&cropmode=none"></p><p>书报架，这种文艺主题显然是 Note9 的主场，调色更讨喜，胜。</p><p><img src="https://icujgq.bn.files.1drv.com/y4mufQQBu-K4b4p6-BOxc-fmufQQps6CIc8x_T4A4n5YdJ34CNweWk-wkfbN6BnLkQ5obN8nhr7ZeTQJpN0eo-E9aY2sQwpdMFU4QUfUleVMmg_4bwGBZoRgIJ_v2CwxmifaClTDwNqqa-iJUBwthBhn3PxCQw7luyq8HBHVTNz6IxdfrPEwQgRAqdb-O-7skY78p9ELlhJX7kf7VWsPghZ8g?width=1512&height=2016&cropmode=none"></p><p><img src="https://i8ucgq.bn.files.1drv.com/y4mxKsiz2IhlL8LmDSzBBO5zAvgt9VeEdDp8tzwVskBiwLlH2tADYFIBh_fdFRy0H43WoDWCkU31tzleHWog_FKrWy_5bKf10Y3hcxPPThkA-nxly5TwHt3pRig2MmiMEup2Fsla4unA88cIXS3e35ztn6NQoxz0mU3syP6jz1FS5JefOX3ZBMP7uT5uudlmd-pp6b0kf4wJxR9e4wtLlUPLA?width=2172&height=2896&cropmode=none"></p><p>兰州拉面之红烧牛肉面，超好吃。这一次我反而觉得 Note9 的高饱和、高对比不如米 10 Pro 的成片看起来更舒服，嗯就是很主观的评价，米 10 Pro 险胜。</p><p><img src="https://icuigq.bn.files.1drv.com/y4mGR-jEC-guyDD3XdFcbsWBpEjSFOezYhIHJchnJ9c5Ln9trUobTmdbN_pqrY8goIiwwlFrOiMn_e460U-ipOq7OF-uIztk4wXy6XizGLekMrLjt8IcKuCpuvR1fDT4iI-s7Z4KDtFiK_mNTDlCY1ZXdecvHsFU9fs-m-ALvx1fzRgKfaa0htMXiM9N-F58YqbuGXvqVEErS0vvxGhl6ynBw?width=2016&height=1512&cropmode=none"></p><p><img src="https://gsu5iw.bn.files.1drv.com/y4mmcBkD8jWGiO5J5EJ_EuG42_GpBYQcIU-TxeGosNvYlvWni5uQPtgTfKpW-zCBMhb3VNpu6MuzqhvcxyL6c6oVKOEW1MwzveX25_uCixLs_mvz84zZoPiKuFJZRv1pt5SfTiXOQLrXOalKqavw2LGUPFaRdwO_VLUrKJgIVoh9N795WysB4bK2Ac9UL5XwMN_-OQ450H8yacq6Gra4zh1Xg?width=2896&height=2172&cropmode=none"></p><p>在此期间把 Roland Micro Cube GX 音箱给卖了，因为有了这个小箱子——过年前在香港买的 Boss Katana Mini。米 10 Pro 的视角更有优势，同时也把音箱外壳材质的纹理拍得明显更清晰，胜。</p><p><img src="https://icuhgq.bn.files.1drv.com/y4muWtwWnD9WjMz1223pasWYtl6oP594FJCvVa5G2iNWXdZTLagPETZV9akSTnjPFMrvg6rnIlNSysOuuZ-JmkJKVHLFmJ8rKecfx5YyvEl9--i8QmOlM2XFxjt_Wbiv3ubl0zFlB5yYSxeyPwchatvKjtRGolUrLcryiOgS7cjLeAoE5roenbsfdjSOwHotWMX6dJC14eIhwcY18MIECj0lA?width=2016&height=1512&cropmode=none"></p><p><img src="https://i8ubgq.bn.files.1drv.com/y4m2UhUqa8cgR8mpLq28WSStNxd7WWnTcGX1c3r5VWI_NpXEmVQ0AEREBButNtehX-SuULxE1QMsN9tPZD6Zo0hXjl4RSn-4IzRMUEk4W7_3oTC58T8c3CiJDP2tsetAf6gFec9SUtIcglWVSdg1Xs5UaIKmZDAxhMmM4zYvwG8Nd6ZZIGAvb2DW_wn1gquHK-DLAbBfUypImQKdMK7dCj0kg?width=2896&height=2172&cropmode=none"></p><p>最近油价大跌，加油站除了降价外又开始搞加油满 ￥200 送机洗的活动。随手来一张，平局。</p><p><img src="https://icuggq.bn.files.1drv.com/y4m5hEpVgZXz9hEGy6wdeEJX_1Zq2SIS9B39Cdg7aahUzwXsAyssM5p7eZw_FCqVo8Kcw5oMtB4OECk1g0fao8T0yu2lO0tDls5Y-lAWegapd5X35QYspLixkR45iltWVP00ePMLNJtJ9n0JjKQAupsisPgv-Fsjxwaxf1TaUc9UFkG1h7XArEW8RALTH6AefIvqu42lOljD3jELR-5klAZLQ?width=2016&height=1512&cropmode=none"></p><p><img src="https://gsu4iw.bn.files.1drv.com/y4mSgHxLA9RT4-Os0T4LJqC5951XhC7fPPCkUhFgDMufb_Flfy2bv13phmsSlsncw3kEu9_SVy-zShIpI1PU691IqoXy00ycnN7reZA4JMD-HBeYZ7nrvJ-386EReXJ4PVdElL3DONFFeaaywEnF3-WmpGmZnIVGJyOyJ9IPXzEh_U7dWFDgjH-YVZoC7J9sEC8NlFk5djZFqO7I50gd7_WtQ?width=2896&height=2172&cropmode=none"></p><p>到了本文老大哥 Note9 的高光时刻，完胜米 10 Pro 的一颗柠檬，色泽完美，而后者的白平衡居然完全跑偏…</p><p><img src="https://icufgq.bn.files.1drv.com/y4m_gq_Lg8bG9TccIKn8Ib6FeyJnu4FETqPNp-OHD5Pq0Nmmdc2FftDP_brSKZ7Z7N5bW7iJAiK6UqgEBLqaRRwNDqPOS9Z0__a-5y909fZ0KIYs6Fozxj5jDoL5i9Ro56-mhRjoxYUkmV__oQM4KHmpW7nOEA31js-C8_cG0Q_Vx1_rARO8F7FeUYQnKw1WvNHvlucCqnIR9OCiM7sj0Plsw?width=2016&height=1512&cropmode=none"></p><p><img src="https://gsu2iw.bn.files.1drv.com/y4mfArnStyhl0sYXv2U21ibPEGD5r-XJBYE88cbVtd2TVp0HKwPFBi_GxG9uEMq40xwG0PGF7fITagrNi27-dIytTipbefn-h_x8jFuLz-X_QNMsQIR5NeWPPi2nk6DZQbywNZlHBU5KfhMLgIvf-j2r67dEKR-kOM663f2x1RamddPuR9E_NtLuZQ0VKyldyvOuHI74OYdc1xy7_SIXIGsbQ?width=2896&height=2172&cropmode=none"></p><p>看来提前下载 Snapseed 是个明智的决定。下图只调了白平衡参数，基本就是肉眼所见的柠檬外观，不过还是没有 Note9 的那张看起来诱人 😂 。</p><p><img src="https://gsu3iw.bn.files.1drv.com/y4mnGFfsHb8jx_rCunZE9rCnde4_qoXgIBf2GZCSGQguKtIoAGud-7o6anvxTgRgTFX8gVY88b_NfY0WL0E-GKnYFKKSwd12K6XU4DhOOGRrB4HVjFCDZawCSUR4DEfjXL4-CfXp8Vhd7SgtjzP0PZ4neijxsub5q7Spoo1_kgkb-50KFoSXpI1hgKCdLxViaaPweKSWdCVkxuj1crlSQlnfw?width=2886&height=2165&cropmode=none"></p><p>切柠檬是为了配干邑，作为一个业余爱好者，我毫不掩饰地承认我都用可乐搭配，自己喜欢最重要！这里 Note9 的深色调反而没有米 10 Pro 的看起来可口，后者胜。</p><p><img src="https://icuegq.bn.files.1drv.com/y4mxoEOWbeBU3S3WMfcPZcBazODIA-3wpj9D5BGbjjZ4FaIWpUDHB00mKUBiyNPsqjW7bxvP8XceZni-E3ni0GGJnfabmYZ_yiFCzo-Y-cmgH9Hhxd8nO-tKIemKZYKtSVf6NUectKHFUWLFHh1FBLGFx7SpRHEyw2L0Yv9wr4ygs2OAcKO6aax7WwBfcXrSpFItFwmN5UVzdqdzOKd01fy6A?width=1512&height=2016&cropmode=none"></p><p><img src="https://gsu1iw.bn.files.1drv.com/y4mH7JMjM74qPnVN898aHD-4VWIJBOWTu5BZ_Disas3oCVSLQIQWCrX5ste3rweUaBJY-XeY2OF320z-fSSdabb9mU7rcsSk7V_fZEbzzhJkfvG3kGnhrJxVzIHwdlUSShzxDjPFOhnSmhAsbhaUaSiGO2OjARWT9dmdGa1aV0h3Kiuei3Zy7I0Ixf7wf3ghi8LtvNuTLLpREhHH_lXRsMtpg?width=2172&height=2896&cropmode=none"></p><p>和同事去泡汤、写代码、打桌游，这家会所无论地理位置还是装潢水平在苏州都数一数二。Note9 的照片涂抹感有点严重，这点也经常被各大数码评测节目提到。很明显米 10 Pro 拍出来的泳池更为清澈好看，也更接近真实观感，胜出。</p><p><img src="https://icudgq.bn.files.1drv.com/y4mXOBd_1dFbvFWlbyG73lDGrrlD1vx_LFyhLz2HgwYTBIDPAUgMoU4fs1iYuy_TXSZsPBt56UrzZxgowKdbnNVbf0JYTPr8WWgETzMn_V7ChDMrgNpLsV3bHE7j6nhlq2iWYrFdCkWUo8NElPZu3DKlOS_vqLFypB6dfhReRNyg4cMYuZh-QVA0cQd-2tPk6522gcvOZ5xLOT5DCxH3XNFdw?width=1512&height=2016&cropmode=none"></p><p><img src="https://gsu0iw.bn.files.1drv.com/y4mQv6Hxw-JbuyMkOS8c6W9hhyjf7ukNto9UpsPVtWU9DiUskdju2sAwE1Ld2qAnj3Zb7ckRa_R_BC4DinxPjMCHSLfofEhF18VnCzAIJSoK5us8WNycaAF4cOwjuj2WVRJp9a1242Avskd4tYELouYjyqG2uzSGmmDEiPKULQjVU7gBAorBS0J1GHFeHerE-PzxnHB4XopKq2N_q9nyNzxUA?width=2172&height=2896&cropmode=none"></p><p>米 10 Pro 的宽容度同时保留了高光和暗部细节，完胜。</p><p><img src="https://icucgq.bn.files.1drv.com/y4mWpoC5vwiVr7hhBscc9BYX4ry1u6geHg1CcayMQ13iitcBp1td2INN4A2rfugRdKHDhewPK0Abxyz64rKq5-YI8vuiXEuwA3b87DhqJIcG8fwRq7klX9UNmYLVhl6lzGhIE1wlyCLzO91_LBexEjSvokseUfd_gvOT_h1b_HKZVKOlETKd0kIEgXj-nCnNLzB0MrE9o_3Clkm7y1jdsrHWQ?width=2016&height=1512&cropmode=none"></p><p><img src="https://gsuziw.bn.files.1drv.com/y4mL_qn9Pp0ecgVBMMF3_EBt30z-oTWl14wX6WZE10dwEWI3q5IqqJup5UhU9jysKMsnEd-iIHgOGB9rynNoAxktDe1GZ4gcVXh4OpSpaBzjpQzLINm27qhB6E0WxnNh0VbkXQAcaxaGF47p15AHLgkReDg_SfopW7fnmVtGfM70V-7l60jePkboTnYow6LnmUT2PDrlcYQI40HKObc16tQMw?width=2896&height=2172&cropmode=none"></p><p>Note9 的色调更温馨一点，米 10 Pro 的视角加分，平手。</p><p><img src="https://icubgq.bn.files.1drv.com/y4miuJ06kEn5Pno40OjgZnavipxaCjvgx2bN9cRKICF0U_99Q2zA6VN3StqPw7wd_9eMGZLL2efO9VtJGors57igaOXS02n51EbyQTmbHgO25fSQFugr7tO-SFjQlvLiQbxTXX-kGAVRcjUfSDz7YuEUGBWssbnEpugbzct8RO9jtFbupwsthkMkUo6vb4KWzSkIJ6t6WYlAOaw4f7O4Yk3YA?width=2016&height=1512&cropmode=none"></p><p><img src="https://gsuyiw.bn.files.1drv.com/y4mlH2AyWUfBiiaOcKmRaWRTirMaH6sDc3gOISs1XlfJgolf37iKeapH7Reu4ME8ru-j07VB8uAvgfWWj5ptC0cbPXQ7M1R1KDUixhh6LgOQJaV1kbQBsLgH1M71lHnkapF4okbjOR7gi4YZpS1nz0HQ6_KljjSA7dm7ksgN4qzeXZlpAGfPyhroOuMVXwGsHk7gdTmYk9w6n9aunUKW0KPxQ?width=2896&height=2172&cropmode=none"></p><p>我更喜欢 Note9 的调色，更显豪华感，高光的压制也不输小老弟，胜。</p><p><img src="https://isukgq.bn.files.1drv.com/y4mtK4st95ECLyzT0d-c7TMC_vraLp-NdJsR_RlO6tiNZVh7fkAio5fZkeyojFQswk-Nk5kDI4V7PmCc9r7XEz5RHhLPg1Dx8wG8FLGrZ88rlzrMyqXYtbbrguZafAg8Wa3TyogKaJ-w7GZ5Sph3QdGpehFXUZBrcJB-VANV8Y4KoSf_nEHaAxnu-N6LZIRTc-Uh_crueA4ZLg2ZTt2RPcyzQ?width=1512&height=2016&cropmode=none"></p><p><img src="https://gsuxiw.bn.files.1drv.com/y4mrtX9aFwsZfm8_X7HqnrfgkhN9FRmHnxdI1v73prRXgkilc5P0jK8Ot3DVpcJVoPm2_-8R3rEXlYZOi2gW-_E7sZIDb4SpFkzGH0V1JsAuz_ikKWra2SPyUT8nFDtaYppGXEV91nfHmiwGRkPqtJdtPVwa-hr9I7P1t5kKlfRcOnhHS7M4tdUtL1XqDcGKPiYUMsLANEbRJvpjPoFTBhxTw?width=2172&height=2896&cropmode=none"></p><p>又是调色和视角的各有所长，平手。</p><p><img src="https://isujgq.bn.files.1drv.com/y4m9zGFJGjglgqz55yYueQqX253Ac1fGgd8kbRp8lQppAKTh_QwTMA5z2JUWqOcKDVpbWB3nY8kEizXbawBPAZijaVpvPFT8mxLFL_4MdqaSJxnh0d2Dwa5f2cP9CilI07pu5PZ-yDD_V6A4Lt8mQggODRb9neHMFKn-cndZL4LXagpX30d4V6qABqNhC0ib52KgjzUvjcqE-Rp9CWKJyNc_w?width=2016&height=1512&cropmode=none"></p><p><img src="https://gsuwiw.bn.files.1drv.com/y4mV4qfFMMwVzfiwsLqOAR2UKHJSeDJxlMtAMKPdFmTshEhG3gb14OvYXILkI8wNhvBrdmNwOdVIboBvFScP2ij_n1sDQ26RJhm74C_zEQyLo_PgZd_XoTj8Hejh_bdmJ1l80CRkjwXLeMMVRFQUiRglLO5ynn3Hxfq4e8wOf4FdUy7C8ktxD7A8zPw5GO39KHOxC0BEMimVhEkr6l7q0LPQw?width=2896&height=2172&cropmode=none"></p><p>朋友一直推荐这家的炒牛河好吃，确实不错！我更喜欢米 10 Pro 的炒蛋颜色，前者有点酱油放多了的感觉… 米 10 Pro 险胜吧。</p><p><img src="https://isuigq.bn.files.1drv.com/y4m2TBt1_MDMSxIjwkBuHL1h2rfsUCfd_XMyGBz1SHNAqbKPyAZBnbsEhD71Rsj5Uw45mp3J61Ss2aDSKup_S_EWzVhT-yQ2jg0GlAMQLN2RIRF8ce-O5joknWeO9hnT8GLlcWBeRvTYk8gcOW369M3O12EQXllWJZ0i7fsg5YcZmXlYF7OrfD36KuKMg7rqIjgYG6tzOQ9u0ScFO95QvbbfA?width=2016&height=1512&cropmode=none"></p><p><img src="https://g8u5iw.bn.files.1drv.com/y4mMO5s2TOi1ClAMDaFwp0bqftzQodsV1lVjrLcnd5mOw10Nuv72G46mU6bEzgMwHVWk_cW-2gnHxGdDaSLLclaKuYNuCv3hrM5AHQpoFgbqbrJB62yxvp_DTKdq_5MSUkfTrENpNAP2THt7dL1IoRs0IHw1qFcW849zRghzjzmaCxBQTD708RjcIxIIl_U5DBAJdrsDjMCrBkI8eJAD11aqA?width=2896&height=2172&cropmode=none"></p><p>Splendor 真的超级好玩！之前听朋友们说过几次，这次初次上手就赢了他们，嘿嘿 😝 。没人会在意画质吧，平手。</p><p><img src="https://isuhgq.bn.files.1drv.com/y4m6bGX7fpxUhyM5cNJNS28Li9Schlh7KujbvpwFGJMzMXthvFh4EFJJ2J7N32dvkY12D4Alb25-QqtjLNMucV-XNeG8hJfu2Z8QmALARBp6xaKY8sxJBA_vEGZE-6SRPjKHkHhAX74rKIuyX1oIHN-A3UK0P8R18x3JgPyio_iYqEmWO4lKodWdRRprd717f__JdCSqczaw40jS2j6NbFjdQ?width=2016&height=1512&cropmode=none"></p><p><img src="https://g8u4iw.bn.files.1drv.com/y4mqJ4dvNDmVUXiEvlPtTFjDnHZDVPoCyC9UQLJ4KCP4Mz4Rx8bwfiihBpHxXmo8EPZbMe-8C3KV8JlaDExUGp8CItSWbL7wGm4_EV7lNpfLDn4dc2eQX3nquufM1ZT7R5bnWg2n-bYOgT2NVEmD4T-pXcLHe9UfhF99hG_ZxBn0h_UcB-3TnigcM7qx3cBUMeFnPRZD5YYshxEKKpG_vMXPw?width=2896&height=2172&cropmode=none"></p><p>尽管 Note9 还是有涂抹的痕迹，但成片更显环境高级感，米 10 Pro 有点偏冷了，前者险胜。</p><p><img src="https://isuggq.bn.files.1drv.com/y4mI-rr2kuE6nkmS72-QB_azith1m56rPYejPTMLLLrOQ3oTnM_fuVvfUEAJv-s-VPt4qb0DeGNnlDiTUA1WsE3ZD5xuSkKHD7eGYsraZyfJwaZskRUgfkl0hSZC8SyvOFV9GDXYnP4vZ2hy0tkti3coqYO1UJTRHlzIFdzEyUVQQBqR8Bw7uu4-WnjwHZ4BNnFsdU3FfnJD9RT8jajvZQGqA?width=2016&height=1512&cropmode=none"></p><p><img src="https://g8u3iw.bn.files.1drv.com/y4msvdOnFUq2ZUGKPG5njmhuK8LGkyoagUTtPpx2gib2VgMdyIOySI7j4VwINljBKbKAzq_t7zWyDkePOaz7RV3dX2QcVWjZjvDFVd6NodmmRPFeBtB5Sgz-QhfrCb0ukgbRxOS9i3KaBGu44u__JPQwG2RCXoDptZWHlxiE4evd-z6LO2n0mVKCIlWHpe3G9imBa7aBJ4HCRNZjnTClX3ZIw?width=2896&height=2172&cropmode=none"></p><p>米 10 Pro 的高光处理更出色，整体色彩也更讨喜，胜。</p><p><img src="https://isuegq.bn.files.1drv.com/y4mBGaHDHqqHR6SeoMHFurTMIb4IJaysoXAw4oHQ7nbbE_JQ1zrZYeEVEQQNFrRVZAFPx1EptPIzPuFfFdQoE1PUZGiEeozXLbR28sQsXcLHWJVwQtUw1DWylSTTD2fQnVDwLhIDjs6mgJRIFVD4EtT292PG3vR-wVjoOokoR8WJfQs1U3ggJ3-LSfr9uGgqleEA54_P7O0h9idPmpbUo3G9g?width=2016&height=1512&cropmode=none"></p><p><img src="https://g8u1iw.bn.files.1drv.com/y4mws_XLc-CznauTZveFZoaKX_59s7yOVCL-sX5qsVi4S5Th95LjGtIv6-jIaw4dl2MRxLEtYKFoxnLg9pjzIil_0cN3cF7wQCOAJmUdwwZAxi_idjiCWj22w6SXegaVwDuKXjxfooFdC5x1kcijqaG0aU8cop2D8WjRpa3Gzembwk9FmUOiWOnyHK-aBvyRA-V8njqs3UOUs9vDH7KMwUtjg?width=2896&height=2172&cropmode=none"></p><p>这张照片里 Note9 还是会有酱油放多、画面过于浓郁的问题，米 10 Pro 上那根葱、还有上方冒着热气模糊的感觉更讨喜，后者胜。</p><p><img src="https://isucgq.bn.files.1drv.com/y4mbEHdUdiWsbVbq7ok93XWetAqRHLtsBC0NbrOEsrmBn4904utny8gNZpyoexPN5TZhZE9wc9X-sdIsZMVhdAkt1Ans8XR5dFtI4Oj1vAHBXDBzGwZ3M9CUr10KaZb9tTHoIyie9oaFRzRT3PpIEjpFINuAcwjdb5XN8Suf452FU2lph76NDkwUrQQFlWDuUEArhdCeBcK7ncm278lI1-a7Q?width=2016&height=1512&cropmode=none"></p><p><img src="https://g8uziw.bn.files.1drv.com/y4mdGQBvm1_nSms44fOMchAsAcwsbFV-fjq6eW9EdWg7SgQQ71WeqhCS4N5zcWxMSVU000uOakfpwHnldNRBgp08fENIcLL1DK65_YeJjrTp4LfnUn_X1t7xGXMdciX6k2bVe7ugDJ8UvazL1XMQmRadTHrjSgjAmUAfISKsG96YFamiWOccBml1t1lQsn1T2EPIjRMThq3Q8M8ViklCXjXXQ?width=2896&height=2172&cropmode=none"></p><p>虽然米 10 Pro 的细节更多，但炫光问题令人捉急，Note9 胜。</p><p><img src="https://isubgq.bn.files.1drv.com/y4m8WSksskvwPgRLM-5ZQe92Xw0vX16GCYBxr2hcpBrHtfSX60JEo8puTVE3A3eZMxsWIJmKWZV3-x_BLLwfZvoabCz8_zAmjTp6Mit3Y_NlK9JHcSmn3OucNT74BmYW76V6Ad0H9bP3b0HIalxLfk02um8DU_viqw4GxdRAqmCwICWGv4znQpc2zYQSc6tnZibd4xm_8NdY-Lqy18Dxd38_Q?width=2016&height=1512&cropmode=none"></p><p><img src="https://g8uyiw.bn.files.1drv.com/y4mCHJLX56qx9dsrGOm28IqSmj5_FFKIkBWbjg2fy_lxMrnz-TMvRDCqU3yVISEu0VHCAR2R59TVEMnjx9FEL5oy5K51a7GRPwp-ebAGlNoJ-hOeI2r81DRxcT3ssnubgoaSDVwbsB70GSiETZIp6PMZETtxSfLohdk7GXgd6bbteONyN3PkSsippl4m4gQs6gbPIFiNpf_nAoPo_nbqLgJQQ?width=2896&height=2172&cropmode=none"></p><p><strong>苏州除了是大家传统印象中的旅游城市外，其实更是一座工厂城市，大大小小的工厂散落苏州的各个区、市。这些工厂托起了中国的实体经济，而每年来自全国各地的年轻人被输送到这些厂里做工，每月做六休一、算上各种加班费也只能赚几千块钱，他们才是绝大多数“后浪”。</strong>我不喜欢 Note9 的色彩，仿佛在看“旧照片”，后者胜。</p><p><img src="https://i8ukgq.bn.files.1drv.com/y4mLn_d_DxrABe2SL3XHDeaqfRie4fb-pY5w_d9UhTC-9WTWAFqfFCkugf8gt3749IHinqB7LkKnt2eidlthxaTZSMPZwyJZbcGvn-u3cn1p7uV2nF6Gv7GNHseMCVK1rsry7OKkC3KXzUZe3BMXYJ1ve3BPqNFSr-L13eXWw_FWlnHMpp4s6OAq30eOinurqsCcHLclggiOGzwhe-0qGgCcw?width=2016&height=1512&cropmode=none"></p><p><img src="https://g8uxiw.bn.files.1drv.com/y4m6nhRtrUkSjiItBWY_xADZepC7pPxgM7i9IY6FkCPMIxTyQpTg4zy_CvoaogZBrVuCoJgcvRN82GP3FYtzU7yBhw0-25eWvfjZ2_YtMzKU7oxbJlXHWMbitimE-kYsDi2lzBH7a-9r9e4F33h_s1iVmwJiJdtjQXJvuY2_aX_CLewDALj78EKRjREbtU2ye_pbLAmfGheQANDi8dXt6ouoA?width=2896&height=2172&cropmode=none"></p><p>我的爱琴。面向朋友圈拍照肯定是 Note9 胜，第一眼太讨喜，不过吉他还是值得放大看细节的，这时候米 10 Pro 就扳回一城。平手。</p><p><img src="https://i8ujgq.bn.files.1drv.com/y4mb3XLJdtKIdvtmRASsPh-5DBNUvT2WLs5ZmZ7KEHGoRu34uGieZn1ZiGIPiImCoXNg8NXrM6mluohpZcb15yUxqFjbzZ1cKvLpdH3heySuBnJwDeRpLmEwpyh7mNTBjloAcNUXW7mFxGRhsexY-BeXxXP3aHnOp0WPvyrQcNu4aq5l1UJ6ZC2qgdtYLqIe65EPJpGncTFZ0-FbZzq06CcHg?width=1512&height=2016&cropmode=none"></p><p><img src="https://g8uwiw.bn.files.1drv.com/y4miaFmwEw_IcLvgKegfiAnJBK-nX5gxuC36GSMogeJi5pwKJRpYQWLN9iNs3Nwz9pN3Qc67iTYLfadY_Yi5HPk0ThAJNPKZ_FrWpUf0-18pTxINXQH6W_sEeyQW6k3hKnx5Z0wMkZKgm0TuZYasuVuqis9Bs8YmGZMIJ2bKVzUL6nXHs22s5hL-P17-g1CoFZRkLWCLjBQPD1jQ2nBoqlwsg?width=2172&height=2896&cropmode=none"></p><p>总的来说米 10 Pro 拍照能力在 Note9 之上，符合我的预期，能让我将 Note9 安心出掉，也算是不负小米想打进高端价位市场的初心。配合一众出色的硬件和成熟的 MIUI 优化，不愧是今年的“真香机”！</p><p>希望小米的股价也能快点涨起来，不要坐实了“年轻人第一支被套牢的股票”之名 😂 ——来自一位在结尾突然想起自己是小米的股东的年轻人 Orz</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在正文开始前，请允许我碎碎念一下。&lt;/p&gt;
&lt;p&gt;我从小喜欢数码产品，各种拆解、修复，初中开始靠使电烙铁拿奖中考加分… 一直以来身边人购置数码产品或者遇到问题都会咨询我，但我好像越长大越懒得折腾这些东西，热情逐渐被岁月磨灭（？）。难得有兴趣在换手机时做个简短的对比评测，就借此机会多写一点吧。&lt;/p&gt;</summary>
    
    
    
    <category term="数码体验" scheme="https://blog.joouis.com/categories/%E6%95%B0%E7%A0%81%E4%BD%93%E9%AA%8C/"/>
    
    
    <category term="mobile" scheme="https://blog.joouis.com/tags/mobile/"/>
    
    <category term="photo" scheme="https://blog.joouis.com/tags/photo/"/>
    
    <category term="comparison" scheme="https://blog.joouis.com/tags/comparison/"/>
    
    <category term="samsung" scheme="https://blog.joouis.com/tags/samsung/"/>
    
    <category term="xiaomi" scheme="https://blog.joouis.com/tags/xiaomi/"/>
    
    <category term="note9" scheme="https://blog.joouis.com/tags/note9/"/>
    
    <category term="mi10 pro" scheme="https://blog.joouis.com/tags/mi10-pro/"/>
    
  </entry>
  
  <entry>
    <title>以 Clock 应用为例追踪 TWIN 的运作流程</title>
    <link href="https://blog.joouis.com/2020/evgui-twin-workflow-review/"/>
    <id>https://blog.joouis.com/2020/evgui-twin-workflow-review/</id>
    <published>2020-04-09T15:33:38.000Z</published>
    <updated>2020-04-09T15:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2020/evgui-design-review/">硕士论文笔记系列</a>第六篇同时也是完结篇，原文写于 2016 年七月。</p><a id="more"></a><h2 id="APP-創建過程"><a href="#APP-創建過程" class="headerlink" title="APP 創建過程"></a>APP 創建過程</h2><ul><li><p>在 <code>main()</code> 函式中執行 <code>twin_clock_start()</code> 即完成創建過程，下面會介紹該函數的內部運作原理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twin_clock_start (tf-&gt;screen, <span class="string">&quot;Clock&quot;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">240</span>, <span class="number">320</span>);</span><br></pre></td></tr></table></figure></li><li><p>在 <code>twin_clock_start()</code> 函式代碼：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_clock_start</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">twin_toplevel_t</span> *toplevel = twin_toplevel_create (screen, TWIN_ARGB32,</span><br><span class="line">                                                      TwinWindowApplication,</span><br><span class="line">                                                      x, y, w, h, name);</span><br><span class="line">    <span class="keyword">twin_clock_t</span>    *clock = twin_clock_create (&amp;toplevel-&gt;box);</span><br><span class="line">    (<span class="keyword">void</span>) clock;</span><br><span class="line">    twin_toplevel_show (toplevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>這裏的 <code>twin_toplevel_t</code> 結構體中只包含了一個名爲 <code>box</code> 的結構體，其定義如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">twin_box</span> &#123;</span>                                                             </span><br><span class="line">    <span class="keyword">twin_widget_t</span>   widget;</span><br><span class="line">    <span class="keyword">twin_box_dir_t</span>  dir; </span><br><span class="line">    <span class="keyword">twin_widget_t</span>   *children;</span><br><span class="line">    <span class="keyword">twin_widget_t</span>   *button_down;</span><br><span class="line">    <span class="keyword">twin_widget_t</span>   *focus;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">twin_widget</span> &#123;</span></span><br><span class="line">    <span class="keyword">twin_window_t</span>       *window;</span><br><span class="line">    <span class="keyword">twin_widget_t</span>       *next;</span><br><span class="line">    <span class="keyword">twin_box_t</span>          *parent;</span><br><span class="line">    <span class="keyword">twin_dispatch_proc_t</span>    dispatch;</span><br><span class="line">    <span class="keyword">twin_rect_t</span>         extents;    <span class="comment">/* current geometry */</span></span><br><span class="line">    <span class="keyword">twin_widget_t</span>       *copy_geom;</span><br><span class="line">    <span class="keyword">twin_bool_t</span>         paint;</span><br><span class="line">    <span class="keyword">twin_bool_t</span>         layout;</span><br><span class="line">    <span class="keyword">twin_bool_t</span>         want_focus;</span><br><span class="line">    <span class="keyword">twin_argb32_t</span>       background;</span><br><span class="line">    <span class="keyword">twin_widget_layout_t</span>    preferred;</span><br><span class="line">    <span class="keyword">twin_shape_t</span>        shape;</span><br><span class="line">    <span class="keyword">twin_fixed_t</span>        radius;                                                </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">twin_box_dir</span> &#123;</span></span><br><span class="line">    TwinBoxHorz, TwinBoxVert</span><br><span class="line">&#125; <span class="keyword">twin_box_dir_t</span>;</span><br></pre></td></tr></table></figure><ul><li>創建了 toplevel 後，就呼叫 <code>twin_clock_create()</code> 函式創建 <code>toplevel-&gt;box</code> 的內容；</li><li>最後呼叫 <code>twin_toplevel_show()</code> 函式，後面會分析。</li></ul></li></ul><h3 id="創建-Toplevel"><a href="#創建-Toplevel" class="headerlink" title="創建 Toplevel"></a>創建 Toplevel</h3><ul><li><p>呼叫 <code>twin_window_create()</code> 創建一個 <code>window</code> 結構如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">twin_window_t   *window = twin_window_create (screen, format, style, x, y, width, height); </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">twin_window</span> &#123;</span></span><br><span class="line">    <span class="keyword">twin_screen_t</span>   *screen;</span><br><span class="line">    <span class="keyword">twin_pixmap_t</span>   *pixmap;</span><br><span class="line">    <span class="keyword">twin_window_style_t</span> style;</span><br><span class="line">    <span class="keyword">twin_rect_t</span>     client;</span><br><span class="line">    <span class="keyword">twin_rect_t</span>     damage;</span><br><span class="line">    <span class="keyword">twin_bool_t</span>     client_grab;</span><br><span class="line">    <span class="keyword">twin_bool_t</span>     want_focus;</span><br><span class="line">    <span class="keyword">twin_bool_t</span>     draw_queued;</span><br><span class="line">    <span class="keyword">void</span>        *client_data;</span><br><span class="line">    <span class="keyword">char</span>        *name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">twin_draw_func_t</span>    draw;</span><br><span class="line">    <span class="keyword">twin_event_func_t</span>   event;</span><br><span class="line">    <span class="keyword">twin_destroy_func_t</span> destroy;</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A rectangular array of pixels</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">twin_pixmap</span> &#123;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ¦* Screen showing these pixels</span></span><br><span class="line"><span class="comment">    ¦*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">twin_screen</span>     *<span class="title">screen</span>;</span></span><br><span class="line">    <span class="keyword">twin_count_t</span>        disable;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ¦* List of displayed pixmaps</span></span><br><span class="line"><span class="comment">    ¦*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">twin_pixmap</span>     *<span class="title">down</span>, *<span class="title">up</span>;</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ¦* Screen position</span></span><br><span class="line"><span class="comment">    ¦*/</span></span><br><span class="line">    <span class="keyword">twin_coord_t</span>        x, y;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ¦* Pixmap layout</span></span><br><span class="line"><span class="comment">    ¦*/</span></span><br><span class="line">    <span class="keyword">twin_format_t</span>       format;</span><br><span class="line">    <span class="keyword">twin_coord_t</span>        width;      <span class="comment">/* pixels */</span></span><br><span class="line">    <span class="keyword">twin_coord_t</span>        height;     <span class="comment">/* pixels */</span></span><br><span class="line">    <span class="keyword">twin_coord_t</span>        stride;     <span class="comment">/* bytes */</span></span><br><span class="line">    <span class="keyword">twin_matrix_t</span>       transform;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ¦* Clipping - a single rectangle in pixmap coordinates.</span></span><br><span class="line"><span class="comment">    ¦* Drawing is done clipped by this rectangle and relative</span></span><br><span class="line"><span class="comment">    ¦* to origin_x, origin_y</span></span><br><span class="line"><span class="comment">    ¦*/</span></span><br><span class="line">    <span class="keyword">twin_rect_t</span>         clip;</span><br><span class="line">    <span class="keyword">twin_coord_t</span>        origin_x;</span><br><span class="line">    <span class="keyword">twin_coord_t</span>        origin_y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ¦* Pixels</span></span><br><span class="line"><span class="comment">    ¦*/</span></span><br><span class="line">    <span class="keyword">twin_pointer_t</span>      p;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ¦* When representing a window, this point</span></span><br><span class="line"><span class="comment">    ¦* refers to the window object</span></span><br><span class="line"><span class="comment">    ¦*/</span></span><br><span class="line">    <span class="keyword">twin_window_t</span>       *window;</span><br><span class="line">&#125; <span class="keyword">twin_pixmap_t</span>;</span><br></pre></td></tr></table></figure><ul><li>其中 <code>client</code> 的上下左右算的都是相對位置。</li><li><code>pixmap</code> 則是呼叫 <code>twin_pixmap_create()</code> 函式創建，包含：<ul><li>幾何操作的矩陣初始化爲單位矩陣；</li><li>clip region設爲時鐘整個大小；</li><li>呼叫 <code>malloc()</code> 分配 <code>window</code> 對應大小的記憶體空間並初始化爲 0；</li></ul></li><li>創建完 <code>pixmap</code> 後進行 clip region 的計算（使用 <code>client</code> 座標）、<code>pixmap</code> 的重定位（以 <code>window</code> 的起始座位爲開始）等操作。</li></ul></li><li><p>創建了 window，接着就是初始化 toplevel 了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* _twin_toplevel_init (toplevel, _twin_toplevel_dispatch, window, name); */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">_twin_toplevel_init (<span class="keyword">twin_toplevel_t</span>        *toplevel,</span><br><span class="line">           <span class="keyword">twin_dispatch_proc_t</span>   dispatch,</span><br><span class="line">           <span class="keyword">twin_window_t</span>      *window,</span><br><span class="line">           <span class="keyword">const</span> <span class="keyword">char</span>         *name)</span><br><span class="line">&#123;</span><br><span class="line">    twin_window_set_name (window, name);                                                                                                                      </span><br><span class="line">    window-&gt;draw = _twin_toplevel_draw;</span><br><span class="line">    window-&gt;destroy = _twin_toplevel_destroy;</span><br><span class="line">    window-&gt;event = _twin_toplevel_event;</span><br><span class="line">    window-&gt;client_data = toplevel;</span><br><span class="line">    _twin_box_init (&amp;toplevel-&gt;box, <span class="number">0</span>, window, TwinBoxVert, dispatch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>twin_window_set_name()</code> 函式除了設定名字外，還呼叫了一次 <code>twin_window_draw()</code> 函式將 <code>window</code> 的上方標題畫了出來（數據計算了出來）。</p></li><li><p>接下來給 <code>window</code> 指派對應的函式，分別是 <code>draw</code> <code>destroy</code> <code>event</code>。</p></li><li><p><code>_twin_toplevel_draw()</code> 函式主要做了以下幾件事：</p><ul><li>禁止 <code>screen</code> 更新；</li><li><code>event</code> 種類設爲 <code>TwinEventPaint</code>；</li><li>呼叫 <code>dispatch</code> 函式；</li><li>打開 <code>screen</code> 更新。</li></ul></li><li><p>此時的 <code>dispatch</code> 函式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(*toplevel-&gt;box.widget.dispatch) (&amp;toplevel-&gt;box.widget, &amp;event);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">twin_dispatch_result_t</span></span><br><span class="line">_twin_clock_dispatch (<span class="keyword">twin_widget_t</span> *widget, <span class="keyword">twin_event_t</span> *event)                                                                                             </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">twin_clock_t</span>    *clock = (<span class="keyword">twin_clock_t</span> *) widget;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_twin_widget_dispatch (widget, event) == TwinDispatchDone)</span><br><span class="line">    <span class="keyword">return</span> TwinDispatchDone;</span><br><span class="line">    <span class="keyword">switch</span> (event-&gt;kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> TwinEventPaint:</span><br><span class="line">    _twin_clock_paint (clock);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> TwinDispatchContinue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有兩個重點，分別是 <code>_twin_widget_dispatch()</code> 和 <code>_twin_clock_paint()</code>。後者無需多言，來看一下前者：</p><ul><li>如果是 <code>TwinEventQueryGeometry</code>，即目前 <code>event</code> 中還沒有幾何座標，則先不要佈局 <code>widget</code>，檢查 <code>widget</code> 中是否存在備份的 <code>widget</code>，若有則使用它進行派遣工作，然後直接返回派遣結束；</li><li>如果是 <code>TwinEventConfigure</code>，則把 <code>widget</code> 的幾何座標設定爲 <code>event</code> 中的幾何座標然後返回派遣繼續值；</li><li>如果是 <code>TwinEventPaint</code>，則呼叫 <code>_twin_widget_paint()</code>（實際呼叫的是 <code>_twin_widget_paint_shape()</code>，即畫出 <code>widget</code> 的形狀） 然後返回派遣繼續值。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">twin_dispatch_result_t</span></span><br><span class="line">_twin_widget_dispatch (<span class="keyword">twin_widget_t</span> *widget, <span class="keyword">twin_event_t</span> *event)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event-&gt;kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> TwinEventQueryGeometry:</span><br><span class="line">      widget-&gt;layout = TWIN_FALSE;</span><br><span class="line">      <span class="keyword">if</span> (widget-&gt;copy_geom)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">twin_widget_t</span>   *copy = widget-&gt;copy_geom;</span><br><span class="line">          <span class="keyword">if</span> (copy-&gt;layout)</span><br><span class="line">          (*copy-&gt;dispatch) (copy, event);</span><br><span class="line">          widget-&gt;preferred = copy-&gt;preferred;</span><br><span class="line">          <span class="keyword">return</span> TwinDispatchDone;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> TwinEventConfigure:</span><br><span class="line">      widget-&gt;extents = event-&gt;u.configure.extents;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> TwinEventPaint:</span><br><span class="line">      _twin_widget_paint (widget);</span><br><span class="line">      widget-&gt;paint = TWIN_FALSE;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> TwinDispatchContinue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>_twin_toplevel_event()</code> 會呼叫一次派遣函式，並會判斷是否完成派遣工作，若完成則返回1。</p></li><li><p>最後 <code>_twin_box_init()</code> 中會呼叫 <code>_twin_widget_init()</code>。</p></li></ul><h3 id="創建-Clock"><a href="#創建-Clock" class="headerlink" title="創建 Clock"></a>創建 Clock</h3><ul><li><p>實際呼叫的是 <code>_twin_clock_init()</code> 函式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_twin_clock_init (<span class="keyword">twin_clock_t</span>      *clock, </span><br><span class="line">         <span class="keyword">twin_box_t</span>        *parent,</span><br><span class="line">         <span class="keyword">twin_dispatch_proc_t</span>  dispatch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">twin_widget_layout_t</span>   preferred = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="comment">// preferred: width, height, stretch_width, stretch_height</span></span><br><span class="line">    _twin_widget_init (&amp;clock-&gt;widget, parent, <span class="number">0</span>, preferred, dispatch);                                                                                       </span><br><span class="line">    clock-&gt;timeout = twin_set_timeout (_twin_clock_timeout,</span><br><span class="line">                     _twin_clock_interval(),</span><br><span class="line">                     clock);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">twin_widget_layout</span> &#123;</span></span><br><span class="line">    <span class="keyword">twin_coord_t</span>        width;</span><br><span class="line">    <span class="keyword">twin_coord_t</span>        height;</span><br><span class="line">    <span class="keyword">twin_stretch_t</span>      stretch_width;</span><br><span class="line">    <span class="keyword">twin_stretch_t</span>      stretch_height;</span><br><span class="line">&#125; <span class="keyword">twin_widget_layout_t</span>;</span><br></pre></td></tr></table></figure></li><li><p>參數中：</p><ul><li><code>clock</code> 指針指向一塊 <code>twin_clock_dispatch</code> 大小的記憶體位置</li><li><code>parent</code> 指針即 <code>&amp;toplevel→box</code></li><li><code>dispatch</code> 即 <code>_twin_clock_dispatch</code>，之前有介紹其功能</li></ul></li><li><p><code>twin_clock_t</code> 結構體中有兩個成員 <code>widget</code> 和 <code>*timeout</code>，前者呼叫 <code>_twin_widget_init()</code> 進行了初始化；而後者則是呼叫 <code>twin_set_timeout()</code>，具體代碼如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">twin_timeout_t</span> *</span><br><span class="line">twin_set_timeout (<span class="keyword">twin_timeout_proc_t</span>   timeout_proc,</span><br><span class="line">        <span class="keyword">twin_time_t</span>       delay,</span><br><span class="line">        <span class="keyword">void</span>          *closure)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">twin_timeout_t</span>  *timeout = <span class="built_in">malloc</span> (<span class="keyword">sizeof</span> (<span class="keyword">twin_timeout_t</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!timeout)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!start)</span><br><span class="line">    start = twin_now (); </span><br><span class="line">    timeout-&gt;delay = delay;</span><br><span class="line">    timeout-&gt;proc = timeout_proc;</span><br><span class="line">    timeout-&gt;closure = closure;</span><br><span class="line">    _twin_queue_timeout (timeout, twin_now() + delay);</span><br><span class="line">    <span class="keyword">return</span> timeout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>參數 <code>timeout_proc</code> 爲：<ul><li><code>_twin_widget_queue_paint()</code> 函式會接着呼叫 <code>_twin_toplevel_queue_paint()</code> → <code>twin_set_work()</code> → <code>_twin_queue_work()</code> → <code>_twin_queue_insert()</code>，即把 <code>widget</code> 畫好後把畫 <code>toplevel</code> 的任務按照優先權插入到工作隊列中；</li><li>最後返回一個 <code>twin_time_t(int32_t)</code> 的時間間隔，設定爲一秒（1000 ms），<code>_twin_clock_interval()</code> 函式：<ul><li>原版實作是獲取 linux 當前的微秒時間 <code>tv_usec</code>，用 <code>1000 - (tv_usec / 1000)</code> 做倒數；</li><li>我們的版本使用了 STM32F429 自帶的 Systick 計時器進行計時，每 1ms 發生一次中斷，設定變數 <code>tv_msec</code> 加一，然後一樣的 <code>1000 - tv_msec</code>；</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">twin_time_t</span> _twin_clock_timeout (<span class="keyword">twin_time_t</span> maybe_unused now, <span class="keyword">void</span> *closure)   &#123;</span><br><span class="line">    <span class="keyword">twin_clock_t</span>   *clock = closure;</span><br><span class="line">    _twin_widget_queue_paint (&amp;clock-&gt;widget);</span><br><span class="line">    <span class="keyword">return</span> _twin_clock_interval ();                                                   &#125;</span><br></pre></td></tr></table></figure><ul><li>參數 <code>delay</code> 即 <code>_twin_clock_interval()</code> 函式返回值；</li><li><code>start</code> 爲全局變數，單位爲毫秒，只會在此函數中初始化，無用；</li><li><code>_twin_queue_timeout()</code> 函式的功能是更新 <code>clock→timeout</code> 的時間，其中的 <code>head</code> 指針是一個全局變數，這裏會有序地插入到 <code>head</code> 指向的超時隊列中（相當於做了一個排序動作）。後面在 <code>dispatch</code> 時會呼叫 <code>_twin_run_timeout()</code> 函式來對超時隊列進行操作。<ul><li>插入是遍歷整個隊列，依次比較需要插入的超時成員與隊列中的超時成員的時間順序；</li><li>在遍歷的迴圈中，<code>proc</code> 指針指向的是 <code>_twin_timeout_order()</code> 函式，比較兩個任務的時間順序，返回 <code>TWIN_BEFORE(-1)</code>、 <code>TWIN_AFTER(1)</code> 或 <code>TWIN_AT(0)</code>；</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_queue_timeout (<span class="keyword">twin_timeout_t</span>   *timeout, <span class="keyword">twin_time_t</span> time)</span><br><span class="line">&#123;</span><br><span class="line">    timeout-&gt;time = time;</span><br><span class="line">    _twin_queue_remove (&amp;head, &amp;timeout-&gt;<span class="built_in">queue</span>);</span><br><span class="line">    _twin_queue_insert (&amp;head, _twin_timeout_order, &amp;timeout-&gt;<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_queue_insert (<span class="keyword">twin_queue_t</span>    **head, <span class="keyword">twin_queue_proc_t</span>   proc, <span class="keyword">twin_queue_t</span>    *<span class="keyword">new</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">twin_queue_t</span> **prev, *q;</span><br><span class="line">    <span class="keyword">for</span> (prev = head; (q = *prev); prev = &amp;q-&gt;next)</span><br><span class="line">    <span class="keyword">if</span> ((*proc) (<span class="keyword">new</span>, q) == TWIN_AFTER)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;next = *prev; </span><br><span class="line">    <span class="keyword">new</span>-&gt;order = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;walking = TWIN_FALSE;</span><br><span class="line">    <span class="keyword">new</span>-&gt;deleted = TWIN_FALSE;</span><br><span class="line">    *prev = <span class="keyword">new</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>總結創建 <code>clock</code> 做了以下工作：</p><ul><li>初始化 <code>clock→widget</code>；</li><li>初始化 <code>clock→timeout</code>，並將其插入到超時隊列中。</li></ul></li></ul><h3 id="畫出-Toplevel"><a href="#畫出-Toplevel" class="headerlink" title="畫出 Toplevel"></a>畫出 Toplevel</h3><ul><li>首先呼叫了 <code>_twin_toplevel_layout()</code> 函式，將 <code>event</code> 分別設置爲 <code>TwinEventQueryGeometry</code> 和 <code>TwinEventConfigure</code> 然後呼叫 <code>*toplevel-&gt;box.widget.dispatch</code> （此處爲之前有介紹的 <code>_twin_clock_dispatch</code> 函式）進行配置；</li><li>接着執行 <code>_twin_toplevel_paint()</code> 函式，實際就是將 <code>event</code> 設爲 <code>TwinEventPaint</code> 然後呼叫 <code>_twin_clock_paint()</code> 函式畫圖；</li><li>最後執行 <code>twin_window_show()</code> 函式，判斷此 <code>toplevel→box.widget.window</code> 是否已經顯示（在上則顯示在不則顯示），若沒有則呼叫 <code>twin_pixmap_show()</code> 函式進行重新設定。</li></ul><h2 id="調度執行過程"><a href="#調度執行過程" class="headerlink" title="調度執行過程"></a>調度執行過程</h2><ul><li><code>twin_dispatch()</code> 函式中只有一個包含三個函式的迴圈：<ul><li><code>_twin_run_timeout()</code>：</li><li><code>_time_run_work()</code>：</li><li><code>_twin_run_file()</code>：用於監測外部滑鼠等活動，尚未實作；</li></ul></li></ul><h3 id="twin-run-timeout"><a href="#twin-run-timeout" class="headerlink" title="_twin_run_timeout()"></a>_twin_run_timeout()</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _twin_run_timeout (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">twin_time_t</span> now = twin_now ();                                                                                                                            </span><br><span class="line">    <span class="keyword">twin_timeout_t</span>   *timeout;</span><br><span class="line">    <span class="keyword">twin_timeout_t</span>   *first;</span><br><span class="line">    <span class="keyword">twin_time_t</span> delay;</span><br><span class="line"></span><br><span class="line">    first = (<span class="keyword">twin_timeout_t</span> *) _twin_queue_set_order (&amp;head);</span><br><span class="line">    <span class="keyword">for</span> (timeout = first; </span><br><span class="line">     timeout &amp;&amp; twin_time_compare (now, &gt;=, timeout-&gt;time);</span><br><span class="line">     timeout = (<span class="keyword">twin_timeout_t</span> *) timeout-&gt;<span class="built_in">queue</span>.order)</span><br><span class="line">    &#123;</span><br><span class="line">    delay = (*timeout-&gt;proc) (now, timeout-&gt;closure);</span><br><span class="line">    <span class="keyword">if</span> (delay &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        timeout-&gt;time = twin_now() + delay;</span><br><span class="line">        _twin_queue_reorder (&amp;head,</span><br><span class="line">                 _twin_timeout_order, &amp;timeout-&gt;<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        _twin_queue_delete (&amp;head, &amp;timeout-&gt;<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _twin_queue_review_order (&amp;first-&gt;<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>首先呼叫 _twin_queue_set_order() 函式將整個隊列的 walking 狀態置爲 TRUE。這裏有必要詳細介紹一下 twin 使用的鏈表結構：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">twin_queue</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">twin_queue</span>  *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">twin_queue</span>  *<span class="title">order</span>;</span></span><br><span class="line">    <span class="keyword">twin_bool_t</span>     walking;</span><br><span class="line">    <span class="keyword">twin_bool_t</span>     deleted;</span><br><span class="line">&#125; <span class="keyword">twin_queue_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">twin_timeout</span> &#123;</span></span><br><span class="line">    <span class="keyword">twin_queue_t</span>    <span class="built_in">queue</span>;</span><br><span class="line">    <span class="keyword">twin_time_t</span>     time;</span><br><span class="line">    <span class="keyword">twin_time_t</span>     delay;</span><br><span class="line">    <span class="keyword">twin_timeout_proc_t</span> proc;</span><br><span class="line">    <span class="keyword">void</span>        *closure;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">twin_work</span> &#123;</span>                                                                                                                                           </span><br><span class="line">    <span class="keyword">twin_queue_t</span>    <span class="built_in">queue</span>;</span><br><span class="line">    <span class="keyword">int</span>         priority;</span><br><span class="line">    <span class="keyword">twin_work_proc_t</span>    proc;</span><br><span class="line">    <span class="keyword">void</span>        *closure;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>這裏隊列的實作和 linux kernel 中雙循環鏈表的實作很類似。首先定義一個只包含前後指針的結構體 <code>_twin_queue</code>，然後內嵌到一個含有數據資源的結構體 <code>_twin_timeout</code> 中。這樣的將指針從具體的數據結構中提取出來的做法，構成了一種通用的雙向鏈表實現。其優點是未來只需要編寫通用鏈表函式，即可構造和操作不同對象的鏈表，而無需爲每類對象的每種列表編寫專用函式，實現了代碼的重用。</li><li>目前用到了兩個隊列（第三個 <code>_twin_file</code> 暫時未使用），分別是 <code>_twin_timeout</code> 超時隊列和 <code>_twin_work</code> 工作隊列，均嵌套了 <code>_twin_queue</code> 結構。<ul><li>對隊列的各項操作，例如刪除、移除等均相同；</li><li>而像插入、重新排序因爲隊列的性質不同，排序的標準也不同（超時隊列會使用時間排序，而工作隊列會使用優先級），這樣就引入一個額外的參數——隊列的程式指針（<code>_twin_timeout_order</code> 和 <code>_twin_work_order</code>）。</li></ul></li><li>相比 linux kernel 中爲了訪問到宿主結構體的巨集定義 <code>offset</code> <code>typeof</code> <code>containerof</code>，這裏要簡單很多。在宿主結構體 <code>_twin_timeout</code> 的第一項成員即包含節點指針的 <code>twin_queue_t</code> 結構體， <code>queue</code> 的起始地址即 <code>timeout</code> 的起始地址。因此在 <code>_twin_queue_set_order()</code> 函式返回 <code>head</code> 這個 <code>queue</code> 的結構體地址後，強行轉換爲 <code>twin_timeout_t</code> 類型就可以得到 <code>head</code> 的宿主結構體了。</li><li>這裏也就是 <code>clock</code> 的 <code>timeout</code> 指向 <code>head </code>，因此 <code>first</code> 得到了 <code>clock</code> 的 <code>timeout</code> 結構體地址。</li></ul></li><li><p>後面這個迴圈的執行流程爲判斷超時隊列中成員的時間標籤，如果已經是過去式，則重新執行成員自帶的程式（這裏是呼叫 <code>_twin_clock_timeout</code>，會重畫 <code>clock</code> 的 <code>toplevel</code> 並加入到超時隊列中）。執行完畢後檢查是否還未到執行時間，若是則更新該成員的時間並重新對隊列進行排序，否則從隊列中刪除該成員。這樣做的目的就是不斷找出時間戳爲過去的成員，執行他們的任務並更新他們的時間。</p></li></ul><h3 id="twin-run-work"><a href="#twin-run-work" class="headerlink" title="_twin_run_work()"></a>_twin_run_work()</h3><ul><li><p>介紹過了超時隊列，工作隊列的機制也是類似的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _twin_run_work (<span class="keyword">void</span>)          </span><br><span class="line">&#123;   </span><br><span class="line">    <span class="keyword">twin_work_t</span> *work;         </span><br><span class="line">    <span class="keyword">twin_work_t</span> *first;        </span><br><span class="line">    </span><br><span class="line">    first = (<span class="keyword">twin_work_t</span> *) _twin_queue_set_order (&amp;head);</span><br><span class="line">    <span class="keyword">for</span> (work = first; work; work = (<span class="keyword">twin_work_t</span> *) work-&gt;<span class="built_in">queue</span>.order)</span><br><span class="line">    <span class="keyword">if</span> (!(*work-&gt;proc) (work-&gt;closure))</span><br><span class="line">        _twin_queue_delete (&amp;head, &amp;work-&gt;<span class="built_in">queue</span>);</span><br><span class="line">    _twin_queue_review_order (&amp;first-&gt;<span class="built_in">queue</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>拿到工作隊列的第一個宿主成員後，開始遍歷整個列表，依工作優先級次執行他們的任務。</p></li><li><p>工作列表中實際上就兩個工作：</p><ul><li>第一個是 <code>_twin_toplevel_paint</code>，用來計算出新的 <code>toplevel</code> 圖像</li><li>第二個是 <code>_twin_fbdev_work</code>，如果用的 X Window 則是 <code>_twin_x11_work</code>，用來呼叫底層接口來實際更新熒幕畫面</li></ul></li></ul><h2 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h2><p><img src="https://imxhua.bn.files.1drv.com/y4mZWNrqoK7-BqFKYsGYH-6r03I5huAh5tHbjza8H1v1h7X8bcMnC7jP39TtzFNfeOkn6AIb8F9X07ZneSubEz96c9EePbUYsioZ_blhxIHfNLU_NkdCIqKFfsYP9RzXfvIhiDd-cyl8Wz02rv1B5sxZ4oN-1-u5rEiGXNAYXv6ztU7NzzYDSFvWJACT2ZhfQkFbf83NVgMn3wKisl4IkmXTA?width=1001&height=712&cropmode=none"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2020/evgui-design-review/&quot;&gt;硕士论文笔记系列&lt;/a&gt;第六篇同时也是完结篇，原文写于 2016 年七月。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="vector" scheme="https://blog.joouis.com/tags/vector/"/>
    
    <category term="gui" scheme="https://blog.joouis.com/tags/gui/"/>
    
    <category term="twin" scheme="https://blog.joouis.com/tags/twin/"/>
    
    <category term="window system" scheme="https://blog.joouis.com/tags/window-system/"/>
    
    <category term="svg" scheme="https://blog.joouis.com/tags/svg/"/>
    
    <category term="workflow" scheme="https://blog.joouis.com/tags/workflow/"/>
    
    <category term="uml" scheme="https://blog.joouis.com/tags/uml/"/>
    
    <category term="scheduler" scheme="https://blog.joouis.com/tags/scheduler/"/>
    
  </entry>
  
  <entry>
    <title>TWIN API 整理</title>
    <link href="https://blog.joouis.com/2020/evgui-twin-apis/"/>
    <id>https://blog.joouis.com/2020/evgui-twin-apis/</id>
    <published>2020-04-09T14:24:00.000Z</published>
    <updated>2020-04-09T14:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2020/evgui-design-review/">硕士论文笔记系列</a>第五篇，原文写于 2016 年四月。</p><a id="more"></a><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">twin_box_create(<span class="keyword">twin_box_t</span> *parent, <span class="keyword">twin_box_dir_t</span> dir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_box_init(<span class="keyword">twin_box_t</span> *box, </span><br><span class="line">                    <span class="keyword">twin_box_t</span> *parent, </span><br><span class="line">                    <span class="keyword">twin_window_t</span> *window, </span><br><span class="line">                    <span class="keyword">twin_box_dir_t</span> dir, </span><br><span class="line">                    <span class="keyword">twin_dispatch_proc_t</span> dispatch);</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_dispatch_result_t</span> _twin_box_query_geometry(<span class="keyword">twin_box_t</span> *box);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_dispatch_result_t</span> _twin_box_configure(<span class="keyword">twin_box_t</span> *box)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_dispatch_result_t</span> _twin_box_dispatch(<span class="keyword">twin_widget_t</span> *widget, <span class="keyword">twin_event_t</span> *event)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_widget_t</span> * _twin_box_xy_to_widget(<span class="keyword">twin_box_t</span> *box, <span class="keyword">twin_coord_t</span> x, <span class="keyword">twin_coord_t</span> y)；</span><br></pre></td></tr></table></figure><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">twin_button_t</span> * <span class="title">twin_button_create</span> <span class="params">(<span class="keyword">twin_box_t</span>      *parent,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> <span class="keyword">char</span>       *value,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_argb32_t</span>    foreground,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_fixed_t</span>     font_size,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_style_t</span>     font_style)</span></span>;</span><br><span class="line">                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_button_paint (<span class="keyword">twin_button_t</span> *button);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_button_set_label_offset (<span class="keyword">twin_button_t</span> *button);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_dispatch_result_t</span> _twin_button_dispatch (<span class="keyword">twin_widget_t</span> *widget, <span class="keyword">twin_event_t</span> *event);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_button_init (<span class="keyword">twin_button_t</span>    *button,</span><br><span class="line">                        <span class="keyword">twin_box_t</span>       *parent,</span><br><span class="line">                        <span class="keyword">const</span> <span class="keyword">char</span>       *value,</span><br><span class="line">                        <span class="keyword">twin_argb32_t</span>    foreground,</span><br><span class="line">                        <span class="keyword">twin_fixed_t</span>     font_size,</span><br><span class="line">                        <span class="keyword">twin_style_t</span>     font_style,</span><br><span class="line">                        <span class="keyword">twin_dispatch_proc_t</span> dispatch);</span><br></pre></td></tr></table></figure><h3 id="Convolve"><a href="#Convolve" class="headerlink" title="Convolve"></a>Convolve</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_convolve</span> <span class="params">(<span class="keyword">twin_path_t</span> *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_path_t</span> *stroke,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_path_t</span> *pen)</span></span>;</span><br><span class="line">                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _twin_path_leftpoint (<span class="keyword">twin_path_t</span>   *path,</span><br><span class="line">                        <span class="keyword">twin_spoint_t</span> *p1,</span><br><span class="line">                        <span class="keyword">twin_spoint_t</span> *p2);</span><br><span class="line">                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _around_order (<span class="keyword">twin_spoint_t</span>    *a1,</span><br><span class="line">                        <span class="keyword">twin_spoint_t</span>    *a2,</span><br><span class="line">                        <span class="keyword">twin_spoint_t</span>    *b1,</span><br><span class="line">                        <span class="keyword">twin_spoint_t</span>    *b2);</span><br><span class="line">                        </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_subpath_convolve (<span class="keyword">twin_path_t</span> *path,</span><br><span class="line">                        <span class="keyword">twin_path_t</span> *stroke,</span><br><span class="line">                        <span class="keyword">twin_path_t</span> *pen);</span><br></pre></td></tr></table></figure><h3 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> twin_def_cursor_image[] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_pixmap_t</span> *<span class="title">twin_get_default_cursor</span><span class="params">(<span class="keyword">int</span> *hx, <span class="keyword">int</span> *hy)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">twin_read_header</span><span class="params">(fdtype fd, <span class="keyword">uint32_t</span> *buf, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_pixmap_t</span> *<span class="title">twin_load_X_cursor</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> index, <span class="keyword">int</span> *hx, <span class="keyword">int</span> *hy)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Dispatch"><a href="#Dispatch" class="headerlink" title="Dispatch"></a>Dispatch</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_dispatch</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Draw"><a href="#Draw" class="headerlink" title="Draw"></a>Draw</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> twin_src_op  comp2[<span class="number">2</span>][<span class="number">4</span>][<span class="number">3</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">static</span> twin_src_msk_op  comp3[<span class="number">2</span>][<span class="number">4</span>][<span class="number">4</span>][<span class="number">3</span>] = &#123;&#125;;</span><br><span class="line"><span class="keyword">static</span> twin_src_op  fill[<span class="number">2</span>][<span class="number">3</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">operand_xindex</span><span class="params">(<span class="keyword">twin_operand_t</span> *o)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_xform_t</span> *<span class="title">twin_pixmap_init_xform</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span> left, <span class="keyword">twin_coord_t</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span> src_x, <span class="keyword">twin_coord_t</span> src_y)</span></span>;</span><br><span class="line">                          </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_pixmap_free_xform</span> <span class="params">(<span class="keyword">twin_xform_t</span> *xform)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_pixmap_read_xform_8</span> <span class="params">(<span class="keyword">twin_xform_t</span> *xform, <span class="keyword">twin_coord_t</span> line)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_pixmap_read_xform_16</span> <span class="params">(<span class="keyword">twin_xform_t</span> *xform, <span class="keyword">twin_coord_t</span> line)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_pixmap_read_xform_32</span> <span class="params">(<span class="keyword">twin_xform_t</span> *xform, <span class="keyword">twin_coord_t</span> line)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_pixmap_read_xform</span> <span class="params">(<span class="keyword">twin_xform_t</span> *xform, <span class="keyword">twin_coord_t</span> line)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_composite</span> <span class="params">(<span class="keyword">twin_pixmap_t</span>  *dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>    dst_x,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>    dst_y,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_operand_t</span>  *src,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>    src_x,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>    src_y,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_operand_t</span>  *msk,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>    msk_x,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>    msk_y,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_operator_t</span> <span class="keyword">operator</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>    width,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>    height)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_premultiply_alpha</span><span class="params">(<span class="keyword">twin_pixmap_t</span> *px)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_fill</span> <span class="params">(<span class="keyword">twin_pixmap_t</span>    *dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_argb32_t</span>    pixel,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_operator_t</span>  <span class="keyword">operator</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>     left,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>     top,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>     right,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span>     bottom)</span></span>;</span><br><span class="line">                          </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_composite_simple (<span class="keyword">twin_pixmap_t</span>   *dst,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    dst_x,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    dst_y,</span><br><span class="line">                          <span class="keyword">twin_operand_t</span>  *src,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    src_x,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    src_y,</span><br><span class="line">                          <span class="keyword">twin_operand_t</span>  *msk,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    msk_x,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    msk_y,</span><br><span class="line">                          <span class="keyword">twin_operator_t</span> <span class="keyword">operator</span>,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    width,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    height);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_composite_xform (<span class="keyword">twin_pixmap_t</span>    *dst,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>     dst_x,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>     dst_y,</span><br><span class="line">                          <span class="keyword">twin_operand_t</span>   *src,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    src_x,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    src_y,</span><br><span class="line">                          <span class="keyword">twin_operand_t</span>  *msk,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    msk_x,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    msk_y,</span><br><span class="line">                          <span class="keyword">twin_operator_t</span> <span class="keyword">operator</span>,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    width,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>    height);</span><br><span class="line">                          </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_argb32_t</span> _twin_apply_alpha(<span class="keyword">twin_argb32_t</span> v);</span><br></pre></td></tr></table></figure><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">twin_file_t</span> * <span class="title">twin_set_file</span> <span class="params">(<span class="keyword">twin_file_proc_t</span> file_proc,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span>           fd,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_file_op_t</span>    ops,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">void</span>          *closure)</span></span>;</span><br><span class="line">                          </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_clear_file</span> <span class="params">(<span class="keyword">twin_file_t</span> *file)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_order_t</span> _twin_file_order (<span class="keyword">twin_queue_t</span> *a, <span class="keyword">twin_queue_t</span> *b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_run_file (<span class="keyword">twin_time_t</span> delay);</span><br></pre></td></tr></table></figure><h3 id="Fixed"><a href="#Fixed" class="headerlink" title="Fixed"></a>Fixed</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">twin_fixed_t</span> <span class="title">twin_fixed_sqrt</span> <span class="params">(<span class="keyword">twin_fixed_t</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_sfixed_t</span> _twin_sfixed_sqrt (<span class="keyword">twin_sfixed_t</span> as);</span><br></pre></td></tr></table></figure><h3 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">twin_text_info</span> &#123;</span> </span><br><span class="line">    <span class="keyword">twin_point_t</span>    scale;</span><br><span class="line">    <span class="keyword">twin_point_t</span>    pen;</span><br><span class="line">    <span class="keyword">twin_point_t</span>    margin;</span><br><span class="line">    <span class="keyword">twin_point_t</span>    reverse_scale;</span><br><span class="line">    <span class="keyword">twin_bool_t</span>     snap;</span><br><span class="line">    <span class="keyword">twin_matrix_t</span>   matrix;</span><br><span class="line">    <span class="keyword">twin_matrix_t</span>   pen_matrix;</span><br><span class="line">    <span class="keyword">int</span>         n_snap_x;</span><br><span class="line">    <span class="keyword">twin_fixed_t</span>    snap_x[TWIN_GLYPH_MAX_SNAP_X];</span><br><span class="line">    <span class="keyword">int</span>         n_snap_y;</span><br><span class="line">    <span class="keyword">twin_fixed_t</span>    snap_y[TWIN_GLYPH_MAX_SNAP_Y];</span><br><span class="line">&#125; <span class="keyword">twin_text_info_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_text_compute_info (<span class="keyword">twin_path_t</span>    *path,</span><br><span class="line">                            <span class="keyword">twin_font_t</span>    *font,</span><br><span class="line">                            <span class="keyword">twin_text_info_t</span>   *info);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_text_compute_snap (<span class="keyword">twin_text_info_t</span>   *info,</span><br><span class="line">                            <span class="keyword">const</span> <span class="keyword">signed</span> <span class="keyword">char</span>  *b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_path_t</span> * _twin_text_compute_pen (<span class="keyword">twin_text_info_t</span> *info);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_fixed_t</span> _twin_snap (<span class="keyword">twin_fixed_t</span>    v,</span><br><span class="line">                            <span class="keyword">twin_fixed_t</span>    *snap,</span><br><span class="line">                            <span class="keyword">int</span>         n);</span><br><span class="line">                            </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_bool_t</span> <span class="title">twin_find_ucs4_page</span><span class="params">(<span class="keyword">twin_font_t</span> *font, <span class="keyword">uint32_t</span> page)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_bool_t</span> <span class="title">twin_has_ucs4</span> <span class="params">(<span class="keyword">twin_font_t</span> *font, <span class="keyword">twin_ucs4_t</span> ucs4)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">signed</span> <span class="keyword">char</span> * _twin_g_base (<span class="keyword">twin_font_t</span> *font, <span class="keyword">twin_ucs4_t</span> ucs4);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_fixed_t</span> _twin_glyph_width (<span class="keyword">twin_text_info_t</span>  *info,</span><br><span class="line">                              <span class="keyword">const</span> <span class="keyword">signed</span> <span class="keyword">char</span> *b);</span><br><span class="line">                              </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_text_metrics_ucs4</span> <span class="params">(<span class="keyword">twin_path_t</span>        *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_ucs4_t</span>        ucs4,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_text_metrics_t</span>    *m)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">signed</span> <span class="keyword">char</span> *<span class="title">twin_glyph_draw</span><span class="params">(<span class="keyword">twin_font_t</span>       *font,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">const</span> <span class="keyword">signed</span> <span class="keyword">char</span> *b)</span></span>;</span><br><span class="line">                              </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_ucs4</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_ucs4_t</span> ucs4)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_fixed_t</span> <span class="title">twin_width_ucs4</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_ucs4_t</span> ucs4)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _twin_utf8_to_ucs4 (<span class="keyword">const</span> <span class="keyword">char</span>       *src_orig,</span><br><span class="line">                              <span class="keyword">twin_ucs4_t</span>      *dst);</span><br><span class="line">                              </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_utf8</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_fixed_t</span> <span class="title">twin_width_utf8</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">string</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_text_metrics_utf8</span> <span class="params">(<span class="keyword">twin_path_t</span>     *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">const</span> <span class="keyword">char</span>          *<span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_text_metrics_t</span> *m)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Geom"><a href="#Geom" class="headerlink" title="Geom"></a>Geom</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">twin_dfixed_t</span> _twin_distance_to_point_squared (<span class="keyword">twin_spoint_t</span> *a, <span class="keyword">twin_spoint_t</span> *b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_dfixed_t</span> _twin_distance_to_line_squared (<span class="keyword">twin_spoint_t</span> *p, <span class="keyword">twin_spoint_t</span> *p1, <span class="keyword">twin_spoint_t</span> *p2);</span><br></pre></td></tr></table></figure><h3 id="Hull"><a href="#Hull" class="headerlink" title="Hull"></a>Hull</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">twin_slope</span> &#123;</span></span><br><span class="line">    <span class="keyword">twin_sfixed_t</span> dx;</span><br><span class="line">    <span class="keyword">twin_sfixed_t</span> dy;</span><br><span class="line">&#125; <span class="keyword">twin_slope_t</span>, <span class="keyword">twin_distance_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">twin_hull</span> &#123;</span></span><br><span class="line">    <span class="keyword">twin_spoint_t</span> point;</span><br><span class="line">    <span class="keyword">twin_slope_t</span> slope;</span><br><span class="line">    <span class="keyword">int</span> discard;</span><br><span class="line">&#125; <span class="keyword">twin_hull_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_slope_init (<span class="keyword">twin_slope_t</span> *slope, <span class="keyword">twin_spoint_t</span> *a, <span class="keyword">twin_spoint_t</span> *b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_hull_t</span> * _twin_hull_create (<span class="keyword">twin_path_t</span> *path, <span class="keyword">int</span> *nhull);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _twin_slope_compare (<span class="keyword">twin_slope_t</span> *a, <span class="keyword">twin_slope_t</span> *b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _twin_hull_vertex_compare (<span class="keyword">const</span> <span class="keyword">void</span> *av, <span class="keyword">const</span> <span class="keyword">void</span> *bv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _twin_hull_prev_valid (<span class="keyword">twin_hull_t</span> *hull, <span class="keyword">int</span> maybe_unused num_hull, <span class="keyword">int</span> index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _twin_hull_next_valid (<span class="keyword">twin_hull_t</span> *hull, <span class="keyword">int</span> num_hull, <span class="keyword">int</span> index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_hull_eliminate_concave (<span class="keyword">twin_hull_t</span> *hull, <span class="keyword">int</span> num_hull);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_path_t</span> * _twin_hull_to_path (<span class="keyword">twin_hull_t</span> *hull, <span class="keyword">int</span> num_hull);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_path_t</span> * <span class="title">twin_path_convex_hull</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_label_query_geometry (<span class="keyword">twin_label_t</span> *label);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_label_paint (<span class="keyword">twin_label_t</span> *label);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_dispatch_result_t</span> _twin_label_dispatch (<span class="keyword">twin_widget_t</span> *widget, <span class="keyword">twin_event_t</span> *event);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_label_set</span> <span class="params">(<span class="keyword">twin_label_t</span>    *label,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> <span class="keyword">char</span>  *value,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">twin_argb32_t</span>   foreground,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">twin_fixed_t</span>    font_size,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">twin_style_t</span>    font_style)</span></span>;</span><br><span class="line">              </span><br><span class="line"><span class="keyword">void</span> _twin_label_init (<span class="keyword">twin_label_t</span>      *label,</span><br><span class="line">              <span class="keyword">twin_box_t</span>        *parent,</span><br><span class="line">              <span class="keyword">const</span> <span class="keyword">char</span>        *value,</span><br><span class="line">              <span class="keyword">twin_argb32_t</span>     foreground,</span><br><span class="line">              <span class="keyword">twin_fixed_t</span>      font_size,</span><br><span class="line">              <span class="keyword">twin_style_t</span>      font_style,</span><br><span class="line">              <span class="keyword">twin_dispatch_proc_t</span>  dispatch);</span><br><span class="line">              </span><br><span class="line"><span class="function"><span class="keyword">twin_label_t</span> * <span class="title">twin_label_create</span> <span class="params">(<span class="keyword">twin_box_t</span>       *parent,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> <span class="keyword">char</span>       *value,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">twin_argb32_t</span>    foreground,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">twin_fixed_t</span>     font_size,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">twin_style_t</span>     font_style)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_matrix_multiply</span> <span class="params">(<span class="keyword">twin_matrix_t</span> *result,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> <span class="keyword">twin_matrix_t</span>   *a,</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">const</span> <span class="keyword">twin_matrix_t</span>   *b)</span></span>;</span><br><span class="line">              </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_matrix_identity</span> <span class="params">(<span class="keyword">twin_matrix_t</span> *m)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_bool_t</span> <span class="title">twin_matrix_is_identity</span> <span class="params">(<span class="keyword">twin_matrix_t</span> *m)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_matrix_translate</span> <span class="params">(<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> tx, <span class="keyword">twin_fixed_t</span> ty)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_matrix_scale</span> <span class="params">(<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> sx, <span class="keyword">twin_fixed_t</span> sy)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_fixed_t</span> _twin_matrix_determinant (<span class="keyword">twin_matrix_t</span> *matrix);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_point_t</span> _twin_matrix_expand (<span class="keyword">twin_matrix_t</span> *matrix);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_matrix_rotate</span> <span class="params">(<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_angle_t</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_sfixed_t</span> _twin_matrix_x (<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> x, <span class="keyword">twin_fixed_t</span> y);</span><br><span class="line"><span class="keyword">twin_sfixed_t</span> _twin_matrix_y (<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> x, <span class="keyword">twin_fixed_t</span> y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_fixed_t</span> _twin_matrix_fx (<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> x, <span class="keyword">twin_fixed_t</span> y);</span><br><span class="line"><span class="keyword">twin_fixed_t</span> _twin_matrix_fy (<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> x, <span class="keyword">twin_fixed_t</span> y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_sfixed_t</span> _twin_matrix_dx (<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> x, <span class="keyword">twin_fixed_t</span> y);</span><br><span class="line"><span class="keyword">twin_sfixed_t</span> _twin_matrix_dy (<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> x, <span class="keyword">twin_fixed_t</span> y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_sfixed_t</span> _twin_matrix_len (<span class="keyword">twin_matrix_t</span> *m, <span class="keyword">twin_fixed_t</span> dx, <span class="keyword">twin_fixed_t</span> dy);</span><br></pre></td></tr></table></figure><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _twin_current_subpath_len (<span class="keyword">twin_path_t</span> *path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_spoint_t</span> _twin_path_current_spoint (<span class="keyword">twin_path_t</span> *path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_spoint_t</span> _twin_path_subpath_first_spoint (<span class="keyword">twin_path_t</span> *path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_path_sfinish (<span class="keyword">twin_path_t</span> *path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_path_smove (<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_sfixed_t</span> x, <span class="keyword">twin_sfixed_t</span> y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_path_sdraw (<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_sfixed_t</span> x, <span class="keyword">twin_sfixed_t</span> y);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_move</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_fixed_t</span> x, <span class="keyword">twin_fixed_t</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_rmove</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_fixed_t</span> dx, <span class="keyword">twin_fixed_t</span> dy)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_draw</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_fixed_t</span> x, <span class="keyword">twin_fixed_t</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_rdraw</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_fixed_t</span> dx, <span class="keyword">twin_fixed_t</span> dy)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_close</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_circle</span> <span class="params">(<span class="keyword">twin_path_t</span>   *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>  x,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>  y,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> radius)</span></span>;</span><br><span class="line">                  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_ellipse</span> <span class="params">(<span class="keyword">twin_path_t</span> *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> x,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> y,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> x_radius,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> y_radius)</span></span>;</span><br><span class="line">                  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_fixed_t</span> _twin_matrix_max_radius (<span class="keyword">twin_matrix_t</span> *m);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_arc</span> <span class="params">(<span class="keyword">twin_path_t</span>  *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> x,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> y,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> x_radius,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> y_radius,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_angle_t</span> start,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_angle_t</span> extent)</span></span>;</span><br><span class="line">                  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_rectangle</span> <span class="params">(<span class="keyword">twin_path_t</span>    *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   x,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   y,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   w,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   h)</span></span>;</span><br><span class="line">                  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_rounded_rectangle</span> <span class="params">(<span class="keyword">twin_path_t</span>    *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   x,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   y,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   w,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   h,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   x_radius,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   y_radius)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_lozenge</span> <span class="params">(<span class="keyword">twin_path_t</span>  *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> x,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> y,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> w,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> h)</span></span>;</span><br><span class="line">                  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_tab</span> <span class="params">(<span class="keyword">twin_path_t</span>  *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> x,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> y,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> w,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> h,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> x_radius,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span> y_radius)</span></span>;</span><br><span class="line">                  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_set_matrix</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_matrix_t</span> matrix)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_matrix_t</span> <span class="title">twin_path_current_matrix</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_identity</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_translate</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_fixed_t</span> tx, <span class="keyword">twin_fixed_t</span> ty)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_scale</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_fixed_t</span> sx, <span class="keyword">twin_fixed_t</span> sy)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_rotate</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_angle_t</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_set_font_size</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_fixed_t</span> font_size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_fixed_t</span> <span class="title">twin_path_current_font_size</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_set_font_style</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_style_t</span> font_style)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_style_t</span> <span class="title">twin_path_current_font_style</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_set_cap_style</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_cap_t</span> cap_style)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_cap_t</span> <span class="title">twin_path_current_cap_style</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_empty</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_bounds</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_rect_t</span> *rect)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_append</span> <span class="params">(<span class="keyword">twin_path_t</span> *dst, <span class="keyword">twin_path_t</span> *src)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_state_t</span> <span class="title">twin_path_save</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_restore</span> <span class="params">(<span class="keyword">twin_path_t</span> *path, <span class="keyword">twin_state_t</span> *state)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_path_t</span> * <span class="title">twin_path_create</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_destroy</span> <span class="params">(<span class="keyword">twin_path_t</span> *path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_composite_path</span> <span class="params">(<span class="keyword">twin_pixmap_t</span>  *dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_operand_t</span> *src,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span>   src_x,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span>   src_y,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_path_t</span>    *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_operator_t</span>    <span class="keyword">operator</span>)</span></span>;</span><br><span class="line">                      </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_paint_path</span> <span class="params">(<span class="keyword">twin_pixmap_t</span>  *dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_argb32_t</span>  argb,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_path_t</span>    *path)</span></span>;</span><br><span class="line">                      </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_composite_stroke</span> <span class="params">(<span class="keyword">twin_pixmap_t</span>    *dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_operand_t</span>   *src,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span> src_x,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span> src_y,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_path_t</span>  *stroke,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_fixed_t</span> pen_width,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_operator_t</span>  <span class="keyword">operator</span>)</span></span>;</span><br><span class="line">                      </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_paint_stroke</span> <span class="params">(<span class="keyword">twin_pixmap_t</span>    *dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_argb32_t</span>    argb,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_path_t</span>      *stroke,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_fixed_t</span>     pen_width)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>   width;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>   height;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>   bytes_per_pixel; <span class="comment">/* 3:RGB, 4:RGBA */</span></span><br><span class="line">  <span class="keyword">char</span>          *comment;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>  pixel_data[<span class="number">8</span> * <span class="number">8</span> * <span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_pixmap_t</span> * <span class="title">twin_make_pattern</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Pixmap"><a href="#Pixmap" class="headerlink" title="Pixmap"></a>Pixmap</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">twin_pixmap_t</span> * <span class="title">twin_pixmap_create</span> <span class="params">(<span class="keyword">twin_format_t</span>   format,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_coord_t</span>    width,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_coord_t</span>    height)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_pixmap_t</span> * <span class="title">twin_pixmap_create_const</span> <span class="params">(<span class="keyword">twin_format_t</span>     format,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_coord_t</span>      width,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_coord_t</span>      height,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_coord_t</span>      stride,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_pointer_t</span>    pixels)</span></span>;</span><br><span class="line">                        </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_destroy</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_show</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_screen_t</span> *screen,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_pixmap_t</span> *lower)</span></span>;</span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_hide</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_pointer_t</span> <span class="title">twin_pixmap_pointer</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_coord_t</span> x, <span class="keyword">twin_coord_t</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_enable_update</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_disable_update</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_set_origin</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span> ox, <span class="keyword">twin_coord_t</span> oy)</span></span>;</span><br><span class="line">                          </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_offset</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap,   </span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span> offx, <span class="keyword">twin_coord_t</span> offy)</span></span>;</span><br><span class="line">                      </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_get_origin</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">twin_coord_t</span> *ox, <span class="keyword">twin_coord_t</span> *oy)</span></span>;</span><br><span class="line">                          </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_origin_to_clip</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_clip</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span>  left,   <span class="keyword">twin_coord_t</span> top,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span>  right,  <span class="keyword">twin_coord_t</span> bottom)</span></span>;</span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_set_clip</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_rect_t</span> clip)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_rect_t</span> <span class="title">twin_pixmap_get_clip</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_rect_t</span> <span class="title">twin_pixmap_save_clip</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_restore_clip</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_rect_t</span> rect)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_reset_clip</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_damage</span> <span class="params">(<span class="keyword">twin_pixmap_t</span>   *pixmap,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span>    left,   <span class="keyword">twin_coord_t</span> top,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span>    right,  <span class="keyword">twin_coord_t</span> bottom)</span></span>;</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_argb32_t</span> _twin_pixmap_fetch (<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_coord_t</span> x, <span class="keyword">twin_coord_t</span> y);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_bool_t</span> <span class="title">twin_pixmap_transparent</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_coord_t</span> x, <span class="keyword">twin_coord_t</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_pixmap_move</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_coord_t</span> x, <span class="keyword">twin_coord_t</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_bool_t</span> <span class="title">twin_pixmap_dispatch</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_event_t</span> *event)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Poly"><a href="#Poly" class="headerlink" title="Poly"></a>Poly</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">twin_edge</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">twin_edge</span>   *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">twin_sfixed_t</span>   top, bot;</span><br><span class="line">    <span class="keyword">twin_sfixed_t</span>   x;</span><br><span class="line">    <span class="keyword">twin_sfixed_t</span>   e;</span><br><span class="line">    <span class="keyword">twin_sfixed_t</span>   dx, dy;</span><br><span class="line">    <span class="keyword">twin_sfixed_t</span>   inc_x;</span><br><span class="line">    <span class="keyword">twin_sfixed_t</span>   step_x;</span><br><span class="line">    <span class="keyword">int</span>         winding;</span><br><span class="line">&#125; <span class="keyword">twin_edge_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _edge_compare_y (<span class="keyword">const</span> <span class="keyword">void</span> *a, <span class="keyword">const</span> <span class="keyword">void</span> *b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _edge_step_by (<span class="keyword">twin_edge_t</span>  *edge, <span class="keyword">twin_sfixed_t</span> dy);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_sfixed_t</span> _twin_sfixed_grid_ceil (<span class="keyword">twin_sfixed_t</span> f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _twin_edge_build (<span class="keyword">twin_spoint_t</span> *vertices, <span class="keyword">int</span> nvertices, <span class="keyword">twin_edge_t</span> *edges, <span class="keyword">twin_sfixed_t</span> dx, <span class="keyword">twin_sfixed_t</span> dy, <span class="keyword">twin_sfixed_t</span> top_y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _span_fill (<span class="keyword">twin_pixmap_t</span>   *pixmap,</span><br><span class="line">                  <span class="keyword">twin_sfixed_t</span>    y,</span><br><span class="line">                  <span class="keyword">twin_sfixed_t</span>    left,</span><br><span class="line">                  <span class="keyword">twin_sfixed_t</span>    right);</span><br><span class="line">                  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_edge_fill (<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_edge_t</span> *edges, <span class="keyword">int</span> nedges);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_fill_path</span> <span class="params">(<span class="keyword">twin_pixmap_t</span> *pixmap, <span class="keyword">twin_path_t</span> *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">twin_coord_t</span> dx, <span class="keyword">twin_coord_t</span> dy)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Primitive"><a href="#Primitive" class="headerlink" title="Primitive"></a>Primitive</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_argb32_t</span> __inline <span class="title">in_over</span> <span class="params">(<span class="keyword">twin_argb32_t</span>  dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">twin_argb32_t</span>  src,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">twin_a8_t</span>  msk)</span></span>;</span><br><span class="line">                            </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_argb32_t</span> __inline <span class="title">in</span> <span class="params">(<span class="keyword">twin_argb32_t</span>   src, <span class="keyword">twin_a8_t</span>       msk)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_argb32_t</span> __inline <span class="title">over</span> <span class="params">(<span class="keyword">twin_argb32_t</span> dst, <span class="keyword">twin_argb32_t</span> src)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_argb32_t</span> __inline <span class="title">rgb16_to_argb32</span> <span class="params">(<span class="keyword">twin_rgb16_t</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_argb32_t</span> __inline <span class="title">a8_to_argb32</span> <span class="params">(<span class="keyword">twin_a8_t</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_rgb16_t</span> __inline <span class="title">argb32_to_rgb16</span> <span class="params">(<span class="keyword">twin_argb32_t</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">twin_a8_t</span> __inline <span class="title">argb32_to_a8</span> <span class="params">(<span class="keyword">twin_argb32_t</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">vector</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">over_v</span> <span class="params">(<span class="built_in">vector</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> dst,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="built_in">vector</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> src)</span></span>;</span><br><span class="line">                                    </span><br><span class="line"><span class="keyword">void</span> _twin_vec_argb32_over_argb32 (<span class="keyword">twin_pointer_t</span>   dst,</span><br><span class="line">                              twin_source_u    src,</span><br><span class="line">                              <span class="keyword">int</span>          width);</span><br><span class="line">                              </span><br><span class="line"><span class="keyword">void</span> _twin_vec_argb32_source_argb32 (<span class="keyword">twin_pointer_t</span> dst,</span><br><span class="line">                              twin_source_u  src,</span><br><span class="line">                              <span class="keyword">int</span>            width);</span><br></pre></td></tr></table></figure><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _twin_queue_insert (<span class="keyword">twin_queue_t</span>    **head,</span><br><span class="line">                    <span class="keyword">twin_queue_proc_t</span>   proc,</span><br><span class="line">                    <span class="keyword">twin_queue_t</span>    *<span class="keyword">new</span>);</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">void</span> _twin_queue_remove (<span class="keyword">twin_queue_t</span>    **head, <span class="keyword">twin_queue_t</span>    *old);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_queue_reorder (<span class="keyword">twin_queue_t</span>   **head,</span><br><span class="line">                    <span class="keyword">twin_queue_proc_t</span>   proc,</span><br><span class="line">                    <span class="keyword">twin_queue_t</span>   *elem);</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">void</span> _twin_queue_delete (<span class="keyword">twin_queue_t</span>    **head,</span><br><span class="line">                    <span class="keyword">twin_queue_t</span>    *old);</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">twin_queue_t</span> * _twin_queue_set_order (<span class="keyword">twin_queue_t</span> **head);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_queue_review_order (<span class="keyword">twin_queue_t</span>  *first);</span><br></pre></td></tr></table></figure><h3 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">twin_screen_t</span> * <span class="title">twin_screen_create</span> <span class="params">(<span class="keyword">twin_coord_t</span>    width,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span>    height,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_put_begin_t</span>    put_begin,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_put_span_t</span> put_span,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">void</span>        *closure)</span></span>;</span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_destroy</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_register_damaged</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">void</span> (*damaged) (<span class="keyword">void</span> *),</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">void</span> *closure)</span></span>;</span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_enable_update</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_disable_update</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_damage</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span> left, <span class="keyword">twin_coord_t</span> top,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span> right, <span class="keyword">twin_coord_t</span> bottom)</span></span>;</span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_resize</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span> width, <span class="keyword">twin_coord_t</span> height)</span></span>;</span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">twin_bool_t</span> <span class="title">twin_screen_damaged</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_screen_span_pixmap</span><span class="params">(<span class="keyword">twin_screen_t</span> maybe_unused *screen,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_argb32_t</span> *span,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_pixmap_t</span> *p, <span class="keyword">twin_coord_t</span> y,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">twin_coord_t</span> left, <span class="keyword">twin_coord_t</span> right,</span></span></span><br><span class="line"><span class="function"><span class="params">                    twin_src_op op16, twin_src_op op32)</span></span>;</span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_update</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_set_active</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen, <span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_pixmap_t</span> * <span class="title">twin_screen_get_active</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_set_background</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen, <span class="keyword">twin_pixmap_t</span> *pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_pixmap_t</span> * <span class="title">twin_screen_get_background</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_screen_damage_cursor</span><span class="params">(<span class="keyword">twin_screen_t</span> *screen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_screen_set_cursor</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen, <span class="keyword">twin_pixmap_t</span> *pixmap,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_fixed_t</span> hotspot_x, <span class="keyword">twin_fixed_t</span> hotspot_y)</span></span>;</span><br><span class="line">                      </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_screen_update_cursor</span><span class="params">(<span class="keyword">twin_screen_t</span> *screen,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span> x, <span class="keyword">twin_coord_t</span> y)</span></span>;</span><br><span class="line">                      </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_adj_mouse_evt(<span class="keyword">twin_event_t</span> *event, <span class="keyword">twin_pixmap_t</span> *pixmap);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_bool_t</span> <span class="title">twin_screen_dispatch</span> <span class="params">(<span class="keyword">twin_screen_t</span> *screen, <span class="keyword">twin_event_t</span>  *event)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Spline"><a href="#Spline" class="headerlink" title="Spline"></a>Spline</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">twin_spline</span> &#123;</span></span><br><span class="line">    <span class="keyword">twin_spoint_t</span>    a, b, c, d;</span><br><span class="line">&#125; <span class="keyword">twin_spline_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _lerp_half (<span class="keyword">twin_spoint_t</span> *a, <span class="keyword">twin_spoint_t</span> *b, <span class="keyword">twin_spoint_t</span> *result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _de_casteljau (<span class="keyword">twin_spline_t</span> *spline, <span class="keyword">twin_spline_t</span> *s1, <span class="keyword">twin_spline_t</span> *s2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_dfixed_t</span> _twin_spline_error_squared (<span class="keyword">twin_spline_t</span> *spline);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_spline_decompose (<span class="keyword">twin_path_t</span> *path,</span><br><span class="line">                          <span class="keyword">twin_spline_t</span>   *spline,</span><br><span class="line">                          <span class="keyword">twin_dfixed_t</span>   tolerance_squared);</span><br><span class="line">                          </span><br><span class="line"><span class="keyword">void</span> _twin_path_scurve (<span class="keyword">twin_path_t</span>      *path,</span><br><span class="line">                  <span class="keyword">twin_sfixed_t</span>    x1, <span class="keyword">twin_sfixed_t</span> y1,</span><br><span class="line">                  <span class="keyword">twin_sfixed_t</span>    x2, <span class="keyword">twin_sfixed_t</span> y2,</span><br><span class="line">                  <span class="keyword">twin_sfixed_t</span>    x3, <span class="keyword">twin_sfixed_t</span> y3);</span><br><span class="line">                  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_path_curve</span> <span class="params">(<span class="keyword">twin_path_t</span>    *path,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   x1, <span class="keyword">twin_fixed_t</span> y1,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   x2, <span class="keyword">twin_fixed_t</span> y2,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">twin_fixed_t</span>   x3, <span class="keyword">twin_fixed_t</span> y3)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Timeout"><a href="#Timeout" class="headerlink" title="Timeout"></a>Timeout</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">twin_order_t</span> _twin_timeout_order (<span class="keyword">twin_queue_t</span> *a, <span class="keyword">twin_queue_t</span> *b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_queue_timeout (<span class="keyword">twin_timeout_t</span>   *timeout, <span class="keyword">twin_time_t</span> time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_run_timeout (<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_timeout_t</span> * <span class="title">twin_set_timeout</span> <span class="params">(<span class="keyword">twin_timeout_proc_t</span>   timeout_proc,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">twin_time_t</span>       delay,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">void</span>          *closure)</span></span>;</span><br><span class="line">                            </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_clear_timeout</span> <span class="params">(<span class="keyword">twin_timeout_t</span> *timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_time_t</span> _twin_timeout_delay (<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_time_t</span> <span class="title">twin_now</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Toplevel"><a href="#Toplevel" class="headerlink" title="Toplevel"></a>Toplevel</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">twin_dispatch_result_t</span> _twin_toplevel_dispatch (<span class="keyword">twin_widget_t</span> *widget, </span><br><span class="line">                                          <span class="keyword">twin_event_t</span> *event);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_bool_t</span> _twin_toplevel_event (<span class="keyword">twin_window_t</span>   *window, </span><br><span class="line">                                    <span class="keyword">twin_event_t</span>    *event);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_toplevel_draw (<span class="keyword">twin_window_t</span>    *window);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_toplevel_destroy (<span class="keyword">twin_window_t</span> *window);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_toplevel_init (<span class="keyword">twin_toplevel_t</span>        *toplevel,</span><br><span class="line">                      <span class="keyword">twin_dispatch_proc_t</span>   dispatch,</span><br><span class="line">                      <span class="keyword">twin_window_t</span>      *window,</span><br><span class="line">                      <span class="keyword">const</span> <span class="keyword">char</span>         *name);</span><br><span class="line">                      </span><br><span class="line"><span class="function"><span class="keyword">twin_toplevel_t</span> * <span class="title">twin_toplevel_create</span> <span class="params">(<span class="keyword">twin_screen_t</span>     *screen,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">twin_format_t</span>     format,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">twin_window_style_t</span>   style,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">twin_coord_t</span>      x,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">twin_coord_t</span>      y,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">twin_coord_t</span>      width,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">twin_coord_t</span>      height,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">const</span> <span class="keyword">char</span>        *name)</span></span>;</span><br><span class="line">                                    </span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">twin_bool_t</span> _twin_toplevel_paint (<span class="keyword">void</span> *closure);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">void</span> _twin_toplevel_queue_paint (<span class="keyword">twin_widget_t</span> *widget);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">twin_bool_t</span> _twin_toplevel_layout (<span class="keyword">void</span> *closure);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">void</span> _twin_toplevel_queue_layout (<span class="keyword">twin_widget_t</span> *widget);</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">twin_toplevel_show</span> <span class="params">(<span class="keyword">twin_toplevel_t</span> *toplevel)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Trig"><a href="#Trig" class="headerlink" title="Trig"></a>Trig</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uint16_t</span> _twin_sin_table[<span class="number">1</span> &lt;&lt; TWIN_LOG2_SIN] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_fixed_t</span> <span class="title">twin_sin</span> <span class="params">(<span class="keyword">twin_angle_t</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_fixed_t</span> <span class="title">twin_cos</span> <span class="params">(<span class="keyword">twin_angle_t</span> a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_fixed_t</span> <span class="title">twin_tan</span> <span class="params">(<span class="keyword">twin_angle_t</span> a)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Widget"><a href="#Widget" class="headerlink" title="Widget"></a>Widget</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">twin_path_t</span> * _twin_path_shape (<span class="keyword">twin_shape_t</span>  shape,</span><br><span class="line">                                  <span class="keyword">twin_coord_t</span>  left,</span><br><span class="line">                                  <span class="keyword">twin_coord_t</span>  top,</span><br><span class="line">                                  <span class="keyword">twin_coord_t</span>  right,</span><br><span class="line">                                  <span class="keyword">twin_coord_t</span>  bottom,</span><br><span class="line">                                  <span class="keyword">twin_fixed_t</span>  radius);</span><br><span class="line">                                  </span><br><span class="line"><span class="keyword">void</span> _twin_widget_paint_shape (<span class="keyword">twin_widget_t</span> *widget,</span><br><span class="line">                          <span class="keyword">twin_shape_t</span>  shape,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>  left,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>  top,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>  right,</span><br><span class="line">                          <span class="keyword">twin_coord_t</span>  bottom,</span><br><span class="line">                          <span class="keyword">twin_fixed_t</span>  radius);</span><br><span class="line">                          </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_widget_paint (<span class="keyword">twin_widget_t</span> *widget);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_dispatch_result_t</span> _twin_widget_dispatch (<span class="keyword">twin_widget_t</span> *widget, </span><br><span class="line">                                        <span class="keyword">twin_event_t</span> *event);</span><br><span class="line">                                        </span><br><span class="line"><span class="keyword">void</span> _twin_widget_init (<span class="keyword">twin_widget_t</span>    *widget,</span><br><span class="line">                    <span class="keyword">twin_box_t</span>       *parent,</span><br><span class="line">                    <span class="keyword">twin_window_t</span>    *window,</span><br><span class="line">                    <span class="keyword">twin_widget_layout_t</span> preferred,</span><br><span class="line">                    <span class="keyword">twin_dispatch_proc_t</span> dispatch);</span><br><span class="line">                    </span><br><span class="line"><span class="keyword">void</span> _twin_widget_queue_paint (<span class="keyword">twin_widget_t</span>   *widget);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_widget_queue_layout (<span class="keyword">twin_widget_t</span>   *widget);</span><br><span class="line"></span><br><span class="line"><span class="keyword">twin_bool_t</span> _twin_widget_contains (<span class="keyword">twin_widget_t</span>    *widget,</span><br><span class="line">                              <span class="keyword">twin_coord_t</span> x, <span class="keyword">twin_coord_t</span> y);</span><br><span class="line">                              </span><br><span class="line"><span class="keyword">void</span> _twin_widget_bevel (<span class="keyword">twin_widget_t</span>   *widget,</span><br><span class="line">                    <span class="keyword">twin_fixed_t</span>    b,</span><br><span class="line">                    <span class="keyword">twin_bool_t</span>     down);</span><br><span class="line">                    </span><br><span class="line"><span class="function"><span class="keyword">twin_widget_t</span> * <span class="title">twin_widget_create</span> <span class="params">(<span class="keyword">twin_box_t</span>      *parent,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">twin_argb32_t</span>   background,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">twin_coord_t</span>    width,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">twin_coord_t</span>    height,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">twin_stretch_t</span>  stretch_width,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">twin_stretch_t</span>  stretch_height)</span></span>;</span><br><span class="line">                                </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_widget_set</span> <span class="params">(<span class="keyword">twin_widget_t</span> *widget, <span class="keyword">twin_argb32_t</span> background)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">twin_window_t</span> * <span class="title">twin_window_create</span> <span class="params">(<span class="keyword">twin_screen_t</span>   *screen,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_format_t</span>   format,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_window_style_t</span> style,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_coord_t</span>    x,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_coord_t</span>    y,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_coord_t</span>    width,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">twin_coord_t</span>    height)</span></span>;</span><br><span class="line">                              </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_destroy</span> <span class="params">(<span class="keyword">twin_window_t</span> *window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_show</span> <span class="params">(<span class="keyword">twin_window_t</span> *window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_hide</span> <span class="params">(<span class="keyword">twin_window_t</span> *window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_configure</span> <span class="params">(<span class="keyword">twin_window_t</span>        *window,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_window_style_t</span>  style,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span>     x,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span>     y,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span>     width,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span>     height)</span></span>;</span><br><span class="line">                      </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_style_size</span> <span class="params">(<span class="keyword">twin_window_style_t</span> style,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">twin_rect_t</span>     *size)</span></span>;</span><br><span class="line">                        </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_set_name</span> <span class="params">(<span class="keyword">twin_window_t</span> *window, <span class="keyword">const</span> <span class="keyword">char</span>    *name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">twin_window_frame</span> <span class="params">(<span class="keyword">twin_window_t</span> *window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_draw</span> <span class="params">(<span class="keyword">twin_window_t</span> *window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_damage</span> <span class="params">(<span class="keyword">twin_window_t</span> *window,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span> left, <span class="keyword">twin_coord_t</span> top,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">twin_coord_t</span> right, <span class="keyword">twin_coord_t</span> bottom)</span></span>;</span><br><span class="line">                      </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">twin_bool_t</span> _twin_window_repaint (<span class="keyword">void</span> *closure);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_window_queue_paint</span> <span class="params">(<span class="keyword">twin_window_t</span> *window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_bool_t</span> <span class="title">twin_window_dispatch</span> <span class="params">(<span class="keyword">twin_window_t</span> *window, <span class="keyword">twin_event_t</span> *event)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">twin_order_t</span> _twin_work_order (<span class="keyword">twin_queue_t</span> *a, <span class="keyword">twin_queue_t</span> *b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _twin_queue_work (<span class="keyword">twin_work_t</span>   *work);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _twin_run_work (<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">twin_work_t</span> * <span class="title">twin_set_work</span> <span class="params">(<span class="keyword">twin_work_proc_t</span> work_proc,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">int</span>           priority,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">void</span>          *closure)</span></span>;</span><br><span class="line">                        </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">twin_clear_work</span> <span class="params">(<span class="keyword">twin_work_t</span> *work)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2020/evgui-design-review/&quot;&gt;硕士论文笔记系列&lt;/a&gt;第五篇，原文写于 2016 年四月。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="vector" scheme="https://blog.joouis.com/tags/vector/"/>
    
    <category term="gui" scheme="https://blog.joouis.com/tags/gui/"/>
    
    <category term="twin" scheme="https://blog.joouis.com/tags/twin/"/>
    
    <category term="window system" scheme="https://blog.joouis.com/tags/window-system/"/>
    
    <category term="svg" scheme="https://blog.joouis.com/tags/svg/"/>
    
    <category term="api" scheme="https://blog.joouis.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>EVGUI 触控简单处理笔记</title>
    <link href="https://blog.joouis.com/2020/evgui-touch-interaction/"/>
    <id>https://blog.joouis.com/2020/evgui-touch-interaction/</id>
    <published>2020-04-08T14:51:04.000Z</published>
    <updated>2020-04-08T14:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2020/evgui-design-review/">硕士论文笔记系列</a>第四篇，原文写于 2016 年六月。</p><a id="more"></a><h2 id="Touchscreen-driver"><a href="#Touchscreen-driver" class="headerlink" title="Touchscreen driver"></a>Touchscreen driver</h2><ul><li>STM32F429 Discovery 板載 STMPE811 觸屏控制器</li><li>ST 官方提供了驅動程式</li></ul><h3 id="stm32f429i-discovery-ioe"><a href="#stm32f429i-discovery-ioe" class="headerlink" title="stm32f429i_discovery_ioe"></a>stm32f429i_discovery_ioe</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TouchDetected;</span><br><span class="line">  <span class="keyword">uint16_t</span> X;</span><br><span class="line">  <span class="keyword">uint16_t</span> Y;</span><br><span class="line">  <span class="keyword">uint16_t</span> Z;</span><br><span class="line">&#125; TP_STATE;</span><br></pre></td></tr></table></figure><p>在 uGUI 的範例中，使用方法如下：</p><ol><li><p>定義一個結構體：<code>static TP_STATE* TP_State</code>；</p></li><li><p>初始化觸控晶片：<code>IOE_Config()</code>；</p></li><li><p>在 SysTick 的 ISR 程式中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TP_State = IOE_TP_GetState();</span><br><span class="line"><span class="keyword">if</span> (TP_State-&gt;TouchDetected) &#123; </span><br><span class="line">  <span class="keyword">if</span> ((TP_State-&gt;X &gt; <span class="number">0</span>) &amp;&amp; (TP_State-&gt;X &lt; <span class="number">239</span> )) </span><br><span class="line">  &#123;  </span><br><span class="line">     <span class="keyword">if</span> ((TP_State-&gt;Y &gt; <span class="number">0</span>) &amp;&amp; (TP_State-&gt;Y &lt; <span class="number">319</span> )) </span><br><span class="line">     &#123;   </span><br><span class="line">        UG_TouchUpdate(TP_State-&gt;X,TP_State-&gt;Y,TOUCH_STATE_PRESSED);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  UG_TouchUpdate(<span class="number">-1</span>,<span class="number">-1</span>,TOUCH_STATE_RELEASED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="TWIN"><a href="#TWIN" class="headerlink" title="TWIN"></a>TWIN</h3><ul><li><p>在 EVGUI 中去掉了 TWIN 中的 cursor.c 和 file.c 兩個文件，第一個是因爲觸控屏不再需要指標，第二個則是我們需要實作的部分，把 X11 的滑鼠換成觸控屏的輸入</p></li><li><p>TWIN 中事件類型的定義：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> _<span class="title">twin_event_kind</span> &#123;</span></span><br><span class="line">    <span class="comment">/* Mouse */</span></span><br><span class="line">    TwinEventButtonDown= <span class="number">0x0001</span>,</span><br><span class="line">    TwinEventButtonUp= <span class="number">0x0002</span>,</span><br><span class="line">    TwinEventMotion= <span class="number">0x0003</span>,</span><br><span class="line">    TwinEventEnter= <span class="number">0x0004</span>,</span><br><span class="line">    TwinEventLeave= <span class="number">0x0005</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* keyboard */</span></span><br><span class="line">    TwinEventKeyDown= <span class="number">0x0101</span>,</span><br><span class="line">    TwinEventKeyUp= <span class="number">0x0102</span>,</span><br><span class="line">    TwinEventUcs4= <span class="number">0x0103</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Focus */</span></span><br><span class="line">    TwinEventActivate= <span class="number">0x0201</span>,</span><br><span class="line">    TwinEventDeactivate= <span class="number">0x0202</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Joystick */</span></span><br><span class="line">    TwinEventJoyButton= <span class="number">0x0401</span>,</span><br><span class="line">    TwinEventJoyAxis= <span class="number">0x0402</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Widgets */</span></span><br><span class="line">    TwinEventPaint= <span class="number">0x1001</span>,</span><br><span class="line">    TwinEventQueryGeometry= <span class="number">0x1002</span>,</span><br><span class="line">    TwinEventConfigure= <span class="number">0x1003</span>,</span><br><span class="line">    TwinEventDestroy= <span class="number">0x1004</span>,</span><br><span class="line">&#125; <span class="keyword">twin_event_kind_t</span>;</span><br></pre></td></tr></table></figure></li><li><p>TWIN 中事件的定義：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">twin_event</span> &#123;</span></span><br><span class="line">    <span class="keyword">twin_event_kind_t</span>   kind;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">       <span class="keyword">twin_coord_t</span>    x, y;</span><br><span class="line">       <span class="keyword">twin_coord_t</span>    screen_x, screen_y;</span><br><span class="line">       <span class="keyword">twin_count_t</span>    button;</span><br><span class="line">    &#125; pointer;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">       <span class="keyword">twin_keysym_t</span>   key; </span><br><span class="line">    &#125; key; </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">       <span class="keyword">twin_js_number_t</span> control;</span><br><span class="line">       <span class="keyword">twin_js_value_t</span>  value;</span><br><span class="line">    &#125; js;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">       <span class="keyword">twin_ucs4_t</span>     ucs4;</span><br><span class="line">    &#125; ucs4;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">       <span class="keyword">twin_rect_t</span>     extents;</span><br><span class="line">    &#125; configure;</span><br><span class="line">    &#125; u;</span><br><span class="line">&#125; <span class="keyword">twin_event_t</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="添加觸控功能"><a href="#添加觸控功能" class="headerlink" title="添加觸控功能"></a>添加觸控功能</h2><h3 id="開啓事件處理的函式注冊"><a href="#開啓事件處理的函式注冊" class="headerlink" title="開啓事件處理的函式注冊"></a>開啓事件處理的函式注冊</h3><ul><li>要在 fbdev 的 twin_fbdev_create_ext() 加入 handle_events 這個標志（值爲 1）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (handle_events) &#123;</span><br><span class="line">twin_set_file(twin_fbdev_read_events, tf-&gt;vt_fd, TWIN_READ, tf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="實作事件讀取函式"><a href="#實作事件讀取函式" class="headerlink" title="實作事件讀取函式"></a>實作事件讀取函式</h3><ul><li>File: <code>backend/system.c</code></li><li>關於輸入來源：<ul><li>X11 通過 Xlib 的 XNextEvent() 獲取</li><li>Framebuffer 實作了一個 linux_mouse 模塊，讀取 “/dev/input/mice” 的資料</li><li>關於 mice 設備的讀取可以參考<a href="http://stackoverflow.com/questions/11451618/how-do-you-read-the-mouse-button-state-from-dev-input-mice">這裡</a></li></ul></li><li>下一節有說明，我們實作一個單向鏈表作爲輸入</li></ul><h3 id="處理-Raw-Data"><a href="#處理-Raw-Data" class="headerlink" title="處理 Raw Data"></a>處理 Raw Data</h3><ul><li><p>File: <code>backend/system.c</code></p></li><li><p>回顧，在 <code>SysTick_Handler</code> 中：</p><ul><li><code>TP_State = IOE_TP_GetState();</code></li><li><code>TP_State</code> 中有 <code>TouchDetected</code> <code>X</code> <code>Y</code> <code>Z</code> 四個成員</li><li>判斷 <code>TouchDetected</code> 是否爲真且 <code>X</code> <code>Y</code> 在合法範圍內</li></ul></li><li><p>構建 <code>twin_event_t</code> 參照 X11，因爲原生 TWIN 的 framebuffer 模式下 input 本身就有問題，且實作了一個 <code>fb</code> 的事件讀取和一個滑鼠的事件讀取，這兩個放在一起更合理</p></li><li><p>由於存在 <code>screen-&gt;clicklock</code>（在 <code>twin_screen.c</code> 中，會判斷 <code>screen-&gt;clicklock</code> 和 <code>event→kind != TwinEventButtonUp</code> 同時爲真才進行追蹤），暫時先不實作 <code>TwinEventMotion</code> 這個類別</p><ul><li>因爲手指移動時一定是 <code>ButtonDown</code> 的類別也滿足上述判斷式</li><li>這樣可能導致的後果是：採用相對坐標，手指下次從其他地方滑動時，坐標還是之前的位置，出現很大的便宜</li></ul></li><li><p>實作 <code>TwinEventMotion</code> 類別</p><ul><li>設定一個是否按住的標志（初始值爲 1）爲 <code>FirstTouch</code></li><li>每次 <code>TouchDetected</code> 爲真時判斷 <code>FirstTouch</code> 的值<ul><li>若 <code>FirstTouch</code> 爲真則把這次動作的類別記爲 <code>TwinEventMotion</code>，然後再補一個 <code>TwinEventButtonDown</code> 的節點，最後將 <code>FirstTouch</code> 置爲 0</li><li>若 <code>FirstTouch</code> 爲假則只單純添加 <code>TwinEventButtonDown</code> 的節點</li></ul></li><li>若 <code>TouchDetected</code> 爲假時則把 <code>FirstTouch</code> 置爲 1</li></ul></li><li><p>輸入節點爲一個單向鏈表，有兩個 global 節點爲 <code>TP_Head</code> 和 <code>TP_Latest</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">FB_event</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">FBEvent</span> *<span class="title">Next</span>;</span></span><br><span class="line">  <span class="keyword">twin_event_t</span> event;</span><br><span class="line">&#125; FB_event;</span><br></pre></td></tr></table></figure></li></ul><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><ul><li><input checked="" disabled="" type="checkbox"> <del>藍屏 → 無法正常載入圖形</del><ul><li>GDB 調試發現在 SysTick Hadnler 重復呼叫幾次，就直接會跳到通用異常處理的 ISR 裏</li><li>這樣很容易猜測是 SySTick 中斷頻率太高，一次裏面的事情還沒做完，下一次就發生了，所以掛掉</li><li>通過 <code>SysTick_Config()</code> 把中斷頻率由原來的 1000Hz 改爲 100Hz，果然就好了</li></ul></li><li><input checked="" disabled="" type="checkbox"> <del>時鍾不走，觸屏沒反應</del><ul><li><code>timeout_delay()</code> 函式有問題</li></ul></li><li><input disabled="" type="checkbox"> 自己寫一個簡單的時間調度處理</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2020/evgui-design-review/&quot;&gt;硕士论文笔记系列&lt;/a&gt;第四篇，原文写于 2016 年六月。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="vector" scheme="https://blog.joouis.com/tags/vector/"/>
    
    <category term="gui" scheme="https://blog.joouis.com/tags/gui/"/>
    
    <category term="twin" scheme="https://blog.joouis.com/tags/twin/"/>
    
    <category term="window system" scheme="https://blog.joouis.com/tags/window-system/"/>
    
    <category term="svg" scheme="https://blog.joouis.com/tags/svg/"/>
    
    <category term="µGUI" scheme="https://blog.joouis.com/tags/%C2%B5GUI/"/>
    
    <category term="stm32" scheme="https://blog.joouis.com/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>XML Parser for Libsvgtiny</title>
    <link href="https://blog.joouis.com/2020/evgui-xml-parser/"/>
    <id>https://blog.joouis.com/2020/evgui-xml-parser/</id>
    <published>2020-04-08T13:41:00.000Z</published>
    <updated>2020-04-08T13:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2020/evgui-design-review/">硕士论文笔记系列</a>第三篇，原文写于 2016 年五月。</p><a id="more"></a><h2 id="Libxml2"><a href="#Libxml2" class="headerlink" title="Libxml2"></a>Libxml2</h2><h3 id="Libxml2-資料結構"><a href="#Libxml2-資料結構" class="headerlink" title="Libxml2 資料結構"></a>Libxml2 資料結構</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xmlNode:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * A node in an XML tree.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> <span class="title">xmlNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> xmlNode *xmlNodePtr;                                                                                                                      </span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>           *_private;<span class="comment">/* application data */</span></span><br><span class="line">    xmlElementType   type;<span class="comment">/* type number, must be second ! */</span></span><br><span class="line">    <span class="keyword">const</span> xmlChar   *name;      <span class="comment">/* the name of the node, or the entity */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">children</span>;</span>  <span class="comment">/* parent-&gt;childs link */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">last</span>;</span><span class="comment">/* last child link */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">parent</span>;</span><span class="comment">/* child-&gt;parent link */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">next</span>;</span><span class="comment">/* next sibling link  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">prev</span>;</span><span class="comment">/* previous sibling link  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlDoc</span>  *<span class="title">doc</span>;</span><span class="comment">/* the containing document */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* End of common part */</span></span><br><span class="line">    xmlNs           *ns;<span class="comment">/* pointer to the associated namespace */</span></span><br><span class="line">    xmlChar         *content;<span class="comment">/* the content */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlAttr</span> *<span class="title">properties</span>;</span><span class="comment">/* properties list */</span></span><br><span class="line">    xmlNs           *nsDef;<span class="comment">/* namespace definitions on this node */</span></span><br><span class="line">    <span class="keyword">void</span>            *psvi;<span class="comment">/* for type/PSVI informations */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span>   line;<span class="comment">/* line number */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span>   extra;<span class="comment">/* extra data for XPath/XSLT */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xmlDoc:</span></span><br><span class="line"><span class="comment"> *                                                                                                                                                </span></span><br><span class="line"><span class="comment"> * An XML document.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">xmlDoc</span> <span class="title">xmlDoc</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> xmlDoc *xmlDocPtr;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">xmlDoc</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>           *_private;<span class="comment">/* application data */</span></span><br><span class="line">    xmlElementType  type;<span class="comment">/* XML_DOCUMENT_NODE, must be second ! */</span></span><br><span class="line">    <span class="keyword">char</span>           *name;<span class="comment">/* name/filename/URI of the document */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">children</span>;</span><span class="comment">/* the document tree */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">last</span>;</span><span class="comment">/* last child link */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">parent</span>;</span><span class="comment">/* child-&gt;parent link */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">next</span>;</span><span class="comment">/* next sibling link  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span> *<span class="title">prev</span>;</span><span class="comment">/* previous sibling link  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlDoc</span>  *<span class="title">doc</span>;</span><span class="comment">/* autoreference to itself */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* End of common part */</span></span><br><span class="line">    <span class="keyword">int</span> compression;<span class="comment">/* level of zlib compression */</span></span><br><span class="line">    <span class="keyword">int</span> standalone;<span class="comment">/* standalone document (no external refs)</span></span><br><span class="line"><span class="comment">                ¦ 1 if standalone=&quot;yes&quot;</span></span><br><span class="line"><span class="comment">                ¦ 0 if standalone=&quot;no&quot;</span></span><br><span class="line"><span class="comment">                ¦ -1 if there is no XML declaration</span></span><br><span class="line"><span class="comment">                ¦ -2 if there is an XML declaration, but no</span></span><br><span class="line"><span class="comment">                    standalone attribute was specified */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlDtd</span>  *<span class="title">intSubset</span>;</span> <span class="comment">/* the document internal subset */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlDtd</span>  *<span class="title">extSubset</span>;</span> <span class="comment">/* the document external subset */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNs</span>   *<span class="title">oldNs</span>;</span><span class="comment">/* Global namespace, the old way */</span></span><br><span class="line">    <span class="keyword">const</span> xmlChar  *version;<span class="comment">/* the XML version string */</span></span><br><span class="line">    <span class="keyword">const</span> xmlChar  *encoding;<span class="comment">/* external initial encoding, if any */</span></span><br><span class="line">    <span class="keyword">void</span>           *ids;<span class="comment">/* Hash table for ID attributes if any */</span></span><br><span class="line">    <span class="keyword">void</span>           *refs;<span class="comment">/* Hash table for IDREFs attributes if any */</span></span><br><span class="line">    <span class="keyword">const</span> xmlChar  *URL;<span class="comment">/* The URI for that document */</span></span><br><span class="line">    <span class="keyword">int</span>             charset;<span class="comment">/* encoding of the in-memory contentactually an</span></span><br><span class="line"><span class="comment">    ¦ xmlCharEncoding */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlDict</span> *<span class="title">dict</span>;</span><span class="comment">/* dict used to allocate names or NULL */</span></span><br><span class="line">    <span class="keyword">void</span>           *psvi;<span class="comment">/* for type/PSVI informations */</span></span><br><span class="line">    <span class="keyword">int</span>             parseFlags;<span class="comment">/* set of xmlParserOption used to parse the</span></span><br><span class="line"><span class="comment">    ¦ document */</span></span><br><span class="line">    <span class="keyword">int</span>             properties; <span class="comment">/* set of xmlDocProperties for this document set</span></span><br><span class="line"><span class="comment">    ¦ at the end of parsing */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xmlAttribute:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * An Attribute declaration in a DTD.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">xmlAttribute</span> <span class="title">xmlAttribute</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> xmlAttribute *xmlAttributePtr;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">xmlAttribute</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span>*_private;<span class="comment">/* application data */</span></span><br><span class="line">    xmlElementTypetype;<span class="comment">/* XML_ATTRIBUTE_DECL, must be second ! */</span></span><br><span class="line">    <span class="keyword">const</span> xmlChar*name;<span class="comment">/* Attribute name */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span>*<span class="title">children</span>;</span><span class="comment">/* NULL */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span>*<span class="title">last</span>;</span><span class="comment">/* NULL */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlDtd</span>*<span class="title">parent</span>;</span><span class="comment">/* -&gt; DTD */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span>*<span class="title">next</span>;</span><span class="comment">/* next sibling link  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlNode</span>*<span class="title">prev</span>;</span><span class="comment">/* previous sibling link  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlDoc</span>*<span class="title">doc</span>;</span><span class="comment">/* the containing document */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">xmlAttribute</span>*<span class="title">nexth</span>;</span><span class="comment">/* next in hash table */</span></span><br><span class="line">    xmlAttributeTypeatype;<span class="comment">/* The attribute type */</span></span><br><span class="line">    xmlAttributeDefaultdef;<span class="comment">/* the default */</span></span><br><span class="line">    <span class="keyword">const</span> xmlChar*defaultValue;<span class="comment">/* or the default value */</span></span><br><span class="line">    xmlEnumerationPtrtree;<span class="comment">/* or the enumeration tree if any */</span></span><br><span class="line">    <span class="keyword">const</span> xmlChar*prefix;<span class="comment">/* the namespace prefix if any */</span></span><br><span class="line">    <span class="keyword">const</span> xmlChar*elem;<span class="comment">/* Element holding the attribute */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Libxml2-構建-API"><a href="#Libxml2-構建-API" class="headerlink" title="Libxml2 構建 API"></a>Libxml2 構建 API</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_xml_parser *<span class="title">dom_xml_parser_create</span><span class="params">(<span class="keyword">void</span> *dontCare1, <span class="keyword">void</span> *dontCare2, MesgFuncPtr mesgFunc, <span class="keyword">void</span> *dontCare3, dom_document **outDocument)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>呼叫 <code>xmlInitParser()</code> 初始化 parser，然後使用 <code>calloc</code> 定義了 <code>dom_document</code> 和 <code>dom_xml_parser</code> 的指針各一個</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_xml_error <span class="title">dom_xml_parser_parse_chunk</span><span class="params">(dom_xml_parser *parser, <span class="keyword">const</span> <span class="keyword">uint8_t</span> *data, <span class="keyword">size_t</span> len)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>呼叫 <code>xmlReadMemory()</code> 函式解析</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_exception <span class="title">dom_document_get_document_element</span><span class="params">(dom_document *document, dom_element **outNode)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>用來尋找根 <code>&lt;svg&gt;</code> ，實作直接呼叫 <code>xmlDocGetRootElement()</code> 函式得到 <code>document→node</code>，相當於默認是 SVG 檔案</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_exception <span class="title">dom_node_get_node_name</span><span class="params">(dom_node *node, dom_string **outString)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>自幹一個 <code>dom_string_create_interned()</code> 函式<ul><li>如果 <code>svg→node→ns</code> 和 <code>svg→node→ns→prefix</code> 存在，呼叫 <code>asprintf(&amp;qname, &quot;%s:%s&quot;, n-&gt;ns-&gt;prefix, n-&gt;name)</code> 先把字串寫進 <code>qname</code>，然後再通過自幹的函式把 <code>qname</code> 給 <code>outString</code></li><li>若不存在就直接呼叫自幹函式把 <code>svg→node→name</code> 的值給 <code>outString</code></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_exception <span class="title">dom_document_get_element_by_id</span><span class="params">(dom_node *node, dom_string *<span class="built_in">string</span>, dom_element **outNode)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>被 <code>svgtiny_gradient.c</code> 使用。先呼叫 <code>xmlHasProp()</code> 函式檢查 <code>document→node</code> 是否存在 <code>id</code> 這個屬性<ul><li>若 <code>id</code> 屬性存在就再檢查裏面是否存在需要的 ID 字串，就把 <code>gradient</code> 的指標指向這個 document</li><li>內部還實作了一個 <code>getElementById()</code> 函式，供這個 API 調用，也是類似呼叫 <code>xmlHasProp()</code> 和做 <code>strcasecmp()</code></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_exception <span class="title">dom_element_get_attribute</span><span class="params">(dom_node *node, dom_string *<span class="built_in">string</span>, dom_string **outAttribute)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>呼叫 <code>xmlHasProp()</code> 得到指定的屬性，例如讀 <code>svg</code> 的 <code>d</code> 屬性，也就是 path</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_exception <span class="title">dom_element_get_elements_by_tag_name</span><span class="params">(dom_element *element, dom_string *<span class="built_in">string</span>, dom_nodelist **outNodeList)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>被 <code>svgtiny_gradient.c</code> 使用。遍歷 <code>element→node→children</code> 鏈表，只要節點的名字和 tag 名相同，就把其加入 <code>nodeList</code> 裏</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_exception <span class="title">dom_node_get_node_type</span><span class="params">(dom_node *node, dom_node_type *outType)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>需要注意 node type 的種類要滿足</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">dom_xml_error <span class="title">dom_xml_parser_completed</span><span class="params">(dom_xml_parser *parser)</span></span>;</span><br><span class="line"><span class="function">dom_xml_error <span class="title">dom_xml_parser_destroy</span><span class="params">(dom_xml_parser *parser)</span></span>;</span><br><span class="line"><span class="function">dom_exception <span class="title">dom_nodelist_get_length</span><span class="params">(dom_nodelist *nodeList, <span class="keyword">uint32_t</span> *outLen)</span></span>;</span><br><span class="line"><span class="function">dom_exception <span class="title">dom_nodelist_item</span><span class="params">(dom_nodelist *nodeList, <span class="keyword">uint32_t</span> index, dom_node **outItemp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dom_node_unref</span><span class="params">(dom_node *node)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dom_nodelist_unref</span><span class="params">(dom_nodelist *nodeList)</span></span>;</span><br><span class="line"><span class="function">dom_exception <span class="title">dom_node_get_first_child</span><span class="params">(dom_element *element, dom_element **outChild)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dom_string_caseless_isequal</span><span class="params">(dom_string *a, dom_string *b)</span></span>;</span><br><span class="line"><span class="function">dom_exception <span class="title">dom_node_get_next_sibling</span><span class="params">(dom_element *element, dom_element **outChild)</span></span>;</span><br><span class="line"><span class="function">dom_exception <span class="title">dom_text_get_whole_text</span><span class="params">(dom_element *element, dom_string **outString)</span></span>;</span><br><span class="line"><span class="function">lwc_error <span class="title">lwc_intern_string</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *data, <span class="keyword">size_t</span> len, lwc_string **outString)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dom_string_caseless_lwc_isequal</span><span class="params">(dom_string *str, lwc_string *lwcString)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lwc_string_unref</span><span class="params">(lwc_string *lwcString)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">dom_string_byte_length</span><span class="params">(dom_string *str)</span></span>;                        </span><br><span class="line"><span class="function">dom_exception <span class="title">dom_string_create_interned</span><span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> *data, <span class="keyword">size_t</span> len, dom_string **outString)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">dom_string_data</span><span class="params">(dom_string *str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dom_string_isequal</span><span class="params">(dom_string *a, dom_string *b)</span></span>;                    </span><br><span class="line"><span class="function">dom_string *<span class="title">dom_string_ref</span><span class="params">(dom_string *str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dom_string_unref</span><span class="params">(dom_string *str)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>實作簡單或未實作</li></ul><h2 id="DOM-Parser-Choices"><a href="#DOM-Parser-Choices" class="headerlink" title="DOM Parser Choices"></a>DOM Parser Choices</h2><h3 id="YXML"><a href="#YXML" class="headerlink" title="YXML"></a><a href="https://dev.yorhel.nl/yxml"><del>YXML</del></a></h3><ul><li>No<ul><li>提供的接口函式太少</li><li>使用 stack 替代 malloc</li></ul></li></ul><h3 id="EZXML"><a href="#EZXML" class="headerlink" title="EZXML"></a><a href="https://github.com/lxfontes/ezxml">EZXML</a></h3><ul><li><p>Try it!</p><ul><li>資料結構比較合理，包含基本常用之 node</li><li>提供的 API 還算全面</li></ul></li><li><p>成功解析 SVG 檔</p><ul><li>使用 <code>strcasecmp</code> 修復 <code>attr</code> 的大小寫問題，例如 “viewbox” “viewBox”</li><li>node 的 <code>type</code> 類型未初始化，除一開始 parse 到的 node 是 <code>DOM</code> 類型外，其餘 node 一律初始化爲 <code>ELEMENT</code> 類型</li></ul><p><img src="https://imxnua.bn.files.1drv.com/y4m5h5KUDF0dRdvanpRTVra33nMf4Em5Xoqp-Od2XAJf_Y1bfhjfk5fBTfvRmuwFV8HiOsOp1n56uO0M7CHF95oNeufgMXENidlY53MU07_P80y_AQoFKt9VDbkI0BQ5_qNXgKC_EEyaUS1Om-lJYcFQOqD4uaWhL7xLAwIhFrh64U4DagVVIGf2h2ch2-X1GeDSBdhom9tc55DfdQAmfu0BQ?width=1908&height=851&cropmode=none"></p></li><li><p>使用 libxml2 (左) 和 ezxml (右) 的對比圖</p><p><img src="https://imxmua.bn.files.1drv.com/y4mx07uU18KkjdrT7Jrj1n7ELBos6O3OXrCY9HVNAVsOcAV8Z3ktgJ10Tg8OWRnVCSYbrL0YdaagSJj3dxjqsywhHXWHMyL7WpOKrrVghcs9sbT5xZ2M8RRUyE72XgI8WEbrWL5Q3YIC2jwZ2nkeyTYptf8hvbrhddMX-xxk9tNuKCWZj3n1Pr8P-kzIai-OvhopWtFvf1MNxL6U3Ky4hyVYw?width=1218&height=395&cropmode=none"></p><p><img src="https://h8xeua.bn.files.1drv.com/y4mJAnzz49UoAqt6HmjwgZwToqgRWMq-SMfHrRAHntaDCzgOEXIIA2jtCCS2FQ-pGE87DSd_QmlTD_MCKzvbtUNaRo2nQpYwN-v0XqXYhVvpmdjieDqs0at6ily3G8Ek7w0YQwOmiBOM-h2AL-Hc0uEG8TTnHqahl_iUg1_bNkJ3KpqxqdA-5JfAugj1BAT0I_t2fi4v7YfnwECfQNU3c6bTQ?width=481&height=275&cropmode=none"></p><p><img src="https://imxlua.bn.files.1drv.com/y4mDgFPvwwkVHE0SAGKfrU19u2brtadsA-Pzv5RoDBKvPGTVhG4cJ-1UyaDreqwblKvb35S6F9BhhLOt_m_cSBNi7qBlI6zUwVWCjEWiwAroDwrvYb5ii3y8XGOFLsdbBuGw8BbsOlIlBNjoI0HRQoX8gP_3UxugygYstN6Sy4bLIG2yDX5QBIaKN4OU1s0f3oFqKLFxTwnA5Rdsl5_-ouHTA?width=750&height=552&cropmode=none"></p><p><img src="https://imxjua.bn.files.1drv.com/y4mH5176y3Kq-urCbkYRSQq3PZikoF3P6JO_zDKgCYudlBppGJgtzJMeP9-x1kQ1UP2Hmt16YSrJMPVYu2rKFgOjTxkqdVO29IZmNq3V6220rI1NFkvBX7oYAFKHtDj7OaQHrlNoMM7CujzRYpOUIMrTxPxpT4v5e1LoKTw6X5hSCMFoHPUj9MSNnaKksUqupUQxHl5gF8Z8Lzqba2o-qtqPw?width=1921&height=1038&cropmode=none"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2020/evgui-design-review/&quot;&gt;硕士论文笔记系列&lt;/a&gt;第三篇，原文写于 2016 年五月。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="vector" scheme="https://blog.joouis.com/tags/vector/"/>
    
    <category term="gui" scheme="https://blog.joouis.com/tags/gui/"/>
    
    <category term="twin" scheme="https://blog.joouis.com/tags/twin/"/>
    
    <category term="window system" scheme="https://blog.joouis.com/tags/window-system/"/>
    
    <category term="svg" scheme="https://blog.joouis.com/tags/svg/"/>
    
    <category term="svg tiny" scheme="https://blog.joouis.com/tags/svg-tiny/"/>
    
    <category term="libsvgtiny" scheme="https://blog.joouis.com/tags/libsvgtiny/"/>
    
    <category term="cairo" scheme="https://blog.joouis.com/tags/cairo/"/>
    
    <category term="xml" scheme="https://blog.joouis.com/tags/xml/"/>
    
    <category term="parser" scheme="https://blog.joouis.com/tags/parser/"/>
    
    <category term="libxml2" scheme="https://blog.joouis.com/tags/libxml2/"/>
    
    <category term="dom" scheme="https://blog.joouis.com/tags/dom/"/>
    
    <category term="ezxml" scheme="https://blog.joouis.com/tags/ezxml/"/>
    
  </entry>
  
  <entry>
    <title>SVG Tiny 与 Libsvgtiny</title>
    <link href="https://blog.joouis.com/2020/evgui-svgtiny/"/>
    <id>https://blog.joouis.com/2020/evgui-svgtiny/</id>
    <published>2020-04-04T14:51:16.000Z</published>
    <updated>2020-04-05T16:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2020/evgui-design-review/">硕士论文笔记系列</a>第二篇，原文写于 2016 年五月。</p><a id="more"></a><h2 id="SVG-Tiny-1-2-Spec"><a href="#SVG-Tiny-1-2-Spec" class="headerlink" title="SVG Tiny 1.2 Spec"></a>SVG Tiny 1.2 Spec</h2><ul><li>The SVG Working Group <strong>does not</strong> provide a normative DTD for SVG Tiny 1.2 but instead provides a normative <strong>RelaxNG</strong> schema.</li><li>How to reference this specification:<br>When referencing this specification as a whole or when referencing a chapter or major section, use the undated URI, <a href="http://www.w3.org/TR/SVGTiny12/">http://www.w3.org/TR/SVGTiny12/</a> , where possible. This allows the reference to always refer to the latest version of this specification.</li></ul><h3 id="Scriptable"><a href="#Scriptable" class="headerlink" title="Scriptable"></a>Scriptable</h3><p>The combination of scripting and the HTML DOM is often termed “Dynamic HTML” and is widely used for animation, interactivity and presentational effects. Similarly SVG allows the script-based manipulation of the document tree us-ing a subset of the XML DOM and the SVG uDOM.</p><h3 id="Rendering-Model"><a href="#Rendering-Model" class="headerlink" title="Rendering Model"></a>Rendering Model</h3><ul><li>The painters model</li><li>Types of graphics elements<ul><li>Shapes: lines, curves</li><li>Text</li><li>Repalced content<ul><li>Raster images</li><li>Video</li><li>Animation</li><li>Foreign Objects</li></ul></li></ul></li><li>Rendering shapes and text<ul><li>fill, stroke: independent, has opacity</li><li>paint:<ul><li>Solid color</li><li>Gradients (linear, radial)</li></ul></li></ul></li></ul><h3 id="Document-Structure"><a href="#Document-Structure" class="headerlink" title="Document Structure"></a>Document Structure</h3><ul><li><code>svg</code> element: <ul><li>version, baseProfile, width, height, viewBox, …</li><li>This specification corresponds to <strong>baseProfile=”tiny”</strong> and <strong>version=”1.2”</strong> .</li></ul></li><li><code>g</code> element:<ul><li><code>id</code>, <code>xml: id</code></li><li>在 group 中的元素擁有 group 的屬性</li></ul></li><li><code>defs</code> element</li><li><code>discard</code> element</li><li><code>title</code> and <code>desc</code> element</li><li><code>use</code> element</li><li><code>image</code> element: must reference content that is a raster image format</li><li><code>switch</code> element: five conditional processing attributes<ul><li>requiredExtensions</li><li>requiredFeatures</li><li>requiredFonts</li><li>requiredFormats</li><li>systemLanguage</li></ul></li><li><code>prefetch</code> element</li><li>Attributes common to all elements: id, class, role, …</li></ul><h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><ul><li>mpath</li></ul><h2 id="Libsvgtiny"><a href="#Libsvgtiny" class="headerlink" title="Libsvgtiny"></a>Libsvgtiny</h2><h3 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h3><ul><li>Libsvgtiny is an implementation of <a href="http://www.w3.org/TR/SVGMobile/">SVG Tiny</a>, written in C. It is currently in development for use with <a href="http://www.netsurf-browser.org/">NetSurf</a> and is intended to be suitable for use in other projects too.</li><li>The overall idea of the library is to take some SVG as input, and return a list of paths and texts which can be rendered easily. The library does not do the actual rendering. For further details, see the <a href="http://source.netsurf-browser.org/libsvgtiny.git/plain/README">readme</a>.</li></ul><h3 id="支援情況"><a href="#支援情況" class="headerlink" title="支援情況"></a>支援情況</h3><ul><li>SVG Tiny elements <strong>supported</strong>: defs, g, svg, circle, line, path, polygon, polyline, rect, text</li><li>SVG Tiny elements <strong>not yet supported</strong>: desc, metadata, title, use, a, switch, ellipse, image, font, font-face, font-face-name, font-face-src, glyph, hkern, missing-glyph, animate, animateColor, animateMotion, animateTransform, mpath, set, foreignObject</li><li>Additional elements <strong>supported</strong>: linearGradient, stop</li><li>Text support is <strong>incomplete.</strong></li><li>The style attribute is <strong>supported</strong>.</li></ul><h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://git.netsurf-browser.org/libsvgtiny.git</span><br></pre></td></tr></table></figure><ul><li>參考 <a href="https://listmaster.pepperfish.net/pipermail/netsurf-dev-netsurf-browser.org/2013-November/003228.html">疑問通訊</a></li><li>直接編譯 Netsurf 更快，參考 <a href="http://source.netsurf-browser.org/netsurf.git/plain/Docs/QUICK-START">building instruction</a></li></ul><h3 id="資料結構"><a href="#資料結構" class="headerlink" title="資料結構"></a>資料結構</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">svgtiny_shape</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> *path;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> path_length;                                                                                                                     </span><br><span class="line">    <span class="keyword">char</span> *text;</span><br><span class="line">    <span class="keyword">float</span> text_x, text_y;</span><br><span class="line">    svgtiny_colour fill;</span><br><span class="line">    svgtiny_colour stroke;</span><br><span class="line">    <span class="keyword">float</span> stroke_width;</span><br><span class="line">    <span class="keyword">void</span> *_internal_extensions;  <span class="comment">// <span class="doctag">TODO:</span> if non-NULL, points to an allocated on the heap extension block. (gradients, fonts)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">svgtiny_diagram</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> width, height;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">svgtiny_shape</span> *<span class="title">shape</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> shape_count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> error_line;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *error_message;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用-Cairo"><a href="#使用-Cairo" class="headerlink" title="使用 Cairo"></a>使用 Cairo</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handle an X11 Expose event of the diagram window.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">event_diagram_expose</span><span class="params">(<span class="keyword">const</span> XExposeEvent *expose_event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">cairo_surface_t</span> *surface;</span><br><span class="line">    <span class="keyword">cairo_t</span> *cr;</span><br><span class="line">    <span class="keyword">cairo_status_t</span> status;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (expose_event-&gt;count != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    surface = cairo_xlib_surface_create(display, diagram_window,</span><br><span class="line">            DefaultVisual(display, DefaultScreen(display)),</span><br><span class="line">            diagram-&gt;width * scale, diagram-&gt;height * scale);</span><br><span class="line">    <span class="keyword">if</span> (!surface) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;cairo_xlib_surface_create failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cr = cairo_create(surface);</span><br><span class="line">    status = cairo_status(cr);</span><br><span class="line">    <span class="keyword">if</span> (status != CAIRO_STATUS_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;cairo_create failed: %s\n&quot;</span>,</span><br><span class="line">                cairo_status_to_string(status));</span><br><span class="line">        cairo_destroy(cr);</span><br><span class="line">        cairo_surface_destroy(surface);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cairo_set_source_rgb(cr, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    cairo_paint(cr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i != diagram-&gt;shape_count; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (diagram-&gt;shape[i].path) &#123;</span><br><span class="line">            render_path(cr, scale, &amp;diagram-&gt;shape[i]);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (diagram-&gt;shape[i].text) &#123;</span><br><span class="line">            cairo_set_source_rgb(cr,</span><br><span class="line">                svgtiny_RED(diagram-&gt;shape[i].stroke) / <span class="number">255.0</span>,</span><br><span class="line">                svgtiny_GREEN(diagram-&gt;shape[i].stroke) / <span class="number">255.0</span>,</span><br><span class="line">                svgtiny_BLUE(diagram-&gt;shape[i].stroke) / <span class="number">255.0</span>);</span><br><span class="line">            cairo_move_to(cr,                                                                                                                     </span><br><span class="line">                    scale * diagram-&gt;shape[i].text_x,</span><br><span class="line">                    scale * diagram-&gt;shape[i].text_y);</span><br><span class="line">            cairo_show_text(cr, diagram-&gt;shape[i].text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    status = cairo_status(cr);</span><br><span class="line">    <span class="keyword">if</span> (status != CAIRO_STATUS_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;cairo error: %s\n&quot;</span>,</span><br><span class="line">                cairo_status_to_string(status));</span><br><span class="line">        cairo_destroy(cr);</span><br><span class="line">        cairo_surface_destroy(surface);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cairo_destroy(cr);</span><br><span class="line">    cairo_surface_destroy(surface);source</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Render an svgtiny path using cairo.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">render_path</span><span class="params">(<span class="keyword">cairo_t</span> *cr, <span class="keyword">float</span> scale, struct svgtiny_shape *path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">    cairo_new_path(cr);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j != path-&gt;path_length; ) &#123; </span><br><span class="line">        <span class="keyword">switch</span> ((<span class="keyword">int</span>) path-&gt;path[j]) &#123;</span><br><span class="line">        <span class="keyword">case</span> svgtiny_PATH_MOVE:</span><br><span class="line">            cairo_move_to(cr,</span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">1</span>], </span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">2</span>]);</span><br><span class="line">            j += <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> svgtiny_PATH_CLOSE:</span><br><span class="line">            cairo_close_path(cr);</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> svgtiny_PATH_LINE:</span><br><span class="line">            cairo_line_to(cr,</span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">1</span>], </span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">2</span>]);</span><br><span class="line">            j += <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> svgtiny_PATH_BEZIER:</span><br><span class="line">            cairo_curve_to(cr,</span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">1</span>],</span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">2</span>],</span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">3</span>],</span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">4</span>],</span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">5</span>],</span><br><span class="line">                    scale * path-&gt;path[j + <span class="number">6</span>]);</span><br><span class="line">            j += <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;error &quot;</span>);</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path-&gt;fill != svgtiny_TRANSPARENT) &#123;</span><br><span class="line">        cairo_set_source_rgb(cr,</span><br><span class="line">                svgtiny_RED(path-&gt;fill) / <span class="number">255.0</span>,</span><br><span class="line">                svgtiny_GREEN(path-&gt;fill) / <span class="number">255.0</span>,</span><br><span class="line">                svgtiny_BLUE(path-&gt;fill) / <span class="number">255.0</span>);</span><br><span class="line">        cairo_fill_preserve(cr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path-&gt;stroke != svgtiny_TRANSPARENT) &#123;</span><br><span class="line">        cairo_set_source_rgb(cr,</span><br><span class="line">                svgtiny_RED(path-&gt;stroke) / <span class="number">255.0</span>,</span><br><span class="line">                svgtiny_GREEN(path-&gt;stroke) / <span class="number">255.0</span>,</span><br><span class="line">                svgtiny_BLUE(path-&gt;stroke) / <span class="number">255.0</span>);</span><br><span class="line">        cairo_set_line_width(cr, scale * path-&gt;stroke_width);</span><br><span class="line">        cairo_stroke_preserve(cr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="討論"><a href="#討論" class="headerlink" title="討論"></a>討論</h2><h3 id="Libsvgtiny-無法編譯，無論是-official-還是-github-版本"><a href="#Libsvgtiny-無法編譯，無論是-official-還是-github-版本" class="headerlink" title="Libsvgtiny 無法編譯，無論是 official 還是 github 版本"></a>Libsvgtiny 無法編譯，無論是 official 還是 github 版本</h3><ul><li>改用 <a href="https://github.com/DavidPhillipOster/libsvgtiny">https://github.com/DavidPhillipOster/libsvgtiny</a></li><li><code>sed -i &#39;s/-lxml2/-lxml2 -lm/g&#39; Makefile &amp;&amp; make</code></li></ul><h3 id="Libsvgtiny-有的可以成功顯示，有的部分顯示，有的則顯示失敗"><a href="#Libsvgtiny-有的可以成功顯示，有的部分顯示，有的則顯示失敗" class="headerlink" title="Libsvgtiny 有的可以成功顯示，有的部分顯示，有的則顯示失敗"></a>Libsvgtiny 有的可以成功顯示，有的部分顯示，有的則顯示失敗</h3><p>（左、中、右圖分別對應 Image Viewer、Libsvgtiny with Cairo、Libsvgtiny with TWIN）</p><h4 id="成功顯示"><a href="#成功顯示" class="headerlink" title="成功顯示"></a>成功顯示</h4><p>注意最右邊的圖顯示是正確的，因爲圓形和矩形沒有例如 <code>fill: #000000</code> 這樣的屬性，至於左邊兩個爲什麼會自動填黑很有趣。</p><p><img src="https://hsxmua.bn.files.1drv.com/y4mVRHjbTq_FPN7KNhj_jr2kI0RAnFIITSM-Vej1v_8G7k-UM9X2lplZzlzjzQNZhkDvYFvwU_AVbsyaXs9CHOt8bppajump_Kx-0kN09oDRfxIYFqysnIGHYlxwQEswug05hUwk4gBh7zRvcyRaWJR042NWlwLAWsEAmfYORmM3As5J5yjaJFh79LzhYMJDxNvvfaOgp3CjAgIN__H-fwmog?width=1912&height=451&cropmode=none"></p><h4 id="部分成功顯示"><a href="#部分成功顯示" class="headerlink" title="部分成功顯示"></a>部分成功顯示</h4><ul><li>都可顯示，但由於 Libsvgtiny 和 TWIN 的限制致使顯示有缺陷。中間的圖基本和原圖一樣，不過有條不明顯的黑線，可以修改 <code>libsvgtiny.c</code> 或刪除這條 path 多餘的 <code>stroke-width</code> 屬性即可修正。最右除了 Libsvgtiny 自身的問題外，和 TWIN 也有關聯。</li></ul><p><img src="https://hcxeua.bn.files.1drv.com/y4ml_N8t3aeOuTjDC1r8xBq_ywDJORW3FQy3j_6sqxWW-SvMfaZ589WXZsvsIxQbv7cxclTzqnNqGI9t3cY3Yu8bRBwjtGzKCrPV2VZQd1nuiNR7mPvsR9kFz0hhXKbg9Dj_gSb7oBAvenPAggRJqanawaZqXU3H0P_9r2S1Y0tV8asD_XAx4DrAegGEF8083p72hGWs6sEaMifn0j9Yywbcg?width=854&height=284&cropmode=none"></p><ul><li>Cairo 可成功顯示但 TWIN 不行（後已修復）</li></ul><p><img src="https://hsxnua.bn.files.1drv.com/y4m_nOg9IadeovxjnjzDnUwsFGL8LSZLWQa2tG_yg26a2nkyQrGeZN2y2e83EElONJsrvFWQQGg0B5xydmEfMSG15cT149yu44wxsNp8XF-1Z9zFPWsGKolLv4CBHKNAdCtUZA69A1n3VsG47VTY5PxUGP9jeBALlY1CjvyEDRKjc5hcH846g-3KNjIdIDylnP5DAT8ZEj_QLTyhgZcLRfDUg?width=1199&height=547&cropmode=none"></p><h4 id="顯示失敗"><a href="#顯示失敗" class="headerlink" title="顯示失敗"></a>顯示失敗</h4><p><img src="https://hcxiua.bn.files.1drv.com/y4mqJEAnS1bmpULVGsbJ6y2R-Pnia66bHGIlev0EF3WWVxVeoBTEgjV_G7x5jZ-nl6y9uH7DVHZ5MPBu4txZNw3hUfgVbLq8uh91DVhE8Cd_RNEm7nNu3k4a_0us0dvqp9m98PImTMf84FMkmBbvsQElXA1f8JGvpmo1o1JmrvCkM1Pn-BhfNf4WbkXO-8sxmCkwQSTr7cqpqroxSy8UqZ3_Q?width=1890&height=1028&cropmode=none"></p><ul><li>其實修改 Libsvgtiny 後使用 Cairo 是可以大致顯示的，簡單說就是 Libsvgtiny 的 fill 邏輯出了問題，要麼都塗黑了如上圖所示，要麼如下圖沒把該塗黑的地方塗黑ORZ</li></ul><p><img src="https://hcxhua.bn.files.1drv.com/y4mMu0upkRKHdD4MJrHjGzXaScyp2AmKT1HDz_gME-UggXO2r2J9mzrTGEQYHr9E4fpy-OcFdE0PNzq0i1bYYDH-QlYP5EF9nu_U8e5LUErWspvAp-tfTVh9gFPhL1Hyi7M7jHUQ15WklJ2Cjbou2k5P2fPpIsbaowHPOHc4vh7toBvWVY85ZQ-wMo8ltWzW3eJTNfATEAU_ikt0Itoshwo3w?width=1637&height=1024&cropmode=none"></p><p><img src="https://hcxfua.bn.files.1drv.com/y4mC2VoVCOon8Qu4X4YWVASaNWVdhm60A_IOSHMhPnp4xyybH6qgM6l-CmsyPpV6UOsiaCpzv3S8MKJIXL4HtkL0zK5E7yZAiBpQeUFbZpB3PSd7Hr6D1BCO2z4ZlZNYXTqXDfu8cgCJiRlAHqLJkJ2UXbMDk-kSe0gWAdF3NgWXGPgk-MvHNPeIsRWatLJxmDYxa6_vb0FJyIDta-16RWFUQ?width=1641&height=1031&cropmode=none"></p><ul><li>使用 Netsurf 開啓老虎圖，直接笑出來了…</li></ul><p><img src="https://hcxgua.bn.files.1drv.com/y4mDaXibkKkZ2DLw13I-H9R_eFWZvjP5M9Wy9jShTnZTLLC1u2TYdXXg_tydEf9dGEhqdmln1m09ye6YlSLJXk-7vWw03JjvBtSHx2RQfwSA6BEIozngeq3myirgFaEdWP6kbF-lfgF-SfUo1BJXK8jo4x0JID6PhT8nx2aoTztA-vrdUBN3u2bH48H1_RZ02BvBR9WmxYXoqnmo7VV0_zUNQ?width=1272&height=1080&cropmode=none"></p><h3 id="移植到-STM32F429-上的過程中，編譯鏈接又出問題了"><a href="#移植到-STM32F429-上的過程中，編譯鏈接又出問題了" class="headerlink" title="移植到 STM32F429 上的過程中，編譯鏈接又出問題了"></a>移植到 STM32F429 上的過程中，編譯鏈接又出問題了</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In file included from /usr/include/libxml2/libxml/parser.h:810:0,</span><br><span class="line">                 from /usr/include/libxml2/libxml/globals.h:18,</span><br><span class="line">                 from /usr/include/libxml2/libxml/threads.h:35,</span><br><span class="line">                 from /usr/include/libxml2/libxml/xmlmemory.h:218,</span><br><span class="line">                 from /usr/include/libxml2/libxml/tree.h:1307,</span><br><span class="line">                 from libsvgtiny/src/xml2dom.c:14:</span><br><span class="line">/usr/include/libxml2/libxml/encoding.h:31:26: fatal error: unicode/ucnv.h: No such file or directory</span><br><span class="line"><span class="meta"> #</span><span class="bash">include &lt;unicode/ucnv.h&gt;</span></span><br><span class="line">                          ^</span><br><span class="line">compilation terminated.</span><br><span class="line">Makefile:85: recipe for target &#x27;libsvgtiny/src/xml2dom.o&#x27; failed</span><br><span class="line">make: *** [libsvgtiny/src/xml2dom.o] Error 1</span><br></pre></td></tr></table></figure><p>Jserv replied:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://git.gnome.org/libxml2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> libxml2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./autogen.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh configure \</span></span><br><span class="line"><span class="bash">  --prefix=/tmp \</span></span><br><span class="line"><span class="bash">  --enable-static \</span></span><br><span class="line"><span class="bash">  --disable-shared \</span></span><br><span class="line"><span class="bash">  --enable-ipv6=no \</span></span><br><span class="line"><span class="bash">  --without-c14n \</span></span><br><span class="line"><span class="bash">  --without-catalog \</span></span><br><span class="line"><span class="bash">  --without-debug \</span></span><br><span class="line"><span class="bash">  --without-docbook \</span></span><br><span class="line"><span class="bash">  --without-fexceptions \</span></span><br><span class="line"><span class="bash">  --without-ftp \</span></span><br><span class="line"><span class="bash">  --without-history \</span></span><br><span class="line"><span class="bash">  --without-html \</span></span><br><span class="line"><span class="bash">  --without-http \</span></span><br><span class="line"><span class="bash">  --without-iconv \</span></span><br><span class="line"><span class="bash">  --without-icu \</span></span><br><span class="line"><span class="bash">  --with-iso8859x \</span></span><br><span class="line"><span class="bash">  --without-legacy \</span></span><br><span class="line"><span class="bash">  --with-minimum \</span></span><br><span class="line"><span class="bash">  --without-output \</span></span><br><span class="line"><span class="bash">  --without-pattern \</span></span><br><span class="line"><span class="bash">  --without-push \</span></span><br><span class="line"><span class="bash">  --without-python \</span></span><br><span class="line"><span class="bash">  --without-reader \</span></span><br><span class="line"><span class="bash">  --without-regexps \</span></span><br><span class="line"><span class="bash">  --without-sax1 \</span></span><br><span class="line"><span class="bash">  --with-schemas \</span></span><br><span class="line"><span class="bash">  --with-schematron \</span></span><br><span class="line"><span class="bash">  --without-threads \</span></span><br><span class="line"><span class="bash">  --with-tree \</span></span><br><span class="line"><span class="bash">  --with-valid  \</span></span><br><span class="line"><span class="bash">  --with-writer \</span></span><br><span class="line"><span class="bash">  --with-xinclude \</span></span><br><span class="line"><span class="bash">  --with-xpath \</span></span><br><span class="line"><span class="bash">  --with-xptr \</span></span><br><span class="line"><span class="bash">  --without-modules \</span></span><br><span class="line"><span class="bash">  --without-zlib</span></span><br></pre></td></tr></table></figure><h3 id="libxml2-太龐大，無法放入-ARM-環境"><a href="#libxml2-太龐大，無法放入-ARM-環境" class="headerlink" title="libxml2 太龐大，無法放入 ARM 環境"></a>libxml2 太龐大，無法放入 ARM 環境</h3><ul><li>替代品<ul><li><a href="https://dev.yorhel.nl/yxml">YXML</a></li><li><a href="https://github.com/lxfontes/ezxml">EZXML</a></li></ul></li></ul><h3 id="Updates"><a href="#Updates" class="headerlink" title="Updates"></a>Updates</h3><h4 id="2016-06-08"><a href="#2016-06-08" class="headerlink" title="2016/06/08"></a>2016/06/08</h4><ul><li>修復 Libsvgtiny 問題，顯示 tiger 黑圖（修改 Libsvgtiny 的 fill、stroke 可顯示不完全正確的 tiger 圖）</li></ul><p><img src="https://hcxmua.bn.files.1drv.com/y4mhLEBOyK8sGD0_VrOOuxH6fEX9gqHmvH4IimCPlaMICaYNvEXcuu-fJ_FEsFS1o9F6wTo4AGgt9eY1Yxiyrdfr87NDvMgYhXV-Ji63oR0CJPuIQwenFqmz9fyZupLOOJUR58_t-TL_Ce9DoJUQUMSmul5kdzUYfgVqHJEoUHg4iFsTY4x-DfRnBJXjfN7G3JLcvpu2Ii7APNssspgUn-oKw?width=1917&height=1080&cropmode=none"></p><h4 id="2016-06-11"><a href="#2016-06-11" class="headerlink" title="2016/06/11"></a>2016/06/11</h4><ul><li>twin 接口問題，顯示 sonic 黑圖（使用 cairo 可正常顯示）</li></ul><p><img src="https://hcxjua.bn.files.1drv.com/y4m-0PTeYG_SCSKGrAJ_UX_W9gvAcMhyGnbX6_tfB-qxeecqbcwS1K_tgrCstPor3U_KHdKuvpa2sNLTcOko5PSEdpGeccRThEk3Wi5XZdmhx1EA_AdBuUQwJ2h7neioFCYsbbYe8FgLWe_NbXWfWgN-f-PsXbdltn8By-_T-Row0TACiVCBzCT-DoaXKanCRUGvaGUhd_A0Oou7CZcB4GIBg?width=1000&height=1037&cropmode=none"></p><h4 id="2016-06-12"><a href="#2016-06-12" class="headerlink" title="2016/06/12"></a>2016/06/12</h4><ul><li>修復 Libsvgtiny 縮放問題，在 STM32F429Discovery 上顯示成功</li></ul><p><img src="https://hsxlua.bn.files.1drv.com/y4mBIRRiVRqn_SnqOF1CRSGbMzSD_fppWopMwsrAafydPutl2ZOLjFRfmDvURmHjMj02i5u8sIL9lWJiM3yviTrC1JQe8pfKyPnGx-Oh2__re_0FIozZn4Lxq8gmtkmHDa2EhvgBmjgfTOLwu9_-7a0UqRY7hrKmuz4OcmXT0jH0WM4wDuOyOeYT8nYAHBHo8GR60toXQ2XCFOoATxHW7W3iA?width=14440&height=1920&cropmode=none"></p><p><img src="https://hcxlua.bn.files.1drv.com/y4mxzBp__N-J4lAX9LtXPkZXqkZC4qKoLvBLoFebz8ipnVAFwkIZhHbLFx5xkh5BUimnO3y6jp6uZKv7S5EwS7PN6K3QZyIO88CLoo2UKhIZstZ97IA-nFQeZ8oBk2umKL7_6XDIlpH2nRGTRR-ZlQtfWhqq9qvCjZexTFsWK1bRrZm6xMrKVxPqCLnQlilFZ6UFe3p0B8ho7Lis_v-mDQcmw?width=1440&height=1920&cropmode=none"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2020/evgui-design-review/&quot;&gt;硕士论文笔记系列&lt;/a&gt;第二篇，原文写于 2016 年五月。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="vector" scheme="https://blog.joouis.com/tags/vector/"/>
    
    <category term="gui" scheme="https://blog.joouis.com/tags/gui/"/>
    
    <category term="twin" scheme="https://blog.joouis.com/tags/twin/"/>
    
    <category term="window system" scheme="https://blog.joouis.com/tags/window-system/"/>
    
    <category term="svg" scheme="https://blog.joouis.com/tags/svg/"/>
    
    <category term="svg tiny" scheme="https://blog.joouis.com/tags/svg-tiny/"/>
    
    <category term="libsvgtiny" scheme="https://blog.joouis.com/tags/libsvgtiny/"/>
    
    <category term="cairo" scheme="https://blog.joouis.com/tags/cairo/"/>
    
  </entry>
  
  <entry>
    <title>五分钟回顾我的硕士论文：嵌入式向量图形系统设计</title>
    <link href="https://blog.joouis.com/2020/evgui-design-review/"/>
    <id>https://blog.joouis.com/2020/evgui-design-review/</id>
    <published>2020-04-01T15:13:31.000Z</published>
    <updated>2020-04-02T13:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>研究生时期的嵌入式课程笔记整理告一段落，还剩一点硕士论文相关的笔记有待整理。这几篇笔记记录了论文以外的东西，主要是实验过程中的部分源码分析与问题思考，还能保留至今已是幸事（如前文所叙，同样有不少笔记、文章随着 Dropbox 的自动迁移丢失了😭）！</p><p>在开始分享笔记之前，先借本文简单介绍一下鄙人的硕士论文，为后续的笔记做个铺垫。</p><p>论文主题非常工程化，不过一点一滴都是自己从头搭建起来的，同时完全拥抱开源，甚至像开发环境也是在 Linux 上写 MAKEFILE、LD Script 等去实现过去 Keil IDE 已经帮开发者做好的事情。因此回顾这个项目时，点滴细节不断在脑海里涌现，品味之下令我获得极大的满足感。</p><p>希望也能与你分享这份因技术而生的快乐！</p><a id="more"></a><br /><p>我的论文旨在为低端嵌入式设备设计一个高性能的向量图形系统，名为 EVGUI（Embedded Vector GUI），其最大价值或者说主要应用场景是在 IoT 设备的产品原型阶段帮助研发团队进行概念验证（Proof of Concept, POC），和工业领域的快速成型（Rapid prototyping）是类似的概念。下面我会用通俗易懂的话来解释这个图形库（希望）解决了什么问题。</p><p>在嵌入式电子产品的 GUI 开发流程中，通常设计师先基于产品显示设备的尺寸设计 GUI 界面，接着由嵌入式工程师对照设计稿将一个个像素点码出来，然后大家再评估、修正。由于使用底层语言开发的效率不高（相比客户端 APP、网页应用），因此在项目前期如 POC 阶段怎么提升研发效率便成了关键问题，毕竟一寸光阴一寸金呐。</p><p>我的论文思路是找到一个共同的表达层，既可以描述设计师的设计，也可以描述嵌入式设备显示的画面。这个表达层需要使用领域特定语言（Domain-specific Language, DSL）实现描述功能，其实没你想的那么复杂，HTML 就是一种 DSL。我也没搞什么发明创造，选择了 SVG 这种向量语言，它除了是一种图形格式外，更重要的一点特性是矢量图，这意味着它天然适配不同分辨率的屏幕设备，所见即所得在快速成型阶段的价值就体现出来了。因此基于这样一个向量图形库，设计师可以直接将设计稿转成SVG格式给嵌入式工程师，后者可以很方便地在基于 ARM Cortex-M4 微控制器等级的硬件上将设计稿渲染出来。</p><p>我们日常用的电脑甚至手机设备性能都非常的强劲，例如今年各家骁龙 865 旗舰手机的高配版本内存竟然达到了 12 GB！而我刚提到的 ARM Cortex-M4 微控制器大概是什么水平呢？以我使用的开发套件 ST32F429IDISCOVERY Kit 举例来说，它使用了一枚 STM32F429ZIT6 MCU，主频 180 MHz、2 Mb of Flash memory、256 KB of RAM，是不是有种瞬间回到“石器时代”的感觉😂。所以实验最大的难度就是在这样性能极度匮乏的硬件上，实现一个能成功解析并正确展示 SVG 图片的向量图形库，每一 KB 内存都需要“锱铢必较”！</p><p><img src="https://hmxlua.bn.files.1drv.com/y4mgXJcVBrse8QRmGsAgSbN26mPYmCinQuLiI1dHxs1avruyDjjbE_eEl3yi5U3yw4POWK2Yzm0ASNS3G807lK2Trz2zVVVf-LpKDCAaOlW54MgtAIjOBikzFPoMZvL-Td2T88OxOmW-XK8JL7_YqUmqKWpUTvryV2OP3NagIUzEk7OH9hmbDKPU0p2JM7h1cyr-eGCT0urd9cDFtf3K0UR3A?width=1465&height=971&cropmode=none" alt="Architecture diagram"></p><p>如上图所示，EVGUI 图形库包含三大部分：展示层（Presentation Layer）负责 XML、SVG 的解析；渲染层（Render Layer）负责窗口（Window）、插件（Widget）以及 GUI 的一些核心功能如向量库、基础字体、处理模型等；输出层（Output Layer）主要负责内存管理和驱动管理。图中蓝框说明的是面向快速成型的工作流程，也就是前文提到的直接在设备上渲染出 SVG 图片；红框则想解释这样一个图形库除了能用作快速成型外，也兼容传统开发模式，即基于渲染层提供的 API 编写 GUI 业务代码。</p><p>具体的实现、使用到的一些开源库可以参考我的 GitHub <a href="https://github.com/Joouis/EVGUI">仓库</a>，此处不再赘述，在后续（确定会分享）的笔记中会介绍 SVG 的处理、向量图形核心库 TWIN 的渲染流程、简单的触控处理。记得还有一篇把底层驱动库 µGUI 移植到开发套件上的笔记，可惜同样遗失了！在这放个仅存的渲染流程图缅怀一下。</p><p><img src="https://hmxkua.bn.files.1drv.com/y4mFPnTSDrME_OY4iFZHc8gSLkgfs78VAg53NaznJCZGNw8yIzn_8VNcG2CpFezLDRfYYoQfTHbg2eQVjYlF7KHmwn9tunmARvPHn7n2lsRt5IAqRwo_9WQoXaLeTEFjISBuPkXZLhZJa8NkZdO7mAQB422dtcpWRRayyTYu0Y3bwra5fC6kXSwi3TVqbJj5TpX_LAPRplBVf5GXm4CeADlZA?width=1299&height=642&cropmode=none" alt="µGUI rendering process diagram"></p><p>值得一提的是，向量图形库 <a href="https://keithp.com/~keithp/talks/twin-ols2005/twin-ols2005www/">TWIN</a> 是渲染层的核心。作为一个 2005 年还是为 “Sub-PDA” 设计的窗口系统，它只耗费 100KB 左右的内存便可运行起来，代码架构和质量真的非常牛逼。它的作者 Keith Packard 因 X Window 系统而闻名，他在 HP 剑桥研究实验室完成 TWIN 后，又基于 TWIN 研发了 <a href="https://www.cairographics.org/xr_ols2003/">Xr 向量图形库</a>，随后便是现在著名的 Cairo 图形库。这么介绍似乎有点攀亲带故，主要是 TWIN 相关的资料太少，因此多提一嘴。此外 TWIN 诞生的时代还是 WIMP （Windows, Icons, Menus, Pointer）盛行，而现今的交互方式中触控操作逐渐成为主流，因此集成它时也涉及到了人机交互方式的设计与修改。</p><p>既然是一篇论文，当然不能只把工程跑起来证明理论设计是可行的，还需要一些定量测试，例如内存的使用分析和测试。为了这么一点点内存绞尽脑汁，现在回想起来，真的很有意思！</p><p><img src="https://hmxjua.bn.files.1drv.com/y4mL7BLZQi1rxMii6tdDKgMLozK3U26xWucyZ1fU0lshEz9CJwoUs6BoWV2Xohz5wBKRZ_7x8qoz0L_lxdE_WqXLE5QeAqKr5aNEO1InDijHml65hsHiTm_-fD-2Cb4YiFdlrbR8Q_2mfLtMUA40a1eF_tHYPfPpGA3bgrGgW89Wm9kndlGvgPy3wuQ5ZssEnuHf9AoSmqJ0qWcNNSq4FaSIA?width=1280&height=720&cropmode=none" alt="Memory consumptions of layers diagram"></p><p>开发板外置的 SDRAM 用来存放 SVG 数据，划分了两个 Layer 1/2 实现双重缓冲（Double buffering）。</p><p><img src="https://hmxiua.bn.files.1drv.com/y4mzByqIpsNZkt7T_L9NGnugQ2wNVuoawtQPRyZrna63cZN0b75r_H7wvqhBax7t581xbYD5m-4A4LFh13hYGISR3PHsJZN6zgpKnReDidlUOuW29JM3JQxhuZ5dr5Ym6bfcYa-51uapn9BXy2LfAMKKo0otjoTR3RDzS_XV3BaNzjf7rdAScjRmQgBVpgVfjbzcSfmFEC9l3QK0Mx2xu-FPA?width=1331&height=870&cropmode=none" alt="Stack heap analysis diagram"></p><p>论文套用了当下流行的穿戴式设备话题，因此演示场景也与此相关。至于图二和图四的那个复古时钟，是 TWIN 当年（没错就是 2005 年）的一个演示应用，被我“移花接木”了过来。</p><p><img src="https://hmxhua.bn.files.1drv.com/y4mgKHoIDX_7IhHNp6523jQNbAUQ6l6HvQmDu90FS1yJT9bA9EoTlZDIUApP6sqkvH8R0R6d6kzIiDyZs_PI7pr_3WbObyrDeXY4FOzbRjmeorNKQmOWcPVdjOrFsvGwhI0JaoahEMsEerO4K2oLqTETK04I1gBdBv6s0QJ29kussj4AQ9wRm9YWMeq20Sps8K4yRQ4Jx14Gl3x6KrWTNSNqg?width=1280&height=622&cropmode=none"></p><p>此处也有演示小视频。</p><video width="304" height="540" src="https://cdnhk.blob.core.windows.net/blog/EVGUI Demo.mp4" preload="metadata" controls="" playsinline="" poster="">Sorry, your browser does not support the video tag.</video><br /><p>最后需要说明是这篇论文的思路来自我的指导教授 Jserv，在之前的博文中也曾反复提到过这位大牛。他是“大脑”，而我是执行者。现在偶尔仍能回忆起很多找他调试代码到深夜的日子，嵌入式开发的代码量不大，解决一个问题可能只需要编写或修改几行到数十行代码，但这背后的 know how 往往需要花费数日乃至数周的时间。</p><p>同时也要感谢我的一直以来都很开明的直系教授同意我做这样一个与他研究方向毫不相干的题目，以及友情帮助设计这个清爽演示 GUI 的设计系学妹 <a href="https://www.zhihu.com/people/vivianvivi">@Vivian</a> 同学 😊。</p><p><img src="https://hmxeua.bn.files.1drv.com/y4mb_qFTtVYHbBZlRvN35TJRDKavuir8vDheXQXGiFgXGLA318wiXhyGUOl8QKJx2S5BTEkIagzaduF82j8mpH_Oy5jrs6z8BfE6KBcMVlR_ggdmqBNFYiUAzw21WZobxb3Jxg_1U1_b1wSlQCPKMJgJzffwRRgCBZv6PzlME_Aexp6tB-SkBx0FQgTmQAkqMmWoAkJXQLUyeoh7B3KVL9KHQ?width=2780&height=1542&cropmode=none"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;研究生时期的嵌入式课程笔记整理告一段落，还剩一点硕士论文相关的笔记有待整理。这几篇笔记记录了论文以外的东西，主要是实验过程中的部分源码分析与问题思考，还能保留至今已是幸事（如前文所叙，同样有不少笔记、文章随着 Dropbox 的自动迁移丢失了😭）！&lt;/p&gt;
&lt;p&gt;在开始分享笔记之前，先借本文简单介绍一下鄙人的硕士论文，为后续的笔记做个铺垫。&lt;/p&gt;
&lt;p&gt;论文主题非常工程化，不过一点一滴都是自己从头搭建起来的，同时完全拥抱开源，甚至像开发环境也是在 Linux 上写 MAKEFILE、LD Script 等去实现过去 Keil IDE 已经帮开发者做好的事情。因此回顾这个项目时，点滴细节不断在脑海里涌现，品味之下令我获得极大的满足感。&lt;/p&gt;
&lt;p&gt;希望也能与你分享这份因技术而生的快乐！&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="vector" scheme="https://blog.joouis.com/tags/vector/"/>
    
    <category term="gui" scheme="https://blog.joouis.com/tags/gui/"/>
    
    <category term="twin" scheme="https://blog.joouis.com/tags/twin/"/>
    
    <category term="window system" scheme="https://blog.joouis.com/tags/window-system/"/>
    
    <category term="rapid prototyping" scheme="https://blog.joouis.com/tags/rapid-prototyping/"/>
    
    <category term="svg" scheme="https://blog.joouis.com/tags/svg/"/>
    
    <category term="wearable devices" scheme="https://blog.joouis.com/tags/wearable-devices/"/>
    
    <category term="µGUI" scheme="https://blog.joouis.com/tags/%C2%B5GUI/"/>
    
    <category term="stm32" scheme="https://blog.joouis.com/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>GDB/CGDB入门与拆弹游戏</title>
    <link href="https://blog.joouis.com/2020/lab-gdb-intro/"/>
    <id>https://blog.joouis.com/2020/lab-gdb-intro/</id>
    <published>2020-03-29T08:22:19.000Z</published>
    <updated>2020-03-29T08:22:19.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2019/watching-notes-revolution-os/">嵌入式笔记</a>第七篇同时也是完结篇，原文写于2015年。本文除了介绍GDB/CGBD的基础使用方法以及嵌入式开发应用外，还会分享一个解密类经典游戏 <code>Defusing a binary bomb with GDB</code> ，非常有趣！</p><a id="more"></a><h2 id="使用GDB"><a href="#使用GDB" class="headerlink" title="使用GDB"></a>使用GDB</h2><h3 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h3><ul><li><code>b [function name] *[address]</code>：設置斷點</li><li><code>d [breakpoint num]</code>：刪除斷點</li><li><code>c</code>：繼續執行，到下一個斷點處（或運行結束）</li><li><code>n</code>：單步跟蹤程序，當遇到函數調用時，也不會進入函數內（針對src）</li><li><code>s</code>：單步調試，如果有函數調用，則進入函數（針對src）</li><li><code>si</code>：同s（針對asm）</li><li><code>ni</code>：同n（針對asm）</li><li><code>p /x $r0</code>：以16進制格式打印寄存器r0的值</li><li><code>x/s [address]</code>：以字串方式打印出地址所指向的內容</li><li><code>layout asm/src</code>：會顯示出當前正在執行的asm/src代碼段（這樣就不用看objdump -D啦）</li><li><code>layout split</code>：同時顯示當前執行的原始碼和組語</li><li><code>layout regs</code>：會以10進制和16進制方式顯示寄存器的值，包含r0-r12、sp、lr、pc、cpsr（這樣就可以不用p了）</li><li><code>winheight name +/- count</code>：調整 TUI 窗口大小，例如 winheight src -5 代表 TUI 窗口減少 5 行代碼</li><li><code>info stack/variables/files/...</code></li><li>REF:<ul><li><a href="http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/gdb.html">http://linuxtools-rst.readthedocs.org/zh_CN/latest/tool/gdb.html</a></li><li>TUI-specific Commands](<a href="https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html">https://sourceware.org/gdb/onlinedocs/gdb/TUI-Commands.html</a>)</li></ul></li></ul><h3 id="CGDB"><a href="#CGDB" class="headerlink" title="CGDB"></a>CGDB</h3><ul><li>安裝：<code>sudo apt-get install cgdb</code></li><li>官方手冊：<a href="http://cgdb.sourceforge.net/docs/cgdb-no-split.html">CGDB Manual 0.6.6</a> （<strong>请查看手册最新版本</strong>：<a href="https://cgdb.github.io/docs/cgdb.html">CGDB Manual 0.7.1</a>）</li><li>相比 GDB 無需用 layout 調出 TUI，CGDB 會自動顯示出來，source window 和 GDB command window 切換方式和 VI 相同，使用 i 和 Esc。</li><li>新增及移除 break point 方法，直接在 source window 裏移動到想要新增/移除的位置，使用 space 鍵就可以了。</li><li><strong>使用 cross compiler 方法</strong>：<code>cgdb -d arm-none-eabi-gdb -x &quot;gdb.script&quot;</code></li><li>Source window 類似 VI 界面，常見的 <code>:</code> 設定、<code>/</code> 查詢等都可以使用，具體參考 <a href="http://cgdb.sourceforge.net/docs/cgdb.html/Configuring-CGDB.html#Configuring-CGDB">CGDB configuration commands</a></li><li>使用 <code>o</code> 可以選擇要顯示的檔案源碼，超潮der</li><li><strong>注意</strong>：<ul><li>當前代碼行的行數會是粗體，不過不太明顯，用 space 敲敲看就知道在哪一行了</li><li>相比 GDB，記得在 CGDB 裏不要 <code>layout</code> 指令！會產生一堆亂碼死掉@@</li></ul></li></ul><h3 id="可視化除錯工具"><a href="#可視化除錯工具" class="headerlink" title="可視化除錯工具"></a>可視化除錯工具</h3><ul><li><a href="https://www.gnu.org/software/ddd/">DDD</a></li><li><a href="http://manpages.ubuntu.com/manpages/hardy/man1/xxgdb.1.html">XXGDB</a></li></ul><h2 id="Using-STM32-discovery-kits-with-open-source-tools"><a href="#Using-STM32-discovery-kits-with-open-source-tools" class="headerlink" title="Using STM32 discovery kits with open source tools"></a>Using STM32 discovery kits with open source tools</h2><ul><li>原 PDF 链接已失效，原文请自行 Google</li><li>Written by STLINK development team</li></ul><h3 id="Installing-GNU-toolchain"><a href="#Installing-GNU-toolchain" class="headerlink" title="Installing GNU toolchain"></a>Installing GNU toolchain</h3><ul><li>请自行 Google</li></ul><h3 id="Installing-STLINK"><a href="#Installing-STLINK" class="headerlink" title="Installing STLINK"></a>Installing STLINK</h3><ul><li>Dependencies<ul><li><code>libusb-1.0</code></li><li><code>pkg-config</code></li><li><code>autotools</code></li></ul></li><li>Install stlink</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/texane/stlink stlink.git</span><br><span class="line">cd stlink.git</span><br><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>It includes:</p><ul><li>A communication library (stlink.git/libstlink.a).</li><li>A GDB server (stlink.git/st-util).</li><li>A flash manipulation tool (stlink.git/st-flash).</li></ul><h3 id="Using-the-GDB-server"><a href="#Using-the-GDB-server" class="headerlink" title="Using the GDB server"></a>Using the GDB server</h3><ul><li>A GDB server must be started to interact with the STM32. Depending on the discovery kit you are using, you must run one of the 2 commands:<ul><li><code>st-util --stlinkv1</code>: STM32VL discoverykit (onboard ST−link)</li><li><code>st-util</code>: STM32L or STM32F4 discoverykit (onboard ST−link /V2)</li></ul></li><li>Then, GDB can be used to interact with the kit:<ul><li><code>arm-none-eabi-gdb XXX.elf</code></li></ul></li><li>From GDB, connect to the server using:<ul><li><code>(gdb) target extended localhost: 4242</code></li><li><code>(gdb) load</code></li><li><code>(gdb) continue</code></li></ul></li></ul><h3 id="Building-and-flashing-a-program"><a href="#Building-and-flashing-a-program" class="headerlink" title="Building and flashing a program"></a>Building and flashing a program</h3><ul><li>If you want to simply flash binary files to arbitrary sections of memory, or read arbitary addresses of memory out to a binary file, use the st-flash tool, as shown below:<ul><li><code>st-flash read v1 out.bin 0x8000000 4096</code>: stlink-v1 command to read 4096 from flash into out.bin</li><li><code>st-flash read out.bin 0x8000000 4096</code>: stlink-v2 command</li><li><code>st-flash write v1 in.bin 0x8000000</code>: stlink-v1 command to write the file in.bin into flash</li><li><code>st-flash write in.bin 0x8000000</code>: stlink-v1 command</li></ul></li></ul><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><ol><li><p>Disassembling THUMB code in GDB<br>By default, the disassemble command in GDB operates in ARM mode. The programs running on CORTEX-M3 are compiled in THUMB mode. To correctly disassemble them under GDB, uses an odd address. For instance, if you want to disassemble the code at 0x20000000, use <code>(gdb) disassemble 0x20000001</code></p></li><li><p>每次都輸入一堆必備的指令很麻煩，可以寫入一個 <code>gdb.script</code> 檔案裏，例如：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target remote:4242</span><br><span class="line">file stm32f429-example.elf</span><br><span class="line">layout src</span><br></pre></td></tr></table></figure><p>然後使用 <code>arm-none-eabi-gdb -x gdb.script</code> 進入後，單步執行即可。</p><ul><li>記得先打開 <code>st-util</code>；</li><li>個人習慣把 <code>arm-none-eabi-gdb -x gdb.script</code> 寫進 <code>Makefile</code> 裏。</li></ul><h2 id="Defusing-a-binary-bomb"><a href="#Defusing-a-binary-bomb" class="headerlink" title="Defusing a binary bomb"></a>Defusing a binary bomb</h2><h3 id="Lab43-Runtime-Behavior"><a href="#Lab43-Runtime-Behavior" class="headerlink" title="Lab43: Runtime Behavior"></a><a href="http://wiki.csie.ncku.edu.tw/embedded/Lab43">Lab43: Runtime Behavior</a></h3><p>預期目標</p><ul><li>複習 ARM 處理器和指令集，並深入 stack 和執行時期的行為</li><li>熟悉 objdump、gdb 等工具，並利用上述工具分析執行檔</li></ul><h3 id="Phase-0-Phase-1-Comparison"><a href="#Phase-0-Phase-1-Comparison" class="headerlink" title="Phase 0, Phase 1: Comparison"></a>Phase 0, Phase 1: Comparison</h3><ul><li><p>使用 <code>b phase_0</code> 設好斷點後，一個 <code>c</code> 來到 <code>phase0</code> 函數，在源程式端輸入 <code>help</code>，則可見：</p><p><img src="https://g8xeua.bn.files.1drv.com/y4m2NfjgmRex3zQrLCz2ec6NFVRh9RVlYb6UxUVIW5Cp_ERI9Aewx17RtVAc74PA33vZdXPAFsMqMHaKmV2-v_SDvAxa4SEyYr4-WXEyT5QEvDfMBkrjNr70ggOdi7F8irjC_en48kPMwf2HBEiPWzfTYVrCg7LWUmb17hT1ciWMNiR9a9Woxr9HTBiQEVtRbLmfF59Kt7I6Gm9L5d-gahNOg"></p></li><li><p>可以看到程式是用 <code>r0</code> 和 <code>r1</code> 作比較，<code>r0</code> 是我們輸入的值，<code>r1</code> 就是我們要猜的值，這裏已經告訴我們是 <code>help</code> 了</p></li><li><p>用 <code>si</code> 執行到 0x87ee ，可以看到 <code>r0</code> 和 <code> r1</code> 的值：</p><p><img src="https://g8xgua.bn.files.1drv.com/y4mPoBctTovg6J0yvhXhtffMfAPecqUB0wg5NJ-TYuE67eCPc5pFngsB3YWObYbw43_WCi__xFFjIXMMUfVCTjDQ3LB6WldJeVVdl2GgzHvk4e1NfiWyWz8eGqvKqxMx1Q3DrNTZSsd33h6aalvSdyIOxcohH8GQd7F3Ibi-5khQgNfOWTshN_lITEZAtALGyuedC96KqrLIVX3UkXz3I2kHQ"></p></li><li><p><code>x/s $r0</code> <code>x/s $r1</code> 直接可以印出 <code>r0</code> <code>r1</code> 的地址和指向的值：</p><p><img src="https://g8xfua.bn.files.1drv.com/y4m_1q4cb_ll8OFKXEtf82M3NkP2TNsY5Azfo4LAaj05-y7DCWA0U670BtSnsiDXmBxMUSpoGz9DprJ3apqbGyR5MIboLmpWA32V50cpmYdg0310ksBg7LMouIDVvvvAXHuVc3BsB5SIuAVcz8LUgrTyrev5T8nkSifzjYigM5PsfkLBv28c1Ao3kko5shSbA2ExRtj4SUzF0T0lUH-6Frgzg"></p></li><li><p>同理，<code>continue</code> 到 <code>phase_1</code>，印出 <code>r1</code></p><p><img src="https://g8xlua.bn.files.1drv.com/y4mrKjOr0UFu4U4LD7lJ5pL2tLIW2V6vUrnwlS2dsLfOfuEVWlJzV5pMx7xSbVswnj1Mg-QY5E3QrGgCp3RTtiNHEyDIrtxtUdTYbaEGmazryd_8204Rwn0bXhAtze8hLOyXvsifBbBBylHoGZNUBXjiRiUIBY9JVLCAiw34WfD3j-KKSlnmDNUp1a0m5yZ7bEj0AIrekGdCZt95WOFOS5cbQ"></p></li></ul><blockquote><p><strong>Psalm 23:4</strong><br>Yea, though I walk through the valley of the shadow of death, I will fear no evil; For You are with me; Your rod and Your staff, they comfort me.</p></blockquote><h3 id="Phase-2-For-loop"><a href="#Phase-2-For-loop" class="headerlink" title="Phase 2: For loop"></a>Phase 2: For loop</h3><ul><li><p>先隨意輸入，看下寄存器 <code>r1</code> 的值 <code>0x8bc8: &quot;%d %d %d %d&quot;</code>，看起來是要輸入4個整數，重頭再來一次</p></li><li><p>發現用 <code>ni</code> 跳過 function 會讀不到指令，還是用 <code>si</code> 一步一步來吧</p><p><img src="https://g8xiua.bn.files.1drv.com/y4mqViBPUFsaPQty38x5OBoy_Hs77ynzLJI6UOdjfk4lJmGhtQ4eiaYLFGX5sdKFFwavCyTtx-sZa75RmLRCSyELNwHVzOeoYoWvNhuNkiOwvON5aS47fCuI0LWYpgJNMG-i5AKdiBlsxvqY2mDK3uPWoRPaf5uoIUcNRLIGk0yXFVc-N7RpbfMaktiMDI58yj1MfT_xetol8gQR64f3l4tRg"></p></li><li><p>到 0x885e，如果輸入的數的個數不是4個，就會 explode bomb，若是則跳到 0x8864</p></li><li><p>接下來的代碼中：</p><p><img src="https://g8xhua.bn.files.1drv.com/y4mJJh_4kT5r_QS5Eoq9flUbX7c8Cg0mYiqCXdt7921pMyBN3eDAayILtWmPGZjLEXBty5TADzKfKz7Eh4YTcNxJCO9qq4ENGg_Kni1pOSmrFlLu5IKe2VGUZY6ZqMZQ5N_ypvcEJz-CJiUpdjsROctT39V6tRqWW2fexd78ie9PFxw3SEFH55VstWrwzyYgwyWzeW5Ir2yia0WXOO5rFHFmw"></p><ul><li><p>從 0x886a 到 0x887a 是一個迴圈，完整的 <code>si</code> 走了一邊，只是運行完後不能讀到 <code>r2</code> <code>r3</code> 的值所指向的地址裏的值</p></li><li><p>類似的代碼爲:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=2;i=0;</span><br><span class="line">do &#123;</span><br><span class="line">  a+=1;</span><br><span class="line">  i++;</span><br><span class="line">&#125; while (i&lt;=9);</span><br></pre></td></tr></table></figure></li><li><p>意外但肯定不是巧合地發現，之前輸入的四個數分別存在 <code>r7+12</code> <code>r7+16</code> <code>r7+20</code> <code>r7+24</code> 裏（其實是用 <code>x/s $r7+n</code> 試出來的）</p></li><li><p>所以輸入的第二個數（上述代碼中的 <code>a</code>）在迴圈後會增加10</p></li><li><p>而函數最後對比的是 <code>r7+16</code> 和 <code>r7+20</code>，需要他們相等，故輸入時第三個數減第二個數要等於10</p></li><li><p>測試果然過關~</p><p><img src="https://g8xjua.bn.files.1drv.com/y4mc5EpPCrZB3UjhoesaVAL4k4lRFD6EspybuSYiTw4xBfnC5a4JDC_NgHnhQ7Iqfls1jNxQ2iPxRRgEmStB9oWm0BhhSm9novzSpEsfD0ymcFihk1cGO5gYvvfuE8vmd5bbqYaKHTW4JKMTkbSjFPLyiuf-arPBqnJ1qoz3scVVtNqhgH_4xfE1qLX1zvG1RH0S8LM09fw2f7id47vrCopPQ"></p></li></ul></li></ul><h3 id="Phase-3-If-condition"><a href="#Phase-3-If-condition" class="headerlink" title="Phase 3: If condition"></a>Phase 3: If condition</h3><ul><li><p>第一步，設置斷點在 <code>phase_3</code> 後隨意輸入進入斷點，印出 <code>r1</code> 的值，爲 <code>&quot;%d %d %d&quot;</code> ，後面也有判斷輸入個數的代碼，和階段2同理：</p><p><img src="https://gsxjua.bn.files.1drv.com/y4mUqM4HweD1xwIFi5B1A7Bnst_1qzf0FrK2v0xH25U6pZ8P6K76cFWxxHnYTfMwFcYha4mX6Fg-i7FI1qPAdAfx81PntBGquONp82JbgKphAVHnsxDfb9_tCJX3oSmzVFs5wJUgAqY7neLUnLM0YZsWkWprzA-pJSdH_apeFrv1ysTR9qkV8TcnQ5rybRigiyVfh63TJXMzSmKxf2UYVi1ag"></p></li><li><p>接着把斷點設在 0x88be，代碼如下：</p><p><img src="https://gsxkua.bn.files.1drv.com/y4mORvlx72p5_6PDiPtzxSy6__pPrJOV9I_XeiIvDjBtYjCurQUXhRT9cL9aDS5mbRp5QvYZr97fs0nj-iZi2qPHZQjcM-fqoTYnzySfukulgpJjwKwoWkVtf7ccjYof9yes3l7wlgijIsvN9Y0A1Q7Ly9o6-Q1ObfIc99nb1XVTohiBIOZm608wg6p7n8iSsTWyq4SAsPxYh6vjWAHjcdkOw"></p></li><li><p><code>r3</code> 會先取出輸入的第一個數，和 40 做對比，這裏我輸入的 1，因此會繼續往下走</p></li><li><p>接着把給輸入的第二個數、第三個數的值賦給 <code>r2</code>  <code>r3</code>，然後 <code>r3=r3+r2</code> ，再把 <code>r3</code> 的值存回 <code>[r7,#16]</code></p></li><li><p>然後把 <code>r2</code> 的值設爲 <code>[r7,#16]</code>，再把 <code>r3</code> 的值還原回初始的第三個數的值，對比他們相不相等</p><ul><li>即要使得 <code>r3=r2+r3</code>，所以在第一個數不爲 40 的情況下，第二個數和第三個數都只能是 0</li><li>那如果第一個數等於 40，則 <code>r2</code> <code>r3</code> 相等即可</li></ul></li><li><p>試驗一下</p><ul><li><p>當第一個數不爲40時，正確</p><p><img src="https://g8xkua.bn.files.1drv.com/y4mNjNKy3ObTQ3OziMqXlvoF7pyUzotNvDaaFyvIY3z_wIogyPhn1NLmB5T4xbph1UQ6Bd9PCPwRQF1onforUpnrNKLiBkYmZvIoXkFYeCPg1hDR2sCv_3P370mUy4ma7qfXu5uuqXixeoKQmiYfQ3cXnndVZ4oeBE9efulUvF2wM-UwjVPSNRgKCQFsVQPctP4SYfxWgwXmW7iUS4D0K091A"></p></li><li><p>當第一個數爲40時，正確</p><p><img src="https://g8xmua.bn.files.1drv.com/y4m3Pqfq-DHHyNIvsjgTb7k2BlfrkbLEiwsu3UM3A3iTmqsb0GNqbiOQP_1fgZvrv8KfjwPhNHgXta8PCLrw_19zBsArIwvR_dh_PlcwEoIeo7P1cHSa5TfeBcTz0M9AUBHhEnFbShVas3u4yd6XpNfxTcaMbZdc5p5waVlkUk_gTK_Vyk-qGXfdu5Xzn26_qzgMuTXnJN4ink2FKuq4ZGn9g"></p></li></ul></li></ul><h3 id="Phase-4-Iteration"><a href="#Phase-4-Iteration" class="headerlink" title="Phase 4: Iteration"></a>Phase 4: Iteration</h3><ul><li><p>與階段2、3同理，得知輸入爲一個整數</p><p><img src="https://gsxeua.bn.files.1drv.com/y4ma2y8fO8ZPfARqL6qOz4Fvy00y07cQIIzsEXuwLGcEFMMIJuwh2zqeI_VyBIeel-p_LMbHRmVoGqd0ZuKOg6mdAwBASP1v_YhEn4abeZhkVoENAskxbCV_4WEZMptlxq7VB6R5yVJnkj3h93p8YORHEUxWLiaZoD7o5wE0AA8knib4scjyfZ261UHLugUjSz2wWQ29BNRV_SPZsh1uNZHUw"></p></li><li><p>接下來 <code>phase_4</code> 的函數就很短了</p><p><img src="https://g8xnua.bn.files.1drv.com/y4mUvdDoZ8nPQPsuwD8sMK-75pZGwvsiV8sYOTW_qbhWybCYZWFnLgMtiexjznqdNtJzpDqV4B84ajzPPjYzKEkumC24wFXMpJNpgpTak1gylEmJh-dAkWMIAHozf0f3NzJyQx1nOSsPLwajC2Xk0w-q-xFXok0K5kKpdDpLT9vm4TVHuOpGli0Srxe8nEM6Hy3Jd_Cm4w58uyblrkUqeO3Xg"></p><p>把輸入的數，代入fun4後，return的值要等於1024。</p></li><li><p><code>fun4</code> 的代碼如下：</p><p><img src="https://gsxiua.bn.files.1drv.com/y4mlxNA_jEBIGKIHZQSqzMTL2a6D2-B8yr-Hhwl39qIZqbA02BYOssQrohJ-8FFgBHwnJotMvff6nTWKUA3Bo-y8cwE92a4CgwNnKujuPR9qqHYZrJLoK2CuEmk6V6cFxXxmcnowE1Sf_d64kZkEJNMsfmYIdhfxXq7aw_PcX31YP8tyVtVR1800adG2tNxzDk7x8ANgNvFD_MN9LVeZgoK_g"></p></li><li><p>當 <code>r3</code> 不爲 0 時，會一直減 1 然後調用自身函數；當 <code>r3</code> 終於減到 0 後，會在 0x88f2 賦值爲 1，然後跳到 8904，回傳上一層的 <code>fun</code> 函數。然後 <code>r3=r0=1</code>，開始左移</p></li><li><p>所以相當於輸入的數字 n，可以滿足 2 的 n 次方爲 1024，即是正確答案，真相如下：</p><p><img src="https://gsxhua.bn.files.1drv.com/y4mruackLegsDWFfF6teCuu9RUKNLp1pLHIecfDS5MdIW53DktomQZTUc63fegiDpsIwu46Gj-2u15MvQfPpEJeu9Xy3x2Kbqx3JetweFkeAwW_2AjGgIOTq8FamG56Cw_aQnubjySwTBN6MZxSb_vB66kWfnvaRCbn-E2hyYsTciL8MW1aGxif2yUQSMN6325r40UUBrelZk34NdwAYere7w"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2019/watching-notes-revolution-os/&quot;&gt;嵌入式笔记&lt;/a&gt;第七篇同时也是完结篇，原文写于2015年。本文除了介绍GDB/CGBD的基础使用方法以及嵌入式开发应用外，还会分享一个解密类经典游戏 &lt;code&gt;Defusing a binary bomb with GDB&lt;/code&gt; ，非常有趣！&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="stm32" scheme="https://blog.joouis.com/tags/stm32/"/>
    
    <category term="gdb" scheme="https://blog.joouis.com/tags/gdb/"/>
    
    <category term="cgdb" scheme="https://blog.joouis.com/tags/cgdb/"/>
    
    <category term="disassembly" scheme="https://blog.joouis.com/tags/disassembly/"/>
    
    <category term="binary" scheme="https://blog.joouis.com/tags/binary/"/>
    
    <category term="defusing binary bomb" scheme="https://blog.joouis.com/tags/defusing-binary-bomb/"/>
    
  </entry>
  
  <entry>
    <title>Vuetify Playground - A responsive playground to try all UI components at once</title>
    <link href="https://blog.joouis.com/2020/vuetify-playground/"/>
    <id>https://blog.joouis.com/2020/vuetify-playground/</id>
    <published>2020-03-01T15:16:54.000Z</published>
    <updated>2020-03-01T15:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>年前基于 Vue 写一个 H5 Demo 前调研了目前流行的 UI 框架，VuetifyJS 应该是目前做得最大的，但是没有 mint-ui、mand-mobile 等国内 UI 框架的 demo 应用可以快速试玩所有组件，只能在官网的 Storybook 一个个点开看，同时也无法快速检查移动端的适配性做得如何。</p><p>因此我做了个简单的 Playground 应用托管在 Github Page 上，PC 可访问 <a href="https://github.com/Joouis/vuetify-playground">Github 仓库</a>查看，手机端直接扫码试玩。</p><p>欢迎尝试，欢迎讨论！</p><p><img src="https://i.v2ex.co/ehJnMEw7b.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Web 前端" scheme="https://blog.joouis.com/categories/Web-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="mobile" scheme="https://blog.joouis.com/tags/mobile/"/>
    
    <category term="vuetify playground" scheme="https://blog.joouis.com/tags/vuetify-playground/"/>
    
    <category term="vue" scheme="https://blog.joouis.com/tags/vue/"/>
    
    <category term="vuejs" scheme="https://blog.joouis.com/tags/vuejs/"/>
    
    <category term="vuetify" scheme="https://blog.joouis.com/tags/vuetify/"/>
    
    <category term="vuetifyjs" scheme="https://blog.joouis.com/tags/vuetifyjs/"/>
    
    <category term="responsive" scheme="https://blog.joouis.com/tags/responsive/"/>
    
    <category term="demo" scheme="https://blog.joouis.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode小练习</title>
    <link href="https://blog.joouis.com/2020/lab-leetcode-practices/"/>
    <id>https://blog.joouis.com/2020/lab-leetcode-practices/</id>
    <published>2020-01-24T08:53:32.000Z</published>
    <updated>2020-01-24T08:53:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2019/watching-notes-revolution-os/">嵌入式笔记</a>第六篇，原文写于2015年。</p><p>几乎所有候选人都问过我，进微软是不是要刷题，而我总是不厌其烦地告诉他们，我没刷题就进来了（在阿里疯狂996，享不尽福报，哪里还有时间刷题😅）。</p><p>嵌入式课程的LeetCode作业应该是我到目前为止仅有的“刷题”经验。Jserv的本意也不是让学生刷题型，而是通过几道算法题对比递归和迭代结构关于程序的性能差异，此外每题要求写出递归和迭代版本对思维能力的提升也是显而易见的。在此与大家分享:)</p><a id="more"></a><h2 id="2015q3-Homework-3"><a href="#2015q3-Homework-3" class="headerlink" title="2015q3 Homework #3"></a><a href="http://wiki.csie.ncku.edu.tw/embedded/2015q3h3">2015q3 Homework #3</a></h2><ul><li>實做 <a href="http://people.debian.org.tw/~jserv/ncku/2015q3.pdf">Week #2 程式題目</a>，解釋其運作原理（至少 3 題，限定 <a href="https://en.wikipedia.org/wiki/C99">C99</a> 或以上的規格）<ul><li>Question #2, #3, #4, #5, #6, #27</li></ul></li><li>在 GitHub 上 fork <a href="https://github.com/embedded2015/quiz">quiz</a>，然後逐一修改每個目錄裡面的檔案<ul><li>對於 Question #2, #3, … #6 都需要實做<strong>遞迴</strong>和<strong>非遞迴</strong>的版本</li><li>要一併準備測試資料</li></ul></li><li>除了修改程式，也要編輯 Hackpad 下方「<a href="https://paper.dropbox.com/doc/RrcZhOoThosgCSGRKwFTM">+作業區</a>」，增添開發紀錄和 GitHub 連結<ul><li>額外要求觀賞電影《<a href="https://zh.wikipedia.org/zh-tw/%E7%88%86%E8%A3%82%E9%BC%93%E6%89%8B">進擊的鼓手</a>》，思考這 4 週以來，課程給你的衝擊（若你沒衝擊的話，可以退選了），在自己的 Hackpad 紀錄心得，特別是對於追求卓越這件事</li></ul></li><li>應該要有完整的測試程式，並測試各項邊界狀況<ul><li>執行時間分析</li><li>記憶體需求分析</li><li>cache miss 分析</li><li>時間複雜度分析</li></ul></li><li>善用 assert</li><li>提供遞迴與非遞迴的版本</li><li>截止日期：Oct 17, 2015（含）之前</li><li>remember to use:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">astyle --style=kr --indent=spaces=4 --indent-switches --suffix=none *.[ch] </span><br></pre></td></tr></table></figure></li></ul><h2 id="關於Drop-Cache"><a href="#關於Drop-Cache" class="headerlink" title="關於Drop Cache"></a>關於Drop Cache</h2><ul><li>之前一直都是用<code>echo &quot;echo 1 &gt; /proc/sys/vm/drop_caches&quot; | sudo sh</code>來清理cache</li><li>剛才做quiz#4時突然想到好像echo的數字可以有<code>1</code>、<code>2</code>、<code>3</code>，於是乎都試了一下。驚奇地發現用<code>3</code>所耗費的時間比用<code>1</code>耗費的時間要多出25%：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo 3 &gt; /proc/sys/vm/drop_caches&quot;</span> | sudo sh</span><br><span class="line">perf <span class="built_in">stat</span> -r 100 -e cache-misses,cache-references,L1-dcache-load-misses,L1-dcache-store-misses,L1-dcache-prefetch-misses,L1-icache-load-misses ./recursive</span><br><span class="line">Performance counter stats <span class="keyword">for</span> <span class="string">&#x27;./recursive&#x27;</span> (100 runs):</span><br><span class="line">    44    cache-misses        <span class="comment">#   0.490 % of all cache refs    ( +-  8.59% )</span></span><br><span class="line">    0.000430226 seconds time elapsed                      ( +- 33.97% )</span><br><span class="line">    </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo 1 &gt; /proc/sys/vm/drop_caches&quot;</span> | sudo sh</span><br><span class="line">perf <span class="built_in">stat</span> -r 100 -e cache-misses,cache-references,L1-dcache-load-misses,L1-dcache-store-misses,L1-dcache-prefetch-misses,L1-icache-load-misses ./recursive</span><br><span class="line">Performance counter stats <span class="keyword">for</span> <span class="string">&#x27;./recursive&#x27;</span> (100 runs):</span><br><span class="line">    39    cache-misses        <span class="comment">#   0.447 % of all cache refs    ( +-  9.38% )</span></span><br><span class="line">    0.000327662 seconds time elapsed                      ( +-  3.46% )</span><br></pre></td></tr></table></figure><ul><li><p>於是查了一下：</p><ul><li><code>echo 1 &gt; /proc/sys/vm/drop_caches</code>：To free pagecache</li><li><code>echo 2 &gt; /proc/sys/vm/drop_caches</code>：To free dentries and inodes</li><li><code>echo 3 &gt; /proc/sys/vm/drop_caches</code>：To free pagecache, dentries and inodes</li><li>關於上述三個名詞的<a href="http://stackoverflow.com/questions/29870068/what-are-pagecache-dentries-inodes">解釋</a></li></ul></li><li><p>所以用3多清除了dentries和inodes，相比1多花費的時間，就是讀當前目錄找到該執行檔所花的時間</p></li></ul><h2 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h2><p><strong>Question：</strong></p><p>Given a sorted character array and a character, return the smallest character that is strictly larger than the search character. If no such character exists, return the smallest character in the array. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Input: [&#39;c&#39;, &#39;f&#39;, &#39;j&#39;, &#39;p&#39;, &#39;v&#39;], &#39;a&#39;   </span><br><span class="line">Output: &#39;c&#39;   </span><br><span class="line"> </span><br><span class="line">Input: [&#39;c&#39;, &#39;f&#39;, &#39;j&#39;, &#39;p&#39;, &#39;v&#39;], &#39;c&#39;   </span><br><span class="line">Output: &#39;f&#39;   </span><br><span class="line"> </span><br><span class="line">Input: [&#39;c&#39;, &#39;f&#39;, &#39;j&#39;, &#39;p&#39;, &#39;v&#39;], &#39;z&#39;   </span><br><span class="line">Output: &#39;c&#39;   </span><br><span class="line"> </span><br><span class="line">Input: [&#39;c&#39;, &#39;c&#39;, &#39;k&#39;], &#39;f&#39;   </span><br><span class="line">Output: &#39;k&#39; </span><br></pre></td></tr></table></figure><p>請寫出合法的 C 語言程式 char smallest_character(char str[], char c) { … }</p><h3 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h3><ul><li>因為需要將array里的元素由小到大順序和作比較特定字符：<ul><li>單純的size沒有狀態</li><li>size-1可從array中較大的元素遍歷到較小的，但不是從小到大</li><li>設一個local tmp[size-1]每次從array取[1..size-1]，然後向下傳，但這樣會丟失了原始array的數據，若array里沒有元素大於比較的字符，則無法取得array[0]</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uchar unsigned char</span></span><br><span class="line"><span class="function">uchar <span class="title">smallest_char</span><span class="params">(uchar str[], uchar c, uchar size, uchar count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">1</span> == size || <span class="number">0</span> == count) &#123;</span><br><span class="line">    <span class="keyword">return</span> str[<span class="number">0</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( str[size - count] &gt; c ) &#123;</span><br><span class="line">    <span class="keyword">return</span> str[size - count];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">return</span> smallest_char(str, c, size, count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Iterative"><a href="#Iterative" class="headerlink" title="Iterative"></a>Iterative</h3><ul><li>對array進行遍歷，如果比字符大就返回，如果沒有就返回array[0]</li><li>smallest_char()函式里多加一個參數size，因為array傳給子函式傳的是pointer而不是完整的array，<a href="http://stackoverflow.com/questions/9413046/how-to-get-the-length-of-array-in-c-is-sizeof-is-one-of-the-solution">參考</a></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uchar unsigned char</span></span><br><span class="line"><span class="function">uchar <span class="title">smallest_char</span><span class="params">(uchar str[], uchar c, uchar size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  uchar i;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; size; i++ ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( str[i] &gt; c ) &#123;</span><br><span class="line">    <span class="keyword">return</span> str[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str[<span class="number">0</span>];</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><ul><li>想使用perf kmem觀察slab行為時發生錯誤：<code>invalid or unsupported event: &#39;kmem:kmalloc&#39;</code></li><li>使用perf測量cache misses和time elapsed:<br><code>echo &quot;echo 1 &gt; /proc/sys/vm/drop_caches&quot; | sudo sh</code><br><code>perf stat -r 100 -e cache-misses,cache-references,L1-dcache-load-misses,L1-dcache-store-misses,L1-dcache-prefetch-misses,L1-icache-load-misses ./iterative</code>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Performance counter stats for &#39;.&#x2F;iterative&#39; (100 runs):</span><br><span class="line">  66    cache-misses        #   0.753 % of all cache refs    ( +-  9.27% )</span><br><span class="line">  8810    cache-references                        ( +-  0.62% )</span><br><span class="line">  9600    L1-dcache-load-misses                     ( +-  0.19% )</span><br><span class="line">  4203    L1-dcache-store-misses                     ( +-  0.23% )</span><br><span class="line">  0    L1-dcache-prefetch-misses</span><br><span class="line">  3714    L1-icache-load-misses                     ( +-  0.77% )</span><br><span class="line">  0.000354619 seconds time elapsed                      ( +-  3.88% )</span><br><span class="line">  </span><br><span class="line">Performance counter stats for &#39;.&#x2F;recursive&#39; (100 runs):</span><br><span class="line">  66    cache-misses        #   0.768 % of all cache refs    ( +-  8.41% )</span><br><span class="line">  8627    cache-references                        ( +-  0.63% )</span><br><span class="line">  9597    L1-dcache-load-misses                     ( +-  0.24% )</span><br><span class="line">  4227    L1-dcache-store-misses                     ( +-  0.23% )</span><br><span class="line">  0    L1-dcache-prefetch-misses</span><br><span class="line">  3573    L1-icache-load-misses                     ( +-  0.76% )</span><br><span class="line">  0.000402208 seconds time elapsed                      ( +- 32.71% )</span><br><span class="line"> </span><br></pre></td></tr></table></figure><table><thead><tr><th>Quiz#2</th><th>recursive</th><th>iterative</th></tr></thead><tbody><tr><td>執行時間</td><td>0.000402208</td><td>0.000354619</td></tr><tr><td>cache-misses</td><td>66</td><td>66</td></tr><tr><td>時間複雜度</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h2 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p><img src="https://itob9g.bn.files.1drv.com/y4mVd0fYruo-LRS3d2fy4LXEAbbUTRy9PhdBjCgfdnF4SfZjDJglUh_PLO5scg1th8jtlkYKUTXATy16FijZWD7GP1Bins39euZa2PnHWXmf4Tr_dAiRA-XrzIOPNj5L5R1ZRyelwS0WR2hUxXixPJAGGdTsSxuUN1zJtgZV_7WUstKWf1mrC9XH23FYAWQVVTIFGVxO87e01SX_s4O21pE4g?width=971&height=698&cropmode=none" alt="img"></p><h3 id="Recursive-1"><a href="#Recursive-1" class="headerlink" title="Recursive"></a>Recursive</h3><ul><li>先對右結點處理，再對左結點處理<ul><li>對於右結點，把他們push進stack</li><li>對於左結點把他變成父節點的右結點，然後如果stack里有結點則pop出來接上</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node *<span class="title">flatten</span><span class="params">(Node *node, <span class="built_in">stack</span> *S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( !node ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  node-&gt;right = flatten(node-&gt;right, S);</span><br><span class="line">  <span class="keyword">if</span> ( node-&gt;right  ) &#123;</span><br><span class="line">    stack_push(S, (<span class="keyword">int</span>)node-&gt;right);</span><br><span class="line">    node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  node-&gt;left = flatten(node-&gt;left, S);</span><br><span class="line">  <span class="keyword">if</span> ( node-&gt;left  ) &#123;</span><br><span class="line">    node-&gt;right = node-&gt;left;</span><br><span class="line">    node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    Node *tmp = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    tmp = node;</span><br><span class="line">    <span class="keyword">while</span>(S-&gt;size) &#123;</span><br><span class="line">      node = node-&gt;right;</span><br><span class="line">      node-&gt;right = (Node *)stack_pop(S);</span><br><span class="line">      <span class="keyword">if</span> ( !S-&gt;size  ) &#123;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Iterative-1"><a href="#Iterative-1" class="headerlink" title="Iterative"></a>Iterative</h3><ul><li>自上而下的，把右結點push到stack，然後把左結點變為右結點，然後移動到該結點；直到右結點也沒有時，把stack的結點依次pop出來接上</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flatten</span><span class="params">(Node *node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">stack</span> *S = (<span class="built_in">stack</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">stack</span>));</span><br><span class="line">  stack_init(S);</span><br><span class="line">  <span class="keyword">while</span> ( node || S-&gt;size ) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( node-&gt;right ) &#123;</span><br><span class="line">      stack_push(S, (<span class="keyword">int</span>)node-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( node-&gt;left ) &#123;</span><br><span class="line">      node-&gt;right = node-&gt;left;</span><br><span class="line">      node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( S-&gt;size ) &#123;</span><br><span class="line">      node-&gt;right = (Node *)stack_pop(S);</span><br><span class="line">    &#125;</span><br><span class="line">    node = node-&gt;right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="Performance-1"><a href="#Performance-1" class="headerlink" title="Performance"></a>Performance</h3><ul><li><code>echo &quot;echo 1 &gt; /proc/sys/vm/drop_caches&quot; | sudo sh </code></li><li><code>perf stat -r 100 -e cache-misses,cache-references,L1-dcache-load-misses,L1-dcache-store-misses,L1-dcache-prefetch-misses,L1-icache-load-misses ./iterative</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Performance counter stats <span class="keyword">for</span> <span class="string">&#x27;./iterative&#x27;</span> (100 runs):</span><br><span class="line">       65    cache-misses        <span class="comment">#   0.672 % of all cache refs    ( +- 11.50% )</span></span><br><span class="line">      9735    cache-references                        ( +-  0.53% )</span><br><span class="line">      11348    L1-dcache-load-misses                     ( +-  0.17% )</span><br><span class="line">      4601    L1-dcache-store-misses                     ( +-  0.21% )</span><br><span class="line">        0    L1-dcache-prefetch-misses</span><br><span class="line">      4014    L1-icache-load-misses                     ( +-  0.63% )</span><br><span class="line"></span><br><span class="line">   0.000489711 seconds time elapsed                      ( +- 37.21% )</span><br><span class="line"> </span><br><span class="line">Performance counter stats <span class="keyword">for</span> <span class="string">&#x27;./recursive&#x27;</span> (100 runs):</span><br><span class="line">       65    cache-misses        <span class="comment">#   0.672 % of all cache refs    ( +- 10.02% )</span></span><br><span class="line">      9637    cache-references                        ( +-  0.54% )</span><br><span class="line">      11429    L1-dcache-load-misses                     ( +-  0.18% )</span><br><span class="line">      4610    L1-dcache-store-misses                     ( +-  0.21% )</span><br><span class="line">        0    L1-dcache-prefetch-misses</span><br><span class="line">      3973    L1-icache-load-misses                     ( +-  0.60% )</span><br><span class="line"></span><br><span class="line">   0.000320526 seconds time elapsed                      ( +-  1.22% )</span><br></pre></td></tr></table></figure><table><thead><tr><th>Quiz#3</th><th>recursive</th><th>iterative</th></tr></thead><tbody><tr><td>執行時間</td><td>0.000320526</td><td>0.000489711</td></tr><tr><td>cache-misses</td><td>65</td><td>65</td></tr><tr><td>時間複雜度</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h2 id="4"><a href="#4" class="headerlink" title="#4"></a>#4</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</span><br><span class="line">For example, given the array [-2, 1, -3, 4, -1, 2, 1, -5, 4], the contiguous subarray [4, -1, 2, 1] has the largest sum 6.</span><br><span class="line">請寫出合法的 C 程式 : int maxSubArray(int A[], int n) &#123; … &#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="Recursive-2"><a href="#Recursive-2" class="headerlink" title="Recursive"></a>Recursive</h3><ul><li>採用Divide&amp;Conquer方法，把完整陣列分成兩半，最大值的區間分為以下三種情形：<ul><li>最大值陣列在完整陣列的左半部分：<ul><li>解法：直接遞歸然後</li></ul></li><li>最大值陣列在完整陣列的右半部分<ul><li>解法：直接遞歸然後</li></ul></li><li>最大值陣列穿過中點左右陣列都有<ul><li>解法：以陣列中心點為初始，向左右延伸求和後遞歸</li></ul></li></ul></li><li>然後將這三種情形的值做比較即可</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Across_mid</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>,</span><br><span class="line">    lsum = a[mid], i;</span><br><span class="line">  <span class="keyword">for</span> ( i = mid; i &gt;= left; i-- ) &#123;</span><br><span class="line">    sum += a[i];</span><br><span class="line">    lsum = sum&gt;lsum?sum:lsum;</span><br><span class="line">  &#125;</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> rsum = a[mid];</span><br><span class="line">  <span class="keyword">for</span> ( i = mid+<span class="number">1</span>; i &lt;=right; i++ ) &#123;</span><br><span class="line">    sum += a[i];</span><br><span class="line">    rsum = sum&gt;rsum?sum:rsum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lsum+rsum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(left == right) &#123;</span><br><span class="line">    <span class="keyword">return</span> a[left];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> max3(</span><br><span class="line">        maxArray(a, left, mid),</span><br><span class="line">        maxArray(a, mid+<span class="number">1</span>, right),</span><br><span class="line">        Across_mid(a, left, mid, right)</span><br><span class="line">      );</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> maxArray(a, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="Iterative-2"><a href="#Iterative-2" class="headerlink" title="Iterative"></a>Iterative</h3><ul><li>從頭開始累加陣列中元素的和，如果之前的和是負數則拋棄之前的和從該元素開始重頭加，記錄下和最大的那個值便是答案</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> max = a[<span class="number">0</span>], sum = a[<span class="number">0</span>], i;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; size; i++ ) &#123;</span><br><span class="line">    sum = sum + a[i] &gt; a[i] ? sum + a[i]: a[i];</span><br><span class="line">    max = max &gt; sum ? max : sum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Performance-2"><a href="#Performance-2" class="headerlink" title="Performance"></a>Performance</h3><ul><li><code>echo &quot;echo 3 &gt; /proc/sys/vm/drop_caches&quot; | sudo sh </code></li><li><code>perf stat -r 100 -e cache-misses,cache-references,L1-dcache-load-misses,L1-dcache-store-misses,L1-dcache-prefetch-misses,L1-icache-load-misses ./iterative</code>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Performance counter stats <span class="keyword">for</span> <span class="string">&#x27;./iterative&#x27;</span> (100 runs):</span><br><span class="line">       43    cache-misses        <span class="comment">#   0.487 % of all cache refs    ( +- 10.54% )</span></span><br><span class="line">      8817    cache-references                        ( +-  0.63% )</span><br><span class="line">      9657    L1-dcache-load-misses                     ( +-  0.21% )</span><br><span class="line">      4250    L1-dcache-store-misses                     ( +-  0.22% )</span><br><span class="line">        0    L1-dcache-prefetch-misses</span><br><span class="line">      3736    L1-icache-load-misses                     ( +-  0.75% )</span><br><span class="line">   0.000440431 seconds time elapsed                      ( +- 35.40% )</span><br><span class="line"> </span><br><span class="line">Performance counter stats <span class="keyword">for</span> <span class="string">&#x27;./recursive&#x27;</span> (100 runs):</span><br><span class="line">       40    cache-misses        <span class="comment">#   0.457 % of all cache refs    ( +-  8.53% )</span></span><br><span class="line">      8819    cache-references                        ( +-  0.76% )</span><br><span class="line">      9586    L1-dcache-load-misses                     ( +-  0.24% )</span><br><span class="line">      4224    L1-dcache-store-misses                     ( +-  0.26% )</span><br><span class="line">        0    L1-dcache-prefetch-misses</span><br><span class="line">      3674    L1-icache-load-misses                     ( +-  0.85% )</span><br><span class="line">   0.000423999 seconds time elapsed                      ( +- 34.31% )</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>Quiz#4</th><th>recursive</th><th>iterative</th></tr></thead><tbody><tr><td>執行時間</td><td>0.000423999</td><td>0.000440431</td></tr><tr><td>cache-misses</td><td>40</td><td>43</td></tr><tr><td>時間複雜度</td><td>O(nlogn)</td><td>O(n)</td></tr></tbody></table><h2 id="觀看《進擊的鼓手》"><a href="#觀看《進擊的鼓手》" class="headerlink" title="觀看《進擊的鼓手》"></a>觀看《進擊的鼓手》</h2><p>剛看完《進擊的鼓手》，首先，我愛Jazz。</p><p>其次，這部影片討論的是超於自我的主題，很壓抑，但這不是音樂的本質，音樂是帶給人快樂、抒發情感的語言，所以聽首經典的《<a href="https://www.youtube.com/watch?v=NXKYTJHnqvw">All of me</a>》換一下心情~</p><p>電影可以討論的真的太多，所以還是切回到Embedded2015這門課吧。</p><p>上學期第一次上課時受到極大的衝擊，從知識本身的深度到思考問題的方式，發現自己學的太淺、想的太淺；接著暑期去台北實習，真正面對一堆資深工程師時，發現自己與他們的差距，也是令自己驚訝不已。</p><p>回歸到這學期的課程，單純從心態和認知上已經得到改變，其實對上課是一件很期待的事情。無論是學習使用GProf、Perf等工具量化效能（一直以來都是聽定性的東西太多了）還是今天看到一個compiler是如何做的，這都讓人興奮。我喜歡從無到有的這個創造的過程，並且在知道自己和資工背景（無論好壞至少背景課程的基本概念他們都考試學/背過）的同學的差距時，學到這樣的東西會有大補的快感。</p><p>綜上，這半年多來，接受了很多衝擊，但和電影不同，我沒那麼玻璃心，老師也沒那麼苛刻，我們一直認可超越自己、有進步就是賺。電影里的男主角後面追求的東西似乎變了質，不是音樂帶來的快樂本身，而是親情被孤立更想得到親人們的關注而想成功。在我看來，來學嵌入式純粹是對電腦科學的這個領域的喜愛，從大學到現在，動力也是來源於此，不然我就去中國石油行業值班爽爽過公務員的生活了。</p><p>最後，關於追求卓越，我覺得是超越自我的某個較遠的階段，當我能更好地管理自己的時間、處理自己的各種情緒時，效率會越來越高，到那個比較ready的時候，應該就是會追求卓越了吧！</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>官網<a href="https://leetcode.com/problemset/algorithms/">Leetcode Algorithms of Problemset</a>，簡短的<a href="http://coolshell.cn/articles/12052.html">介紹</a></li><li>經典《<a href="https://github.com/esbanarango/Competitive-Programming/blob/master/%C2%B7Documentation/Books/Introduction.to.Algorithms.3rd.Edition.Sep.2010.pdf">Introduction to algorithms</a>》</li><li>一個簡中的題解《<a href="https://www.gitbook.com/book/siddontang/leetcode-solution/details">LeetCode题解</a>》</li><li>《<a href="http://www.cs.uofs.edu/~mccloske/courses/cmps144/recursion_feb13_01.html">Recursive solutions to array problems: Three examples</a>》</li><li>《<a href="http://groups.csail.mit.edu/graphics/classes/6.837/F04/cpp_notes/stack1.html">Stack Implementation in C</a>》</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2019/watching-notes-revolution-os/&quot;&gt;嵌入式笔记&lt;/a&gt;第六篇，原文写于2015年。&lt;/p&gt;
&lt;p&gt;几乎所有候选人都问过我，进微软是不是要刷题，而我总是不厌其烦地告诉他们，我没刷题就进来了（在阿里疯狂996，享不尽福报，哪里还有时间刷题😅）。&lt;/p&gt;
&lt;p&gt;嵌入式课程的LeetCode作业应该是我到目前为止仅有的“刷题”经验。Jserv的本意也不是让学生刷题型，而是通过几道算法题对比递归和迭代结构关于程序的性能差异，此外每题要求写出递归和迭代版本对思维能力的提升也是显而易见的。在此与大家分享:)&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system course" scheme="https://blog.joouis.com/tags/embedded-system-course/"/>
    
    <category term="performance" scheme="https://blog.joouis.com/tags/performance/"/>
    
    <category term="cache" scheme="https://blog.joouis.com/tags/cache/"/>
    
    <category term="leetcode" scheme="https://blog.joouis.com/tags/leetcode/"/>
    
    <category term="recursion" scheme="https://blog.joouis.com/tags/recursion/"/>
    
    <category term="iteration" scheme="https://blog.joouis.com/tags/iteration/"/>
    
  </entry>
  
  <entry>
    <title>2020 微软内推，已协助超过十余位候选人拿到 offer</title>
    <link href="https://blog.joouis.com/2020/2020-referral-kickoff/"/>
    <id>https://blog.joouis.com/2020/2020-referral-kickoff/</id>
    <published>2020-01-08T13:32:10.000Z</published>
    <updated>2020-01-08T13:32:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>时间真的过得太快，一眨眼一年就过了。</p><p>从2018年末尾到现在，我一共协助超过十位候选人拿到offer，其中绝大部分已经入职或即将入职。除了这少部分候选人外，给我发简历咨询、被劝退、被内推但挂掉的朋友，虽然结果不一定尽如人意，但应该多少也会有些收获。面对所有候选人，我尽力做到对自己的要求——尊重、真诚和专业。</p><a id="more"></a><p>回顾过去一年自己最满意的一点是坚持通过邮件与候选人沟通，除仪式感外，邮件的专注度相比微信有很大的优势，通过邮件沟通大家都可以先想清楚要说什么，从而减少很多无效沟通。当然微信也有其优势所在，对候选人来说沟通成本可能更低、响应速度更快，很佩服其他几位同事以及HR们能高效使用微信，我作为强迫症患者还是算了吧😂</p><p>过去一年做的不足之处是没能完全履行24小时内回复的承诺，打破了大概十几次，包括漏掉了少量邮件，通常是在工作比较忙的情况下。解决办法不难，自动给自己每天预约一段时间查看邮件，定期回溯过往的邮件。另外有少量邮件我看到但未回复是因为信息量太少，有的可能忘了放简历、LinkedIn链接，构不成一次对话，我就佛系跳过了。向晚回复、漏回复、没回复的朋友表示抱歉！</p><p>2020继续内推的“副业”，本质上还是因为帮助到别人很开心，我在微软工作很开心并愿意帮助微软发展壮大。同时自己作为一名面试官，深知招人不易，能在内推这个“上游”环节做点事情、认识些新朋友，也是乐事一桩。我还是保持真诚且佛系的态度，把该说的都说了，有新消息就更新博客、置顶本帖，随后的事就随缘了。去年开始计划一年只发一帖，信息的聚合远比大量更新却重复冗余有价值，时间成本也是额外开销。</p><p>最后照例贴上一些过往的资讯，麻烦有意走内推的朋友们先看看，肯定不亏，沟通起来也更快捷。</p><ul><li><a href="https://blog.joouis.com/recruit/">我的内推博文</a>，个人内推“门户”，有微软中国的基本环境介绍、内推流程介绍以及最新的职位，知乎有份copy就不贴了</li><li><a href="https://blog.joouis.com/2019/a-thought-of-referral/">内推心得</a>，详细介绍了内推、面试的流程</li><li><a href="https://www.v2ex.com/t/562136">2019年V站内推帖</a>，超过3万次点击，269人收藏，170条回复</li><li>其他同事的内推帖，有的其实写得不错，有些干货，相信善用搜索的你们也不会错过</li></ul><br /><p><strong>2020我们一起继续努力，技术、工作、生活总会越来越好。能在贩卖鸡汤和焦虑的年代找回内心的一点平静，可能是最为难得和宝贵的事情。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;时间真的过得太快，一眨眼一年就过了。&lt;/p&gt;
&lt;p&gt;从2018年末尾到现在，我一共协助超过十位候选人拿到offer，其中绝大部分已经入职或即将入职。除了这少部分候选人外，给我发简历咨询、被劝退、被内推但挂掉的朋友，虽然结果不一定尽如人意，但应该多少也会有些收获。面对所有候选人，我尽力做到对自己的要求——尊重、真诚和专业。&lt;/p&gt;</summary>
    
    
    
    <category term="技术人生谈" scheme="https://blog.joouis.com/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F%E8%B0%88/"/>
    
    
    <category term="work" scheme="https://blog.joouis.com/tags/work/"/>
    
    <category term="referral" scheme="https://blog.joouis.com/tags/referral/"/>
    
    <category term="recruit" scheme="https://blog.joouis.com/tags/recruit/"/>
    
    <category term="microsoft" scheme="https://blog.joouis.com/tags/microsoft/"/>
    
    <category term="feedback" scheme="https://blog.joouis.com/tags/feedback/"/>
    
    <category term="review" scheme="https://blog.joouis.com/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>Prefetcher小练习</title>
    <link href="https://blog.joouis.com/2020/lab-prefetch-intro/"/>
    <id>https://blog.joouis.com/2020/lab-prefetch-intro/</id>
    <published>2020-01-06T10:20:02.000Z</published>
    <updated>2020-01-06T10:20:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2019/watching-notes-revolution-os/">嵌入式笔记</a>第六篇，原文写于2015年。</p><a id="more"></a><h1 id="作業要求-B"><a href="#作業要求-B" class="headerlink" title="作業要求 (B)"></a><strong>作業要求</strong> <strong>(B)</strong></h1><ul><li>閱讀 Week #8 <a href="https://embedded2015.hackpad.com/ep/pad/static/7ZSsa98cSKw">效能分析: Prefetching</a> 提到的論文: “<a href="http://www.cc.gatech.edu/~hyesoon/lee_taco12.pdf">When</a><a href="http://www.cc.gatech.edu/~hyesoon/lee_taco12.pdf"> Prefetching Works, When It Doesn’t, and Why</a>”，在 Linux/x86_64 (注意，要用 64-bit 系統，不能透過虛擬機器執行) 上編譯並執行 <a href="https://github.com/embedded2015/prefetcher">prefetcher</a>(<a href="https://www.facebook.com/notes/champ-yen/the-power-of-prefetching/1214833498543546">source</a>)<ul><li>說明 naive_transpose, sse_transpose, sse_prefetch_transpose 之間的效能差異，以及 prefetcher 對 cache 的影響</li></ul></li><li>在 github 上 fork <a href="https://github.com/embedded2015/prefetcher">prefetcher</a>，嘗試用 AVX 進一步提昇效能<ul><li>修改 Makefile，產生新的執行檔，分別對應於 naive_transpose, sse_transpose, sse_prefetch_transpose (學習 Homework #2 的做法)</li><li>用 perf 分析 cache miss/hit</li><li>參考 <a href="http://arxiv.org/pdf/1211.0820.pdf">Performance of SSE and AVX Instruction Sets</a>，用 SSE/AVX intrinsic 來改寫程式碼</li><li>詳細描述實驗設計，以及你的觀察</li></ul></li><li>建立新的 Hackpad，列於「<a href="https://paper.dropbox.com/doc/k9zCX0UmNzKYIPtcXMlnD">+作業區</a>」，需要標注「開發紀錄 (B)」</li></ul><h1 id="Learn-prefetcher"><a href="#Learn-prefetcher" class="headerlink" title="Learn prefetcher"></a>Learn prefetcher</h1><ul><li>先分析一下原始碼，首先是naive_transpose，其實現最簡單的矩陣轉置想法，從矩陣的左上角第一個元素開始，把舊矩陣中的元素按轉置後的順序存入新的矩陣中</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">naive_transpose</span><span class="params">(<span class="keyword">int</span> *src, <span class="keyword">int</span> *dst, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; w; x++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; h; y++)&#123;</span><br><span class="line">             *(dst + x*h + y) = *(src + y*w + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接著sse_prefetch_transpose，使用了Intel處理器SIMD的技術，在<a href="https://paper.dropbox.com/doc/qrEPXoXETqtGUHyPua3tl">+Week#1</a>有做簡單的整理，簡單說就是一次將4筆資料放入sse暫存器中，執行一條指令就可以完成4筆資料處理。<br>具體實現的過程參考了文章<a href="https://randombit.net/bitbashing/posts/integer_matrix_transpose_in_sse2.html">Programming trivia: 4x4 integer matrix transpose in SSE2</a>。<ul><li>SSE指令的格式：<br><img src="https://idoc9g.bn.files.1drv.com/y4m9bN43kHK5gLhfzVqwQeWXHEafixrMU2j8LWuwyHH51gxPNE69jrdp2XJTuwigzllW5jiCb3s1hWj637DFbmBgq_UkKgIHI20cUGonOwWF3e0wKuWVjrWqLxuCNL0ol0u4jkeFgyPYo86njZir6KJWqlPHW9pLM-crLDuZbyxkyL02Y3rjqa9HCVBKXmJFuksBe08HFC1QdgdchSYmVtCxA?width=563&height=253&cropmode=none"></li><li><a href="https://msdn.microsoft.com/en-us/library/x8atst9d(v=vs.90).aspx">_mm_unpacklo_epi32(I0, I1)</a>讀入兩個128位暫存器後會使用他們的2個低32位值，返回[a0, b0, a1, b1]，_mm_unpackhi_epi32同理，而_mm_unpacklo_epi64則是一次取64位</li></ul></li><li>這種方法的效能改進在：<ul><li>一條指令處理4筆數據，要比4筆數據4條指令處理快</li><li>loop unrolling：<ul><li>執行loop循環的組合語言代碼執行次數會變少</li><li>branch prediction miss機率降低</li><li>Wikipedia還提到如果數據沒有相依性有機會使用並行處理，在這裡SIMD已經實現</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sse_transpose</span><span class="params">(<span class="keyword">int</span> *src, <span class="keyword">int</span> *dst, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; w; x+=<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; h; y+=<span class="number">4</span>)&#123;</span><br><span class="line">            __m128i I0 = _mm_loadu_si128 ((__m128i*)(src+y*w+x));</span><br><span class="line">            __m128i I1 = _mm_loadu_si128 ((__m128i*)(src+(y+<span class="number">1</span>)*w+x));</span><br><span class="line">            __m128i I2 = _mm_loadu_si128 ((__m128i*)(src+(y+<span class="number">2</span>)*w+x));</span><br><span class="line">            __m128i I3 = _mm_loadu_si128 ((__m128i*)(src+(y+<span class="number">3</span>)*w+x));</span><br><span class="line">            __m128i T0 = _mm_unpacklo_epi32(I0, I1);</span><br><span class="line">            __m128i T1 = _mm_unpacklo_epi32(I2, I3);</span><br><span class="line">            __m128i T2 = _mm_unpackhi_epi32(I0, I1);</span><br><span class="line">            __m128i T3 = _mm_unpackhi_epi32(I2, I3);</span><br><span class="line">            I0 = _mm_unpacklo_epi64(T0, T1);</span><br><span class="line">            I1 = _mm_unpackhi_epi64(T0, T1);</span><br><span class="line">            I2 = _mm_unpacklo_epi64(T2, T3);</span><br><span class="line">            I3 = _mm_unpackhi_epi64(T2, T3);</span><br><span class="line">            _mm_storeu_si128((__m128i*)(dst+(x*h)+y), I0);</span><br><span class="line">            _mm_storeu_si128((__m128i*)(dst+((x+<span class="number">1</span>)*h)+y), I1);</span><br><span class="line">            _mm_storeu_si128((__m128i*)(dst+((x+<span class="number">2</span>)*h)+y), I2);</span><br><span class="line">            _mm_storeu_si128((__m128i*)(dst+((x+<span class="number">3</span>)*h)+y), I3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最後是sse_prefetch_transpose，相比sse_transpose多使用了4次<a href="https://msdn.microsoft.com/en-us/library/84szxsww(v=vs.90).aspx">_mm_prefetch</a>指令<ul><li><code>void _mm_prefetch(char * p , int i )</code> 會將地址p的數據加載到cache的一條cache line，int i有_MM_HINT_T0, _MM_HINT_T1, _MM_HINT_T2和_MM_HINT_NTA共4種，表示了不同的prefetch方式：<ul><li>T0 - T2對應了L1 - L3 caches，NTA表示加載數據在L1 cache并標記為首先被替換的</li><li>實際將T1替換為T0和T2運行程式，運行的時間區別不大，可能是測量的方式不精准</li></ul></li></ul></li><li> 為什麼PFDIST要設為8？實際運行結果是PFDIST＝4比PFDIST＝8平均慢10000us左右</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sse_prefetch_transpose</span><span class="params">(<span class="keyword">int</span> *src, <span class="keyword">int</span> *dst, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; w; x+=<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; h; y+=<span class="number">4</span>)&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFDIST  8</span></span><br><span class="line"> </span><br><span class="line">            _mm_prefetch(src+(y+PFDIST)*w+x, _MM_HINT_T1);</span><br><span class="line">            _mm_prefetch(src+(y+PFDIST+<span class="number">1</span>)*w+x, _MM_HINT_T1);</span><br><span class="line">            _mm_prefetch(src+(y+PFDIST+<span class="number">2</span>)*w+x, _MM_HINT_T1);</span><br><span class="line">            _mm_prefetch(src+(y+PFDIST+<span class="number">3</span>)*w+x, _MM_HINT_T1);</span><br><span class="line"> </span><br><span class="line">            __m128i I0 = _mm_loadu_si128 ((__m128i*)(src+y*w+x));</span><br><span class="line">            __m128i I1 = _mm_loadu_si128 ((__m128i*)(src+(y+<span class="number">1</span>)*w+x));</span><br><span class="line">            __m128i I2 = _mm_loadu_si128 ((__m128i*)(src+(y+<span class="number">2</span>)*w+x));</span><br><span class="line">            __m128i I3 = _mm_loadu_si128 ((__m128i*)(src+(y+<span class="number">3</span>)*w+x));</span><br><span class="line">            __m128i T0 = _mm_unpacklo_epi32(I0, I1);</span><br><span class="line">            __m128i T1 = _mm_unpacklo_epi32(I2, I3);</span><br><span class="line">            __m128i T2 = _mm_unpackhi_epi32(I0, I1);</span><br><span class="line">            __m128i T3 = _mm_unpackhi_epi32(I2, I3);</span><br><span class="line">            I0 = _mm_unpacklo_epi64(T0, T1);</span><br><span class="line">            I1 = _mm_unpackhi_epi64(T0, T1);</span><br><span class="line">            I2 = _mm_unpacklo_epi64(T2, T3);</span><br><span class="line">            I3 = _mm_unpackhi_epi64(T2, T3);</span><br><span class="line">            _mm_storeu_si128((__m128i*)(dst+(x*h)+y), I0);</span><br><span class="line">            _mm_storeu_si128((__m128i*)(dst+((x+<span class="number">1</span>)*h)+y), I1);</span><br><span class="line">            _mm_storeu_si128((__m128i*)(dst+((x+<span class="number">2</span>)*h)+y), I2);</span><br><span class="line">            _mm_storeu_si128((__m128i*)(dst+((x+<span class="number">3</span>)*h)+y), I3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reproduce-Prefetcher-by-using-AVX"><a href="#Reproduce-Prefetcher-by-using-AVX" class="headerlink" title="Reproduce Prefetcher by using AVX"></a>Reproduce Prefetcher by using AVX</h1><h4 id="修改Makefile執行檔"><a href="#修改Makefile執行檔" class="headerlink" title="修改Makefile執行檔"></a>修改Makefile執行檔</h4><ul><li>在這裡使用了gcc -D來定義了兩個宏，一個”&quot;$@.h&quot;“用在<code>#include</code>時可以找到對應的頭文件，另一個”&quot;$@&quot;“是在printf時輸出對應的版本名稱</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS = -msse2 --std gnu99 -O0 -Wall</span><br><span class="line">EXEC = naive_transpose sse_transpose sse_prefetch_transpose</span><br><span class="line"><span class="section">all: <span class="variable">$(EXEC)</span> format</span></span><br><span class="line">SRCS_common = main.c</span><br><span class="line"><span class="section">naive_transpose:</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -DIMPL=<span class="string">&quot;\&quot;<span class="variable">$@</span>.h\&quot;&quot;</span> -DSTR=<span class="string">&quot;\&quot;<span class="variable">$@</span>\&quot;&quot;</span> -o <span class="variable">$@</span> <span class="variable">$(SRCS_common)</span> <span class="variable">$@</span>.c</span><br><span class="line"><span class="section">sse_transpose:</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -DIMPL=<span class="string">&quot;\&quot;<span class="variable">$@</span>.h\&quot;&quot;</span> -DSTR=<span class="string">&quot;\&quot;<span class="variable">$@</span>\&quot;&quot;</span> -o <span class="variable">$@</span> <span class="variable">$(SRCS_common)</span> <span class="variable">$@</span>.c</span><br><span class="line"><span class="section">sse_prefetch_transpose:</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> -DIMPL=<span class="string">&quot;\&quot;<span class="variable">$@</span>.h\&quot;&quot;</span> -DSTR=<span class="string">&quot;\&quot;<span class="variable">$@</span>\&quot;&quot;</span> -o <span class="variable">$@</span> <span class="variable">$(SRCS_common)</span> <span class="variable">$@</span>.c</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        <span class="variable">$(RM)</span> <span class="variable">$(EXEC)</span> perf.*</span><br><span class="line"><span class="section">format:</span></span><br><span class="line">        astyle --style=kr --indent=spaces=4 --indent-switches --suffix=none *.[ch]</span><br><span class="line"><span class="section">run: <span class="variable">$(EXEC)</span></span></span><br><span class="line">        ./naive_transpose</span><br><span class="line">        ./sse_transpose</span><br><span class="line">        ./sse_prefetch_transpose</span><br><span class="line">        make clean</span><br></pre></td></tr></table></figure><h4 id="使用Perf分析cache-miss-hit"><a href="#使用Perf分析cache-miss-hit" class="headerlink" title="使用Perf分析cache miss/hit"></a>使用Perf分析cache miss/hit</h4><ul><li>在運行Perf之前將main.c中的test part和打印全部刪掉，排除額外的程式碼以增加cache測量的準確率</li><li><code>echo &quot;echo 1 &gt; /proc/sys/vm/drop_caches&quot; | sudo sh</code><br><code>perf stat -r 100 -e cache-misses,cache-references,L1-dcache-load-misses,L1-dcache-store-misses,L1-dcache-prefetch-misses,L1-icache-load-misses ./phonebook_orig</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Performance counter stats for &#x27;./naive_transpose&#x27; (100 runs):</span><br><span class="line">          16857556      cache-misses     # 93.608 % of all cache refs      ( +-  0.06% )</span><br><span class="line">          18008720      cache-references           ( +-  0.01% )</span><br><span class="line">          21069717      L1-dcache-load-misses      ( +-  0.00% )</span><br><span class="line">           4255304      L1-dcache-store-misses     ( +-  0.00% )</span><br><span class="line">                 0      L1-dcache-prefetch-misses                                   </span><br><span class="line">             24305      L1-icache-load-misses      ( +-  0.46% )</span><br><span class="line">       0.352085215 seconds time elapsed            ( +-  0.04% )</span><br><span class="line"> </span><br><span class="line"> Performance counter stats for &#x27;./sse_transpose&#x27; (100 runs):</span><br><span class="line">           4334609      cache-misses              #   79.424 % of all cache refs      ( +-  0.03% )</span><br><span class="line">           5457532      cache-references                                              ( +-  0.02% )</span><br><span class="line">           8516824      L1-dcache-load-misses                                         ( +-  0.01% )</span><br><span class="line">           4292592      L1-dcache-store-misses                                        ( +-  0.03% )</span><br><span class="line">                 0      L1-dcache-prefetch-misses                                   </span><br><span class="line">             27101      L1-icache-load-misses                                         ( +-  0.37% )</span><br><span class="line">       0.242525082 seconds time elapsed                                          ( +-  0.04% )</span><br><span class="line"> </span><br><span class="line"> Performance counter stats for &#x27;./sse_prefetch_transpose&#x27; (100 runs):</span><br><span class="line">           4346864      cache-misses              #   79.615 % of all cache refs      ( +-  0.03% )</span><br><span class="line">           5459859      cache-references                                              ( +-  0.02% )</span><br><span class="line">           8533348      L1-dcache-load-misses                                         ( +-  0.02% )</span><br><span class="line">           4308308      L1-dcache-store-misses                                        ( +-  0.05% )</span><br><span class="line">                 0      L1-dcache-prefetch-misses                                   </span><br><span class="line">             24590      L1-icache-load-misses                                         ( +-  0.29% )</span><br><span class="line">       0.184224127 seconds time elapsed                                          ( +-  0.08% )</span><br></pre></td></tr></table></figure><h4 id="參考-Performance-of-SSE-and-AVX-Instruction-Sets，用-SSE-AVX-intrinsic-來改寫程式碼"><a href="#參考-Performance-of-SSE-and-AVX-Instruction-Sets，用-SSE-AVX-intrinsic-來改寫程式碼" class="headerlink" title="參考 Performance of SSE and AVX Instruction Sets，用 SSE/AVX intrinsic 來改寫程式碼"></a>參考 <a href="http://arxiv.org/pdf/1211.0820.pdf">Performance of SSE and AVX Instruction Sets</a>，用 SSE/AVX intrinsic 來改寫程式碼</h4><ul><li>兩份參考文件：<ul><li><a href="https://software.intel.com/sites/default/files/m/d/4/1/d/8/Intro_to_Intel_AVX.pdf">Introduction to Intel® Advanced Vector Extensions</a> 介紹了基本的AVX指令以及使用範例</li><li><a href="https://software.intel.com/sites/default/files/managed/07/b7/319433-023.pdf">Intel® Architecture Instruction Set Extensions Programming Reference</a>，2015/08最新的文件，介紹了AVX-512指令集，目前支援的CPU僅有Xeon Phi Knights Landing, Xeon Skylake, Cannonlake</li><li>關於avx的intrinsic函式指令調用<a href="https://software.intel.com/zh-cn/node/582950">Intrinsics for Intel® Advanced Vector Extensions</a></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> x = <span class="number">0</span>; x &lt; w; x += <span class="number">8</span> ) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> y = <span class="number">0</span>; y &lt; h; y += <span class="number">8</span> ) &#123;</span><br><span class="line">        __m256i I0 = _mm256_loadu_si256((__m256i *)(src + (y + <span class="number">0</span>) * w + x));</span><br><span class="line">        __m256i I1 = _mm256_loadu_si256((__m256i *)(src + (y + <span class="number">1</span>) * w + x));</span><br><span class="line">        __m256i I2 = _mm256_loadu_si256((__m256i *)(src + (y + <span class="number">2</span>) * w + x));</span><br><span class="line">        __m256i I3 = _mm256_loadu_si256((__m256i *)(src + (y + <span class="number">3</span>) * w + x));</span><br><span class="line">        __m256i I4 = _mm256_loadu_si256((__m256i *)(src + (y + <span class="number">4</span>) * w + x));</span><br><span class="line">        __m256i I5 = _mm256_loadu_si256((__m256i *)(src + (y + <span class="number">5</span>) * w + x));</span><br><span class="line">        __m256i I6 = _mm256_loadu_si256((__m256i *)(src + (y + <span class="number">6</span>) * w + x));</span><br><span class="line">        __m256i I7 = _mm256_loadu_si256((__m256i *)(src + (y + <span class="number">7</span>) * w + x));</span><br><span class="line"></span><br><span class="line">        __m256i T0 = _mm256_unpacklo_epi32(I0, I1);</span><br><span class="line">        __m256i T1 = _mm256_unpackhi_epi32(I0, I1);</span><br><span class="line">        __m256i T2 = _mm256_unpacklo_epi32(I2, I3);</span><br><span class="line">        __m256i T3 = _mm256_unpackhi_epi32(I2, I3);</span><br><span class="line">        __m256i T4 = _mm256_unpacklo_epi32(I4, I5);</span><br><span class="line">        __m256i T5 = _mm256_unpackhi_epi32(I4, I5);</span><br><span class="line">        __m256i T6 = _mm256_unpacklo_epi32(I6, I7);</span><br><span class="line">        __m256i T7 = _mm256_unpackhi_epi32(I6, I7);</span><br><span class="line"></span><br><span class="line">        I0 = _mm256_unpacklo_epi64(T0, T2);</span><br><span class="line">        I1 = _mm256_unpackhi_epi64(T0, T2);</span><br><span class="line">        I2 = _mm256_unpacklo_epi64(T1, T3);</span><br><span class="line">        I3 = _mm256_unpackhi_epi64(T1, T3);</span><br><span class="line">        I4 = _mm256_unpacklo_epi64(T4, T6);</span><br><span class="line">        I5 = _mm256_unpackhi_epi64(T4, T6);</span><br><span class="line">        I6 = _mm256_unpacklo_epi64(T5, T7);</span><br><span class="line">        I7 = _mm256_unpackhi_epi64(T5, T7);</span><br><span class="line"></span><br><span class="line">        T0 = _mm256_permute2x128_si256(I0, I4, <span class="number">0x20</span>);</span><br><span class="line">        T1 = _mm256_permute2x128_si256(I1, I5, <span class="number">0x20</span>);</span><br><span class="line">        T2 = _mm256_permute2x128_si256(I2, I6, <span class="number">0x20</span>);</span><br><span class="line">        T3 = _mm256_permute2x128_si256(I3, I7, <span class="number">0x20</span>);</span><br><span class="line">        T4 = _mm256_permute2x128_si256(I0, I4, <span class="number">0x31</span>);</span><br><span class="line">        T5 = _mm256_permute2x128_si256(I1, I5, <span class="number">0x31</span>);</span><br><span class="line">        T6 = _mm256_permute2x128_si256(I2, I6, <span class="number">0x31</span>);</span><br><span class="line">        T7 = _mm256_permute2x128_si256(I3, I7, <span class="number">0x31</span>);</span><br><span class="line"></span><br><span class="line">        _mm256_storeu_si256((__m256i *)(dst + ((x + <span class="number">0</span>) * h) + y), T0);</span><br><span class="line">        _mm256_storeu_si256((__m256i *)(dst + ((x + <span class="number">1</span>) * h) + y), T1);</span><br><span class="line">        _mm256_storeu_si256((__m256i *)(dst + ((x + <span class="number">2</span>) * h) + y), T2);</span><br><span class="line">        _mm256_storeu_si256((__m256i *)(dst + ((x + <span class="number">3</span>) * h) + y), T3);</span><br><span class="line">        _mm256_storeu_si256((__m256i *)(dst + ((x + <span class="number">4</span>) * h) + y), T4);</span><br><span class="line">        _mm256_storeu_si256((__m256i *)(dst + ((x + <span class="number">5</span>) * h) + y), T5);</span><br><span class="line">        _mm256_storeu_si256((__m256i *)(dst + ((x + <span class="number">6</span>) * h) + y), T6);</span><br><span class="line">        _mm256_storeu_si256((__m256i *)(dst + ((x + <span class="number">7</span>) * h) + y), T7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AVX指令集是256-bit，所以這裡一次處理8個byte，loop一次加8</li><li>首先將依次將8行數組的元素載入到暫存器中</li><li><code>_mm256_unpacklo/hi_epi32</code>函式讀入兩個256-bit的數，將低/高128-bit以32-bit為單位交錯排列，舉例：<br><code>__m256i A = [ A0, A1, A2, A3, A4, A5, A6, A7 ];</code><br><code>__m256i B = [ B0, B1, B2, B3, B4, B5, B6, B7 ];</code><br><code>__m256i C = _mm256_unpacklo_epi32(I0, I1) = [ A0, B0, A1, B1, A2, B2, A3, B3 ];</code></li><li><code>_mm256_unpacklo_epi64</code>同理</li><li>以下對比了sse、avx共4個版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Performance counter stats for &#x27;./sse_transpose&#x27; (100 runs):</span><br><span class="line">           4329716      cache-misses      #   79.312 % of all cache refs ( +-  0.03% )</span><br><span class="line">           5459067      cache-references    ( +-  0.02% )</span><br><span class="line">           8514863      L1-dcache-load-misses    ( +-  0.01% )</span><br><span class="line">           4290179      L1-dcache-store-misses    ( +-  0.03% )</span><br><span class="line">                 0      L1-dcache-prefetch-misses       </span><br><span class="line">             26387      L1-icache-load-misses     ( +-  0.46% )</span><br><span class="line">       0.242315241 seconds time elapsed        ( +-  0.04% )</span><br><span class="line"> </span><br><span class="line"> Performance counter stats for &#x27;./sse_prefetch_transpose&#x27; (100 runs):</span><br><span class="line">           4345707      cache-misses    #   79.577 % of all cache refs  ( +-  0.03% )</span><br><span class="line">           5460983      cache-references    ( +-  0.02% )</span><br><span class="line">           8532546      L1-dcache-load-misses      ( +-  0.02% )</span><br><span class="line">           4307174      L1-dcache-store-misses    ( +-  0.04% )</span><br><span class="line">                 0      L1-dcache-prefetch-misses                                   </span><br><span class="line">             24769      L1-icache-load-misses     ( +-  0.46% )</span><br><span class="line">       0.184028053 seconds time elapsed        ( +-  0.06% )</span><br><span class="line"> </span><br><span class="line"> Performance counter stats for &#x27;./avx_transpose&#x27; (100 runs):</span><br><span class="line">           3305343      cache-misses   #   74.670 % of all cache refs  ( +-  0.02% )</span><br><span class="line">           4426624      cache-references     ( +-  0.01% )</span><br><span class="line">           8043457      L1-dcache-load-misses    ( +-  0.02% )</span><br><span class="line">           4859334      L1-dcache-store-misses   ( +-  0.02% )</span><br><span class="line">                 0      L1-dcache-prefetch-misses  </span><br><span class="line">             25696      L1-icache-load-misses      ( +-  0.52% )</span><br><span class="line">       0.188154465 seconds time elapsed     ( +-  0.02% )</span><br><span class="line"> </span><br><span class="line"> Performance counter stats for &#x27;./avx_prefetch_transpose&#x27; (100 runs):</span><br><span class="line">           3320332      cache-misses  #   51.121 % of all cache refs ( +-  0.02% )</span><br><span class="line">           6495085      cache-references       ( +-  0.02% )</span><br><span class="line">           8076035      L1-dcache-load-misses    ( +-  0.02% )</span><br><span class="line">           4886925      L1-dcache-store-misses    ( +-  0.02% )</span><br><span class="line">                 0      L1-dcache-prefetch-misses    </span><br><span class="line">             26493      L1-icache-load-misses     ( +-  0.35% )</span><br><span class="line">       0.187412805 seconds time elapsed        ( +-  0.05% )</span><br></pre></td></tr></table></figure><ul><li>從cache-miss來看avx版本有25%左右的提升，從執行時間上單純avx版比sse版有明顯提升，但輸sse_prefetch；而avx的prefetch版與avx原版幾乎無差別，還輸sse_prefetch</li><li>關於prefetch版，<strong>PFDIST</strong>取了8/16/32/64，目前暫取16。看來需要去<a href="http://www.cc.gatech.edu/~hyesoon/lee_taco12.pdf">When Prefetching Works, When It Doesn’t, and Why</a>找答案了</li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="http://www.cc.gatech.edu/~hyesoon/lee_taco12.pdf">When Prefetching Works, When It Doesn’t, and Why</a></li><li><a href="http://arxiv.org/pdf/1211.0820.pdf">Performance of SSE and AVX Instruction Sets</a></li><li><a href="http://www.rapidtables.com/code/linux/gcc/gcc-d.htm">gcc</a><a href="http://www.rapidtables.com/code/linux/gcc/gcc-d.htm"> </a><a href="http://www.rapidtables.com/code/linux/gcc/gcc-d.htm">-D</a></li><li><a href="https://software.intel.com/sites/default/files/m/d/4/1/d/8/Intro_to_Intel_AVX.pdf">Introduction to Intel® Advanced Vector Extensions</a></li><li><a href="https://software.intel.com/sites/default/files/managed/07/b7/319433-023.pdf">Intel® Architecture Instruction Set Extensions Programming Reference</a></li><li><a href="http://www.codeproject.com/Articles/874396/Crunching-Numbers-with-AVX-and-AVX">Crunching Numbers with AVX and AVX2</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2019/watching-notes-revolution-os/&quot;&gt;嵌入式笔记&lt;/a&gt;第六篇，原文写于2015年。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system course" scheme="https://blog.joouis.com/tags/embedded-system-course/"/>
    
    <category term="prefetch" scheme="https://blog.joouis.com/tags/prefetch/"/>
    
    <category term="avx" scheme="https://blog.joouis.com/tags/avx/"/>
    
    <category term="sse" scheme="https://blog.joouis.com/tags/sse/"/>
    
    <category term="streaming SIMD extensions" scheme="https://blog.joouis.com/tags/streaming-SIMD-extensions/"/>
    
    <category term="instruction set" scheme="https://blog.joouis.com/tags/instruction-set/"/>
    
  </entry>
  
  <entry>
    <title>编译器入门小笔记</title>
    <link href="https://blog.joouis.com/2020/lab-compiler-intro/"/>
    <id>https://blog.joouis.com/2020/lab-compiler-intro/</id>
    <published>2020-01-01T08:08:38.000Z</published>
    <updated>2020-01-01T08:08:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2019/watching-notes-revolution-os/">嵌入式笔记</a>第五篇，原文写于2015年。</p><a id="more"></a><h2 id="Week-5-课程"><a href="#Week-5-课程" class="headerlink" title="Week#5 课程"></a>Week#5 课程</h2><ul><li>课程共笔<a href="https://paper.dropbox.com/doc/xsUE7O7d02YlsKydh7Xdp">链接</a></li></ul><h3 id="Steve-Jobs-─-Lost-interview-1995"><a href="#Steve-Jobs-─-Lost-interview-1995" class="headerlink" title="Steve Jobs ─ Lost interview (1995)"></a><a href="https://www.youtube.com/watch?v=6CJMQHLfqUQ"><strong>Steve Jobs ─ Lost interview</strong></a><a href="https://www.youtube.com/watch?v=6CJMQHLfqUQ"> </a><a href="https://www.youtube.com/watch?v=6CJMQHLfqUQ"><strong>(1995)</strong></a></h3><ul><li>“You know, throughout the years in business, <strong>I found something, which I was always ask why you do things, and the answers you inevitably get are</strong> <strong>‘oh</strong> <strong>that’s just the way it’s done’, nobody knows why they do, nobody thinks about things very deeply</strong> in business, that’s what I found.”</li><li>Feeling: Impressive, attractive, passionate</li></ul><h3 id="GNU-Toolchain"><a href="#GNU-Toolchain" class="headerlink" title="GNU Toolchain"></a>GNU Toolchain</h3><p><img src="https://hzoe9g.bn.files.1drv.com/y4m9w--0C21r7BamU_dtV96xC7DR5D_011pshYM7_mvvxydtIW1gSdk6mIwKGBVRU90n6rXEmxK136njHYpC3JotX3i3z1OEUJXf9Deimf-SCg5pLRanOImkriiFigfJSJw5PWhrJpknX3DdUkEBYk5rG0lfCMVvRMg-WZg2WpeOYdbyFgqMyBEOxiv6mUhQWX2KFwMeganzREe9ZE9IPVa6A?width=1161&height=203&cropmode=none"></p><ul><li><p>Procedure: arguments是呼叫函式傳遞的，parameters是被呼叫函式接收到的</p></li><li><p>組語在procedure call如何傳遞參數？<a href="http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042e/IHI0042E_aapcs.pdf">AAPCS</a></p><ul><li>eabi: embedded <a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8E%A5%E5%8F%A3">abi</a></li><li>the sizes, layout, and alignment of data types</li><li>the calling convention, which controls how functions’ arguments are passed and return values retrieved; for example, whether all parameters are passed on the stack or some are passed in registers, which registers are used for which function parameters, and whether the first function parameter passed on the stack is pushed first or last onto the stack</li><li>how an application should make system calls to the operating system and, if the ABI specifies direct system calls rather than procedure calls to system call stubs, the system call numbers and in the case of a complete operating system ABI, the binary format of object files, program libraries and so on.</li></ul></li></ul><p><img src="https://hzod9g.bn.files.1drv.com/y4mcrayOGke8OR_LhPHdSuc2gpBSOYUYRmRxs4bmXMcarA6n3snPGX7L1aytHBOvKgjPfE4S7K5mXUZiLIqdKNj5MhlDMvqJUy8EXP3wM5P0CVL9Mn3xNsragTDMgU4KJyBMepumX42EVPOU9aV5UNCNKsxwBevliFCgezVRyATPruRJ3f-jXo2bDsOqUSmes9kXU611ONE48BcATHpbGMk9A?width=1065&height=749&cropmode=none"></p><ul><li><p><strong>Accessing operands</strong></p><p>通常 procedure 存取 operands 透過以下幾種方式:</p><ul><li>An argument passed on a register : 直接使用暫存器</li><li>An argument passed on the stack : 使用 stack pointer (R13) 的相對定址 (immediate offset)</li><li>A constant : PC-relative addressing</li><li>A local variable : 分配在 stack 上，透過 stack pointer 相對定址方式存取</li><li>A global variable : 分配在 static area (就是樓上圖片的 static data)，透過 static base (R9) 相對定址存取</li></ul></li><li><p>Target triple</p><ul><li>hf: hard float，預設有FPU</li><li>armeb-linux-gnueabihf-*: <a href="http://launchpad.net/gcc-linaro"><strong>Linaro</strong></a> ARMv7 <strong>big-endian Linux GNU EABI HF</strong></li></ul></li></ul><h3 id="Compiler-concepts"><a href="#Compiler-concepts" class="headerlink" title="Compiler concepts"></a>Compiler concepts</h3><ul><li><a href="https://paper.dropbox.com/doc/V5PJzVrvEfJ275Wfj1Ilq">Compiler的多元應用</a></li><li><a href="http://www.slideshare.net/jserv/jit-compiler">Interpreter, Compiler, JIT from scratch</a><ul><li>Turing completeness: a system of data-manipulation rules can be used to simulate any single-taped <a href="https://en.wikipedia.org/wiki/Turing_machine">Turing machine</a>.</li><li>Interpreter：本身是一個可執行檔案，工作就是翻譯并執行輸入的程式碼</li><li>compiler: compile source code to native machine code(ISA, ABI)<ul><li>實作方式是將原始碼翻譯成backend對應的assembly然後打印出來通過stdout存到一個文件(compiler-XX.c)，再用compiler編譯後執行(Makefile實現)</li><li>GAS(GNU Assembler) program format(AT&amp;T)</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> prologue = </span><br><span class="line"><span class="string">&quot;.text\n&quot;</span> </span><br><span class="line"><span class="string">&quot;.global _main\n&quot;</span> </span><br><span class="line"><span class="string">&quot;main:\n&quot;</span> </span><br><span class="line"><span class="string">&quot;    pushq %rbp\n&quot;</span> </span><br><span class="line"><span class="string">&quot;    movq %rsp, %rbp\n&quot;</span> </span><br><span class="line"><span class="string">&quot;    pushq %r12\n&quot;</span> <span class="comment">// store callee saved register </span></span><br><span class="line"><span class="string">&quot;    subq $30008, %rsp\n&quot;</span> <span class="comment">// allocate 30,008 B on stack, and realign </span></span><br><span class="line"><span class="string">&quot;    leaq (%rsp), %rdi\n&quot;</span> <span class="comment">// address of beginning of tape </span></span><br><span class="line"><span class="string">&quot;    movl $0, %esi\n&quot;</span> <span class="comment">// fill with 0&#x27;s </span></span><br><span class="line"><span class="string">&quot;    movq $30000, %rdx\n&quot;</span> <span class="comment">// length 30,000 B </span></span><br><span class="line"><span class="string">&quot;    call memset\n&quot;</span> <span class="comment">// memset </span></span><br><span class="line"><span class="string">&quot;    movq %rsp, %r12&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> epilogue =</span><br><span class="line"><span class="string">&quot;    addq $30008, %rsp\n&quot;</span> <span class="comment">// clean up tape from stack.</span></span><br><span class="line"><span class="string">&quot;    popq %r12\n&quot;</span> <span class="comment">// restore callee saved register</span></span><br><span class="line"><span class="string">&quot;    popq %rbp\n&quot;</span></span><br><span class="line"><span class="string">&quot;    ret\n&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>X64 Calling convention</p><ul><li><a href="http://pubs.opengroup.org/onlinepubs/007904875/basedefs/sys/mman.h.html">sys/mman.h</a>: memory management declarations</li></ul></li></ul><p><img src="https://hzoa9g.bn.files.1drv.com/y4m8DdmNN2dLqOOOtkmEJYhy3Hd4IedX44C-x46ZwdMYH4SYQVv4otM6PDWfxrUqNynl-Q_PzAgE5-cR-S20pGryphoBCIvNfE7YAlj-XS1qz6DY34Pd6Y4lemP1d-4fIA2umx3YQZILsB8YT8INeyo8GxsnGrnr1nbflK6XIosKfpJyWcdjdw7kLK8VP2-ZoDeTJySTdqn0Ag2M57dYHT47Q?width=709&height=940&cropmode=none"></p><ul><li><p><a href="http://blog.linux.org.tw/~jserv/archives/2011/09/_mandelbrot_set.html">Fractals in C</a></p><ul><li><p><a href="https://zh.wikipedia.org/wiki/Complex.h">complex.h</a>: 提供了複數運算所需的巨集定義和函式申明</p></li><li><p>cimag: get imaginary part of a complex number</p></li><li><p>creal: get real part of a complex number</p></li><li><p><a href="http://www.wikihow.com/Plot-the-Mandelbrot-Set-By-Hand">How to Plot the Mandelbrot Set By Hand</a></p></li></ul></li><li><p><a href="http://www.slideshare.net/jserv/vm-construct">Virtual Machine Constructions for Dummies</a></p></li><li><p><a href="http://www.slideshare.net/jserv/how-a-compiler-works-gnu-toolchain">How A Compiler Works: GNU Toolchain</a></p></li></ul><h3 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h3><h4 id="作業要求-B"><a href="#作業要求-B" class="headerlink" title="作業要求 (B)"></a>作業要求 (B)</h4><ul><li><p>難度：中</p></li><li><p>詳讀 <a href="http://www.slideshare.net/jserv/vm-construct">Virtual Machine Constructions for Dummies</a>，改善 Brainf*ck 執行效能</p><ul><li>改善 JIT compiler，加入若干 optimization techniques</li></ul></li><li><p>在 GitHub 上 fork <a href="https://github.com/embedded2015/jit-construct">jit-construct</a></p><ul><li>紀錄若干效能最佳化技巧帶來的提昇</li></ul></li><li><p>建立新的 Hackpad，列在「<a href="https://paper.dropbox.com/doc/cSnReWUgyLPcwiJ3uUIyo">+作業區</a>」</p><ul><li>標注「開發紀錄(B)」</li></ul></li></ul><h4 id="Homework-note"><a href="#Homework-note" class="headerlink" title="Homework note"></a>Homework note</h4><ul><li><p>根據<a href="http://www.slideshare.net/jserv/vm-construct">Virtual Machine Constructions for Dummies</a>P43-46中<strong>預先判斷未來指令-減少instructions</strong>的思路，在switch-case時對未來的指令做判斷，如果符合情況就做優化</p><ul><li>挑最簡單的Interpreter入手先@@</li><li>以Tower of Hanoi程式為例已先貼原始數據</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">origin version：</span><br><span class="line">real    0m30.031s         Towers of Hanoi in Brainf*ck</span><br><span class="line">user    0m30.024stten by Clifford Wolf &lt;http:&#x2F;&#x2F;www.clifford.at&#x2F;bfcpu&#x2F;&gt;</span><br><span class="line">sys     0m0.000s</span><br><span class="line"> </span><br><span class="line">optimal version：</span><br><span class="line">real    0m11.575s         Towers of Hanoi in Brainf*ck</span><br><span class="line">user    0m11.572stten by Clifford Wolf &lt;http:&#x2F;&#x2F;www.clifford.at&#x2F;bfcpu&#x2F;&gt;</span><br><span class="line">sys     0m0.000s</span><br></pre></td></tr></table></figure><ul><li>P47開始介紹了一些最佳化的技巧，并提供了參考的<a href="https://github.com/matslina/bfoptimization">source code</a>。首先實作最佳化時，使用了IR(Intermediate language)，先將brainfuck程式轉換成IR程式，再將IR程式轉換成C程式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bf_to_ir</span>(<span class="params">brainfuck</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Translates brainfuck to IR.&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    simplemap = &#123;<span class="string">&#x27;+&#x27;</span>: Add(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">                 <span class="string">&#x27;-&#x27;</span>: Sub(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">                 <span class="string">&#x27;&gt;&#x27;</span>: Right(<span class="number">1</span>),</span><br><span class="line">                 <span class="string">&#x27;&lt;&#x27;</span>: Left(<span class="number">1</span>),</span><br><span class="line">                 <span class="string">&#x27;,&#x27;</span>: In(<span class="number">0</span>),</span><br><span class="line">                 <span class="string">&#x27;.&#x27;</span>: Out(<span class="number">0</span>),</span><br><span class="line">                 <span class="string">&#x27;[&#x27;</span>: Open(),</span><br><span class="line">                 <span class="string">&#x27;]&#x27;</span>: Close()&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> [simplemap[c] <span class="keyword">for</span> c <span class="keyword">in</span> brainfuck <span class="keyword">if</span> c <span class="keyword">in</span> simplemap]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ir_to_c</span>(<span class="params">ir</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Translates IR into a C program.&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    plain = &#123;Add: <span class="string">&#x27;mem[p] += %(x)d;&#x27;</span>,</span><br><span class="line">             Sub: <span class="string">&#x27;mem[p] -= %(x)d;&#x27;</span>,</span><br><span class="line">             Right: <span class="string">&#x27;p += %(x)d;&#x27;</span>,</span><br><span class="line">             Left: <span class="string">&#x27;p -= %(x)d;&#x27;</span>,</span><br><span class="line">             Open: <span class="string">&#x27;while (mem[p]) &#123;&#x27;</span>,</span><br><span class="line">             Close: <span class="string">&#x27;&#125;&#x27;</span>,</span><br><span class="line">             In: <span class="string">&#x27;mem[p] = getchar();&#x27;</span>,</span><br><span class="line">             Out: <span class="string">&#x27;putchar(mem[p]);&#x27;</span>,</span><br><span class="line">             Clear: <span class="string">&#x27;mem[p] = 0;&#x27;</span>,</span><br><span class="line">             Copy: <span class="string">&#x27;mem[p+%(off)d] += mem[p];&#x27;</span>,</span><br><span class="line">             Mul: <span class="string">&#x27;mem[p+%(off)d] += mem[p] * %(factor)d;&#x27;</span>,</span><br><span class="line">             ScanLeft: <span class="string">&#x27;p -= (long)((void *)(mem + p) - memrchr(mem, 0, p+1));&#x27;</span>,</span><br><span class="line">             ScanRight: <span class="string">&#x27;p += (long)(memchr(mem+p, 0, sizeof(mem)) - (void *)(mem+p));&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">    woff = &#123;Add: <span class="string">&#x27;mem[p+%(offset)d] += %(x)d;&#x27;</span>,</span><br><span class="line">            Sub: <span class="string">&#x27;mem[p+%(offset)d] -= %(x)d;&#x27;</span>,</span><br><span class="line">            In: <span class="string">&#x27;mem[p+%(offset)d] = getchar();&#x27;</span>,</span><br><span class="line">            Out: <span class="string">&#x27;putchar(mem[p+%(offset)d]);&#x27;</span>,</span><br><span class="line">            Clear: <span class="string">&#x27;mem[p+%(offset)d] = 0;&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">    code = [(woff <span class="keyword">if</span> <span class="built_in">getattr</span>(op, <span class="string">&#x27;offset&#x27;</span>, <span class="number">0</span>) <span class="keyword">else</span> plain)[op.__class__] % op._asdict()</span><br><span class="line">            <span class="keyword">for</span> op <span class="keyword">in</span> ir]</span><br><span class="line">    code.insert(<span class="number">0</span>, <span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;#include &lt;stdio.h&gt;&#x27;</span>,</span><br><span class="line">                              <span class="string">&#x27;#include &lt;string.h&gt;&#x27;</span>,</span><br><span class="line">                              <span class="string">&#x27;unsigned char mem[65536];&#x27;</span>,</span><br><span class="line">                              <span class="string">&#x27;int main() &#123;&#x27;</span>,</span><br><span class="line">                              <span class="string">&#x27;int p=0;&#x27;</span>]))</span><br><span class="line">    code.append(<span class="string">&#x27;return 0;&#x27;</span>)</span><br><span class="line">    code.append(<span class="string">&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>實作IR的缺點是要轉換兩次，但好處更多：</p><ol><li>提供更為抽象的表示方式</li><li>將前端程式語言和後端的機器語言分離</li><li>(額外的)過濾原代碼：可以從bf_to_ir看到它只讀bf的6個指令，如果程式碼包含其他的無效代碼，這裡也會先被過濾掉</li></ol></li><li><p>最佳化的方法提到以下幾種：</p><ul><li>Contraction</li></ul><p><img src="https://hzoz9g.bn.files.1drv.com/y4mluI1HXU2J4HH1xAyJt9U4HJtzwDfjcuk_HbYQbn3EHmggHAt40q_lHZQBirNYpBKVJwz0TwxmYYDc2cD56w1WEZp4oawBwkUhzfVcevITPfl5V2IcHkZrRBHiPRSiiOHVF_cpNEYKHcDfZ6R_AVxUY-EPqv_4O41mpPGu8CB2TenzmhVX-jlubV3KkD-w9OEu4FH1CcuVoF17f6XQ3jXqw?width=542&height=362&cropmode=none"></p><ul><li>Clear loops</li></ul><p><img src="https://hzoy9g.bn.files.1drv.com/y4mJBRWtSKkkVclaBVPjeo12mbuZ38ASqqQ2e-tTwOxR3bHTR_OSgD80I3Ou1nPI7mwbwvD9MhFeHsLOleHyg8ogxc8Xa4K4uKYwVC8IQW8LwLstRrB7NCGKXSsKwhtxj0H4CfqW16M8mq6X6nBk6dCsQ9B-B0NRZhrRuzUzE96Dquoth4P8EBK_oYZ-I634lWfezuSgS-Z9MtYOOmdelJUGw?width=552&height=423&cropmode=none"></p><ul><li>Copy loops</li></ul><p><img src="https://hzox9g.bn.files.1drv.com/y4mgL1CuzWuctIeBpU2_i7UObrQ1lWJHQEXqrjLxEXdvA6ZkrYqNqdvmw-LCGkbtEMs2JdjDAD6HR_em9kwWYYqIb0geIEa-pg8v_g0-J8LF34QsdapAbpBL_jQX__Kcee1cGo7tm_kGrRSZ_BuMLGc-hlC9xwMLejCJVgSJxtAfJp9SYfMpTL31TIS2KG2gutcsds7PEoY4cfmU8ikKiZSQQ?width=547&height=451&cropmode=none"></p><ul><li>Multiplication loop</li></ul><p><img src="https://hzow9g.bn.files.1drv.com/y4mhPxgVVq8a4LFWupzsrgxTtAEwjfnMw4MiPh7Bhx4Oe8_eXHTG3GfQ_ZUF2PhKPlvVsZA-03O_O5rUXi7oGFiGsTh8WbgkLYosQecMCpFAQDE5caJI4jpxS-6ZOZegREeq7DbLSKmICPIZ1xBIOw09qHC9L8_hpniJAjiSMzQiVcVEoRIAz81U6oSlMSb9OJa8IccUafNagpKLOTXTM6ayA?width=548&height=447&cropmode=none"></p><ul><li>Operation offsets</li></ul><p><img src="https://hzov9g.bn.files.1drv.com/y4mWAkUb7LW648AKSnfKgI1uO9KKza9ytYv0uHe0tEbPemOAXYqg1yuA04b874ubZTbmgR0FpcljQBZydrFx7BpFE0wPsBWz2R3zBU3iiCLhXlR4Ry-4HWeNPyAFFjq28vlpa25namyUDidr0d6a5C7bSVr61bONaECrxAT2nq1GMxjtDBRhjEas1winiutKSfso2Povn8bS3DejM60l9JabQ?width=544&height=465&cropmode=none"></p><ul><li>Scan loops</li></ul><p><img src="https://hzoc9g.bn.files.1drv.com/y4m2Jh3C2yYNSXvUTHobz1XgSYJAMRSK_97hoepI7ayow50Adi80cxQr8hBpgbHFobAiJS4yj0NoLe99w2rd2cWR7McgbBveiXL29ordnavc0Rp-MlfNaQldHfRAahBiidmMvlrLq_AQJw8dG1eHpMUA9soz3DJ5usgDckzRlYVZLIDFPBUhylq7P9BKsG0E6MIUIZ3ZgNWyxlbDMxIS1w1ZQ?width=545&height=624&cropmode=none"></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2019/watching-notes-revolution-os/&quot;&gt;嵌入式笔记&lt;/a&gt;第五篇，原文写于2015年。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system course" scheme="https://blog.joouis.com/tags/embedded-system-course/"/>
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="gnu" scheme="https://blog.joouis.com/tags/gnu/"/>
    
    <category term="compiler" scheme="https://blog.joouis.com/tags/compiler/"/>
    
    <category term="jit" scheme="https://blog.joouis.com/tags/jit/"/>
    
  </entry>
  
  <entry>
    <title>上手一个具体而微的ARM操作系统</title>
    <link href="https://blog.joouis.com/2019/lab-mini-arm-os/"/>
    <id>https://blog.joouis.com/2019/lab-mini-arm-os/</id>
    <published>2019-12-29T14:21:16.000Z</published>
    <updated>2019-12-29T14:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2019/watching-notes-revolution-os/">嵌入式笔记</a>第四篇，原文写于2015年。</p><p>印象中国内的嵌入式开发还是（可能是盗版的）IDE 加载项目工程后一键编译/烧录的模式，开发人员对底层吃的不够透，离开 IDE 或者换个开发环境犹如深度近视患者离开了眼镜——寸步难行。再说远一点，似乎不少人的学习路径都是通过看中文教材和一些培训班视频（我当年也看过郭天祥和韦东山的视频😂），缺乏“一手”知识的摄取和体系化的训练。</p><p>这个实验除了可以深入了解操作系统的底层行为如上下文切换外，还有一个难点就是要在 Linux 环境下使用 GNU Toolchain 编译链接系统，最终烧录到 ARM 硬件上，非常非常的“硬核”。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们使用的硬件是意法半导体出的 STM32F4 Discovery 开发板，在开始实验之前，了解 MCU、电路布局以及如何在 STM32 MCU 上开发都是必不可缺的步骤，主要就是阅读大量资料。</p><ul><li><a href="https://docs.google.com/document/d/1Ygl6cEGPXUffhTJE0K6B8zEtGmIuIdCjlZBkFlijUaE/edit">STM32 程式開發：以 GNU Toolchain 為例</a></li><li>ld: <a href="http://www.math.utah.edu/docs/info/ld_toc.html#SEC1">Using ld, The GNU linker</a>, <a href="http://wen00072-blog.logdown.com/posts/246071-study-on-the-linker-script-3">GNU LD 手冊略讀 (3): Chapter 3.7 ~ Chapter 3.11</a></li><li>STM32: Reference Manual, Datasheet, Schematics（自行查阅官网最新版本）</li><li>Course: <a href="http://wiki.csie.ncku.edu.tw/embedded/Lab42">Lab42: Mini ARM OS</a></li></ul><h2 id="Mini-ARM-OS"><a href="#Mini-ARM-OS" class="headerlink" title="Mini ARM OS"></a><a href="https://github.com/jserv/mini-arm-os">Mini ARM OS</a></h2><p>GitHub 仓库点击标题即可访问，没想到已经有 530 颗星星了（12/29/2019）！以下笔记对应四年前的版本，少了第 7 和第 8 课，代码可能也有所改动，勿怪。</p><h3 id="00-HelloWorld"><a href="#00-HelloWorld" class="headerlink" title="00-HelloWorld"></a>00-HelloWorld</h3><ul><li><p>先make然後make qemu後出現hello world，然後輸入arm-none-eabi-objdump -D hello.elf查看executable and linkable文件</p><p><img src="https://jjrgxq.bn.files.1drv.com/y4mJ8PzIgxQl8A49jOlzN8ngCzqii5YaShYpXtm7oZFdUKMwF7GX1ZvPSBRvNfGjuLiBYh1YRzy5m9vWSIjvqP8TZMiALCPL7Y7_JcBbPlnbz9Y5YvrJOa1aR-YJcvnilcffA1dvNXRl0nl6ftucjPS_KPPAJPEC7gc3RGTIADvO3VyL08t_k_QhbIxEsv9M696VtfKDugudAjbONaHfx1rBA?width=665&height=196&cropmode=none"></p><p><img src="https://jjrexq.bn.files.1drv.com/y4mmQTIAfh9s6wUyEBnPh-M49mtDXgVblanK_JMDZ8AJvYcFVaQpvhGvPxWHAn6pD7_QbqJheIOAgjB1dYOut7kJea25hzUuiyfyK65bBOE1kJCDYyG3gvp_ARYSSckueCeag8T8ATchYqg7vHDg8eMVdoEs-S0rB2TS1p8VyPY-mDSQoxfT0GBxJEJs1LlOGJxjj-7UgZXqk0R55uykuA_ag?width=370&height=118&cropmode=none"></p></li><li><p>這裏值得注意的是，在M3上電取出MSP後，會取出PC的值，圖中可見是0x000000ad。但實際上reset_handler地址是從000000ac開始的。這是因爲：</p><p>當一個例外處理程式(exception handler)的位址在LSB設定為1，代表該例外處理程式運作於Thumb模式(Thumb mode)，對ARM Cortex-M3來說，這是必要的，因為該處理器核心只支援Thumb-2指令集，而不支援ARM模式(也稱ARM code或ARM state)。</p><p>所以<a href="http://wiki.csie.ncku.edu.tw/embedded/Lab42">http://wiki.csie.ncku.edu.tw/embedded/Lab42</a> 的截圖裏，reset_handler是從0x000000ad是實際編譯器在不同機器下編譯出來的不同？</p></li><li><p>搭配hello.ld和startup.c一起看終於有種恍然大悟的感覺。.text section最前面的位置就是isr_vector，然後再是其他.text文件。當m3從Flash開始讀入數據時，首先就是isr_vector的內容，而isr_vector中首先給MSP地址賦0，然後是reset_handler，而reset_handler指向Main函數，這樣就導入我們寫的主函數了</p></li></ul><h3 id="01-HelloWorld"><a href="#01-HelloWorld" class="headerlink" title="01-HelloWorld"></a>01-HelloWorld</h3><ul><li><p>此實驗和00相比在ld上作了更多文章。00-HelloWorld的ld文件僅配置了Flash和.text section，而01中則多配置了RAM，將運行時不會更改的.text、.rodata、放入.text section中，.data放入.data section中</p></li><li><p>AT的_sidata表示了.data載入RAM後的LMA。因爲data section會從flash搬移到SRAM中，因此它的LMA和VMA會不同。連結器腳本的一個重要作用，就是管理個別section的LMA和VMA，並在必要的情況下，把有關資訊提供給程式程式碼使用。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Copy the data segment initializers from flash to SRAM */</span></span><br><span class="line"><span class="keyword">uint32_t</span> *idata_begin = &amp;_sidata;</span><br><span class="line"><span class="keyword">uint32_t</span> *data_begin = &amp;_sdata;</span><br><span class="line"><span class="keyword">uint32_t</span> *data_end = &amp;_edata;</span><br><span class="line"><span class="keyword">while</span> (data_begin &lt; data_end) *data_begin++ = *idata_begin++;</span><br></pre></td></tr></table></figure><h3 id="02-ContextSwitch-1"><a href="#02-ContextSwitch-1" class="headerlink" title="02-ContextSwitch-1"></a>02-ContextSwitch-1</h3><ul><li>在startup.c中定義了nmi_handler和hardfault_handler，地址在reset_handler之後，什麼時候會觸發他們呢？</li><li>msp的值爲_estack=RAM的初始位置加上RAM的寬度，即0x20000000+40k，這樣意味這stack的爲40K大小，這個大小的stack感覺足夠寬裕！</li><li>接着看os.c裏的main函數<ul><li>cortex-m系列處理器<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/CHDBIBGJ.html">core registers</a></li><li>首先定義額usertask的堆棧大小256<em>4byte=1k，然後定義一個指針\</em>usertask_stack_start指向usertask堆棧加256-16的距離，而usertask的地址從usertask_stack_start棧底-8才開始，這中間多出了24byte。我想這應該是call stack的概念，爲了後門調用usertask函數的argument、return address、saved ebp%等留下空間(24byte應該是6個空格)</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Initialization of process stack.</span></span><br><span class="line"><span class="comment">     * r4, r5, r6, r7, r8, r9, r10, r11, lr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> usertask_stack[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> *usertask_stack_start = usertask_stack + <span class="number">256</span> - <span class="number">16</span>;</span><br><span class="line">    usertask_stack_start[<span class="number">8</span>] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) &amp;usertask;</span><br><span class="line"></span><br><span class="line">    usart_init();</span><br><span class="line"></span><br><span class="line">    print_str(<span class="string">&quot;OS Starting...\n&quot;</span>);</span><br><span class="line">    activate(usertask_stack_start);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while (1); /* We can&#x27;t exit, there is nowhere to go */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>contex_swtich.s中.syntax unified：Cortex-m3爲了兼容thumb指令和thumb2指令，使這兩種指令可以使用統一的格式，引入了一種叫做“UAL”的語法機制。簡單說來就是程序員不用關心自己使用的是thumb還是thumb2指令，而是統一使用32位thumb2指令的語法格式書寫。具體的機器指令是16位還是32位由編譯器來決定。.syntax unified的作用就是制定使用這一功能，具體可以參考《cortex-m3權威指南》。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* save kernel state *&#x2F;</span><br><span class="line">mrs ip, psr</span><br><span class="line">push &#123;r4, r5, r6, r7, r8, r9, r10, r11, ip, lr&#125;</span><br><span class="line">&#x2F;* switch to process stack *&#x2F;</span><br><span class="line">msr psp, r0</span><br><span class="line">mov r0, #3</span><br><span class="line">msr control, r0</span><br><span class="line">&#x2F;* load user state *&#x2F;</span><br><span class="line">pop &#123;r4, r5, r6, r7, r8, r9, r10, r11, lr&#125;</span><br><span class="line">&#x2F;* jump to user task *&#x2F;</span><br><span class="line">bx lr</span><br></pre></td></tr></table></figure><ul><li><p>接着這段代碼：</p><ul><li><p>MRS：Move to ARM register from system coprocessor register. MRS <em>Rn</em>, <em>coproc_register</em>中Rn is the ARM destination register, and R<em>n</em> must not be PC. System coprocessor register應該是那些special registers，其中包含psr(Program status register)。MSR反之。</p></li><li><p>將main函數(kernel)的狀態存入堆棧後，將r0數據存入程序狀態寄存器(此時r0應該存放了usertask_stack_start地址)，然後設定<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/CHDBIBGJ.html">control寄存器</a>爲0b11。所以現在stack pointer是PSP，而PSP中存放的是usertask_stack_start地址，至於Thread mode是Unprivileged。</p><p><img src="https://jjrfxq.bn.files.1drv.com/y4msLq_CmDAujSrfYA8NuEC4ZHMdSokzk4fhPw5YtLQH5vRK5lTnPVFKRcXSDRJ218o_HUpoRvIU16gqEzz0hrYvwbtpAYbDUIw2645rEcIvYlGMMQFSj4K5OxC1tbFuul69ySeIejiKNiKMEa0D9Wk6k7xTN7ORra40ulPvgQP4N32iv3LjrqgG2RdMNLKZ4HRmQ6g3gZ5zMMYNaLagz4OeA?width=836&height=167&cropmode=none"></p></li><li><p>最後把usertask_stack中的寄存器值拿出來，就可以跳轉到user state了</p></li><li><p>此处补充两篇 ARM 官方文档：<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dai0179b/ar01s02s06.html">2.6. Execution Modes</a>, <a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/CHDIGFCA.html">2.1.1. Processor mode and privilege levels for software execution</a></p></li></ul></li></ul><h3 id="03-ContextSwitch-2"><a href="#03-ContextSwitch-2" class="headerlink" title="03-ContextSwitch-2"></a>03-ContextSwitch-2</h3><ul><li>startup.c中多了一些聲明：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nmi_handler</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute</span><span class="params">((weak, alias(<span class="string">&quot;default_handler&quot;</span>)))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hardfault_handler</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute</span><span class="params">((weak, alias(<span class="string">&quot;default_handler&quot;</span>)))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">memmanage_handler</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute</span><span class="params">((weak, alias(<span class="string">&quot;default_handler&quot;</span>)))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">busfault_handler</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute</span><span class="params">((weak, alias(<span class="string">&quot;default_handler&quot;</span>)))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">usagefault_handler</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute</span><span class="params">((weak, alias(<span class="string">&quot;default_handler&quot;</span>)))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">svc_handler</span><span class="params">(<span class="keyword">void</span>)</span> __<span class="title">attribute</span><span class="params">((weak, alias(<span class="string">&quot;default_handler&quot;</span>)))</span></span>;</span><br></pre></td></tr></table></figure><ul><li>alias (“target”): The alias attribute causes the declaration to be emitted as an alias for another symbol, which must be specified.</li><li>所以*_handler全部alias到了default_handler上，而default_handler目前爲一個死循環：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">default_handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>syscall的定義，關於 <code>svc 0</code> 這個<a href="https://reverseengineering.stackexchange.com/questions/4217/arm-shellcode-for-linux-svc-0-vs-svc-1">回答</a>很好</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">syscall:</span><br><span class="line">    svc 0</span><br><span class="line">    nop</span><br><span class="line">    bx lr</span><br></pre></td></tr></table></figure><ul><li>在context_switch.S中定義了svc_handler函數，聯想到startup.c中的weak alias，可以理解weak alias的意思就是編譯器假如在文件中找到了某個函數的定義就會編譯，假如沒有找到就會將其alias到指定的weak alias函數。<ul><li>關於<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0552a/BABCAEDD.html">stmdb</a>，stm代表存儲更多寄存器，db代表在獲取前將地址減小。所以就是r0地址會增加9*4bytes，然後將{}中的9個寄存器從左至右從最低位置開始存放</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">svc_handler:</span><br><span class="line">&#x2F;* save user state *&#x2F;</span><br><span class="line">    mrs r0, psp</span><br><span class="line">    stmdb r0!, &#123;r4, r5, r6, r7, r8, r9, r10, r11, lr&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* load kernel state *&#x2F;</span><br><span class="line">    pop &#123;r4, r5, r6, r7, r8, r9, r10, r11, ip, lr&#125;</span><br><span class="line">    msr psr, ip</span><br><span class="line"></span><br><span class="line">    bx lr</span><br></pre></td></tr></table></figure><p><img src="https://jjrdxq.bn.files.1drv.com/y4mRQE5Fump95yZuOzBhNqQ7N5_mzTHEVTypYmPw6OHq2azZPtqvM4q-f1CQdM3kUuGab_l9cDzwEGC-g-wa2M8kUk_WTJOp6PJslaqSky-9HJ5P53vGzibCYaJ1D2_jXAc1eePfITeY4U7wj74WMt84mXkivWuGUX_F-xlWEItxxLJriI_-qID5ZYLFL0nFYYgQT_L1hRr6h2Nc4Mlcp7Wag?width=330&height=182&cropmode=none"></p><ul><li>程序run可見當usertask觸發syscall後會保存其狀態，然後切回main函數輸出兩個print_str，然後回到usertask後會繼續接着上一次的執行到的地方繼續執行，再輸出兩句話，然後回到main函數，也是接着上次執行後的地方繼續執行。這驗證了之前代碼裏關於user state和kernel state的save和load動作。</li></ul><h3 id="04-Multitasking"><a href="#04-Multitasking" class="headerlink" title="04-Multitasking"></a>04-Multitasking</h3><p><img src="https://jjrcxq.bn.files.1drv.com/y4mxOrwfjpJWXVx10ewRnky1wPwqh2R11XAqx-rK7fYKhfnw0_Q74JArry9kVVn4BgN9X-_uc522FXUMVpDK12AMd4YZJsgAQUcUVqHyS46IaGAxRHw-BAwiecYzVgzOaHf2UiuOJ7Tpfs0_N-XTSa7WMGoHru9BdASIGz_T5kmQcuOST6itBFfUUH9IMIbg8uY6Jqo4lWKAnkXSwQfbY6U-Q?width=710&height=457&cropmode=none"></p><ul><li><p>diff context_switch.S ../03-ContextSwitch-2/context_switch.S ，發現：</p><ul><li>svc_handler中的msr psr, ip變成了msr psr_nzcvq, ip，<a href="http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001mc/QRC0001_UAL.pdf">nzcv</a>爲psr的四個標誌位</li></ul></li><li><p>另外在activate中，在切換到process stask後多一條isb指令：</p><p>Instruction Synchronization Barrier flushes the pipeline in the processor, so that all instructions following the ISB are fetched from cache or memory, after the instruction has been completed. It ensures that the effects of context altering operations, such as changing the ASID, or completed TLB maintenance operations, or branch predictor maintenance operations, as well as all changes to the CP15 registers, executed before the ISB instruction are visible to the instructions fetched after the ISB.<br>In addition, the ISB instruction ensures that any branches that appear in program order after it are always written into the branch prediction logic with the context that is visible after the ISB instruction. This is required to ensure correct execution of the instruction stream.</p></li><li><p>重頭戲在os.c，首先宏定義了三個地址：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HANDLER_MSP 0xFFFFFFF1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_MSP  0xFFFFFFF9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> THREAD_PSP  0xFFFFFFFD</span></span><br></pre></td></tr></table></figure><p><img src="https://jjrbxq.bn.files.1drv.com/y4muhuffNAohfnDo-aRDoceuibQPrQEckKbjI4lHjnPFIs9WGd06YSErr1D8mnXD44UqViR2HMQmQ4_wvzsxaCkigz4_EXVvtf8zNBv0r4nCwYj0vwSCu8gaLkmEC28hMXaJ9VXQf0hhqjehXva9wzBL_zppfNl8mBUBl447u-Ml279njbjec48_ELzLOrV7Vcx3spyKlothXlN8JfhBB-NiQ?width=524&height=422&cropmode=none"></p><ul><li>接着新建一個task：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> *<span class="title">create_task</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *<span class="built_in">stack</span>, <span class="keyword">void</span> (*start)(<span class="keyword">void</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> first = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">stack</span> += STACK_SIZE - <span class="number">32</span>; <span class="comment">/* End of stack, minus what we are about to push */</span></span><br><span class="line">        <span class="keyword">if</span> (first) &#123;</span><br><span class="line">                <span class="built_in">stack</span>[<span class="number">8</span>] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) start;</span><br><span class="line">                first = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">stack</span>[<span class="number">8</span>] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) THREAD_PSP;</span><br><span class="line">                <span class="built_in">stack</span>[<span class="number">15</span>] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) start;</span><br><span class="line">                <span class="built_in">stack</span>[<span class="number">16</span>] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>) <span class="number">0x01000000</span>; <span class="comment">/* PSR Thumb bit */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stack</span> = activate(<span class="built_in">stack</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在main函數中，對應的調用是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定義了程式stack的數量(2個)和大小(256*4bytes)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> user_stacks[TASK_LIMIT][STACK_SIZE];</span><br><span class="line"><span class="comment">//定義了用戶程式的數量(2個)</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *usertasks[TASK_LIMIT];</span><br><span class="line"><span class="comment">//將之前定義的stack和function地址傳給create_task配置</span></span><br><span class="line">usertasks[<span class="number">0</span>]=create_task(user_stack[<span class="number">0</span>],&amp;task_func);</span><br></pre></td></tr></table></figure><ul><li>當使用create_task函數第一次進行初始化時，在create_task中對task的stack進行了配置，並且因爲是第一次設定，將stack[8]存放了task_func的地址，然後進入到task_func中echo”task1 Created”&amp;”return”後調用syscall回到了main函數。</li><li>當第二次呼叫create_task時，comment也有說明，因爲activate是從exception中返回，故將lr保存爲THREAD_PSP，而此時的func從stack[15]開始</li><li>爲何緊接着的stack[16]就要設epsr爲0x01000000？爲何processor可以認出這條指令是設置espr的？<ul><li>The following can clear the T bit to 0: (1)instructionsBLX, BX and POP{PC} (2)restoration from the stacked xPSR value on an exception return (3)bit[0] of the vector value on an exception entry or reset. 所以需要再將epsr設爲thumb state。</li></ul></li></ul><h3 id="05-TimerInterrupt"><a href="#05-TimerInterrupt" class="headerlink" title="05-TimerInterrupt"></a>05-TimerInterrupt</h3><ul><li><p>首先看啓動文件，多了pendsv和systick的定義，關於<a href="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABBGBEC.html">Cortex-M3設備的異常類型</a>再複習一下</p></li><li><p>void __attribute__((interrupt)) systick_handler(void)</p><ul><li>The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present. With Epiphany targets it may also generate a special section with code to initialize the interrupt vector table.(<a href="https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html">https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html</a>)</li></ul></li></ul><h3 id="06-Preemptive"><a href="#06-Preemptive" class="headerlink" title="06-Preemptive"></a>06-Preemptive</h3><ul><li>在context_switch.s中對systick_handler定義了一樣的行爲，當systick exception觸發時，也會將進程切換到kernel mode。</li><li>一直沒找到delay()和systick有什麼直接聯繫，恍然大悟：當一個task在運行時，由於發生了systick exception，就會切換到kernel mode然後運行下一個task，這樣就如同preemptive。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2019/watching-notes-revolution-os/&quot;&gt;嵌入式笔记&lt;/a&gt;第四篇，原文写于2015年。&lt;/p&gt;
&lt;p&gt;印象中国内的嵌入式开发还是（可能是盗版的）IDE 加载项目工程后一键编译/烧录的模式，开发人员对底层吃的不够透，离开 IDE 或者换个开发环境犹如深度近视患者离开了眼镜——寸步难行。再说远一点，似乎不少人的学习路径都是通过看中文教材和一些培训班视频（我当年也看过郭天祥和韦东山的视频😂），缺乏“一手”知识的摄取和体系化的训练。&lt;/p&gt;
&lt;p&gt;这个实验除了可以深入了解操作系统的底层行为如上下文切换外，还有一个难点就是要在 Linux 环境下使用 GNU Toolchain 编译链接系统，最终烧录到 ARM 硬件上，非常非常的“硬核”。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system course" scheme="https://blog.joouis.com/tags/embedded-system-course/"/>
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="arm" scheme="https://blog.joouis.com/tags/arm/"/>
    
    <category term="os" scheme="https://blog.joouis.com/tags/os/"/>
    
    <category term="gnu" scheme="https://blog.joouis.com/tags/gnu/"/>
    
    <category term="context switch" scheme="https://blog.joouis.com/tags/context-switch/"/>
    
  </entry>
  
  <entry>
    <title>解析AM335x Arm Cortex-A8处理器的启动流程</title>
    <link href="https://blog.joouis.com/2019/am335x-arm-cortex-a8-boot-sequence/"/>
    <id>https://blog.joouis.com/2019/am335x-arm-cortex-a8-boot-sequence/</id>
    <published>2019-12-15T13:53:32.000Z</published>
    <updated>2019-12-15T13:53:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2019/watching-notes-revolution-os/">嵌入式笔记</a>第三篇，原文写于2015年。</p><p>在真实世界中，一个操作系统是如何被加载的？对于单片机、SoC以及我们常见的计算机，由于硬件设备和软件系统的不同，启动流程肯定会有差异。不过对于大型操作系统，启动流程有不少共通之处，本文将简单解析一个消费类电子产品常用的系统（基于TI的AM335x处理器）是如何被加载启动的。</p><p>这篇笔记其实是在组队项目时，由一位队友Adrian Huang所写。相比我们这些“愣头青”，Adrian已经有八九年的Linux底层工作经验，先后在HP、联想、MTK工作过，是十足的大佬。</p><a id="more"></a><h2 id="Boot-Sequence"><a href="#Boot-Sequence" class="headerlink" title="Boot Sequence"></a>Boot Sequence</h2><p>圖一為AM335x開機流程，其包含ROM Code、MLO、U-Boot與OS Image，底下將說明ROM Code、MLO與U-Boot。</p><p><img src="https://ijrexq.bn.files.1drv.com/y4mX9xkUQI0Bru5Z650NymAW4M7z8au24r95TnCHHsV9itCLjqrqM8EctRKllEp08oUSsmfvy4RI-gVh77wYaOU7yyFDZ7jr7N7I5D6Wu_lGPZh7s3S0ne9hJ9cEeW8hsvWqozUOdC2wqCzCH-Q95SvRBftpgfMOJJHSR7TCyItWknIU8nzSEC2Vw36MOtuMBJzZyfHRmQH5OZC6I7R93R36w?width=999&height=683&cropmode=none" alt="Figure 1: High-level Overview to AM335x Boot Sequence"></p><h3 id="ROM-Code"><a href="#ROM-Code" class="headerlink" title="ROM Code"></a>ROM Code</h3><p>ROM Code主要有幾項任務:</p><ul><li>Stack Setup</li><li>Watchdog timer 1  configuration (set to three minutes)</li><li>System clock configuration</li><li>Search bootable devices (must be the FAT 12/16/32 partition) for a valid booting image (the image name must be MLO)</li><li>Load the content of the file “MLO” from a bootable device to internal RAM (the 128KB on-chip memory)</li><li>Execute the file “MLO” stored in internal RAM</li></ul><p>圖二為ROM Code架構，由”Public ROM Code drivers”可知ROM code支援如下裝置:</p><ul><li>MMCSD (MultiMediaCard SD)</li><li>NAND</li><li>XIP (eXecute In Place)</li><li>SPI</li><li>USB UART</li><li>EMAC (Ethernet Media Access Control)</li></ul><p>也就是說，系統一上電，ROM Code會掃描上述裝置，以便找到Bootable device。由於ROM Code只支援FAT檔案系統格式，所以Bootable device一定要是FAT檔案系統 (FAT12/16/32檔案系統都可以)。</p><p>注意: 該架構的On-chip boot ROM大小為176 KB。</p><p><img src="https://ijrgxq.bn.files.1drv.com/y4m91R7T1buLeODZG4ugSeHctLOIr7Pw3uVLGKvtPfWhS9GB7vFonpSTwASXEE7YmsbEKMoknKPgRjleSnwgRqoY-jLlag1dp3aiEbEFK2e3ckbi0smrslhehDMRAIUqolxSHQzVVyRoVUxTdxp_dkZiCujhrxLDin7ETfdoVPxcfxdIhql1UutK4J5Sv6z4qhh3v0PBQt2z0Uxm0WSGV6U5g?width=919&height=573&cropmode=none" alt="Figure 2: ROM Code Architecture"></p><p>圖三為ROM Memory Map:</p><ul><li>ROM Exception Vectors (0x20000-0x2001F): 該區段定義Exception Handler的位址。譬如: 0x20000存放Reset Handler的位址，也就是板子一上電，第一個執行的地方，課程第七周有詳盡的說明，可參考此<a href="https://docs.google.com/document/d/1Ygl6cEGPXUffhTJE0K6B8zEtGmIuIdCjlZBkFlijUaE/edit">文件</a>。詳盡的ROM Exception Vectors如表一所示。</li></ul><p><img src="https://ijrfxq.bn.files.1drv.com/y4mr5vbOMVqr2C2tsjR3qeH3JyeU4Y8x_zAtbshrWvRdC2EPswXAo9Hc_LwNojcmmkbW6Xs0dizUxHeDAxsecG0BfLfwQlqGFyOulBFIPuxAwIuag2tHF9ROM816OpZWgcxOEEmm4kRRDcUzHA5FGMr1k6HdHEmOIpwFqoVsP8uBQMVKw_BiTh64EKF0AyD79fvQl9DoB1ZFXUdYa40MW95Rw?width=921&height=242&cropmode=none" alt="Chart 1: ROM Exception Vectors"></p><ul><li>Public ROM Code CRC (0x20020): 由0x20000-0x2BFFF計算得出的四個位元組CRC值。</li><li>Dead loops (0x20080-0x200FF): 該區段定義預設的exception handlers，其預設handlers都是執行while(1)迴圈，程式設計者可以定義相同名字的exception handler，如此便能覆蓋 (override)對應之預設exception handlers。可參考<a href="https://github.com/jserv/mini-arm-os/blob/master/05-TimerInterrupt/startup.c#L63">mini-arm-os</a>與<a href="https://github.com/embedded2015/freertos-basic/blob/master/freertos/libraries/CMSIS/CM3/DeviceSupport/ST/STM32F10x/startup/gcc_ride7/startup_stm32f10x_md.s#L124">freertos</a>程式碼，以便了解其設計概念。</li><li>Code (started from 0x20100): ROM程式碼</li><li>ROM Version (0x2BFFC-0x2BFFF): ROM Code Version</li></ul><p><img src="https://ijrdxq.bn.files.1drv.com/y4m1lZgiY0kQlxtKuuClWoEmBLOZYFp0mDWdCMnDla_RSbZC161f532Dwy1EjSxNjCOIKWkDgTN65FLfoE8NLWCgFRY029LQp5BZph_RbFh3VwThpt0Z0WgoIeHqezLJm-v4_6-YVGLzBqUHwizl0wxQ5-EODj0rt0kbpFeKq8bzkRKcxY5PSak9qKmJG6HKxHWDFruFFbQRPP4v92r6QDP6g?width=278&height=299&cropmode=none" alt="Figure 3: ROM Memory Map"></p><h3 id="Two-Stage-U-Boot-Design-MLO-MMC-Loader-amp-U-boot"><a href="#Two-Stage-U-Boot-Design-MLO-MMC-Loader-amp-U-boot" class="headerlink" title="Two Stage U-Boot Design - MLO (MMC Loader) &amp; U-boot"></a>Two Stage U-Boot Design - MLO (MMC Loader) &amp; U-boot</h3><h4 id="MLO-File-Name-MLO"><a href="#MLO-File-Name-MLO" class="headerlink" title="MLO (File Name: MLO)"></a>MLO (File Name: <code>MLO</code>)</h4><p>AM335x ARM Cortex-A8處理器的On-chip memory( internal SRAM)大小為128KB (詳見AM3358 Data Sheet)，其Memory Map如圖四所示:</p><ul><li>1KB Secure Area: 此區域無法存取</li><li>109KB downloaded image (0x402F0400-0x4030B7FF): 此區域最多可以容納109KB二進制檔案，此檔案可以存放在儲存裝置，或透過UART/USB傳輸，進而ROM Code載入至位址0x402F0400。MLO其實就是小型的U-Boot Boot loader (其大小必須小於109KB)。所以，其簡化版U-Boot (MLO)主要任務如下:<ul><li>初始化DDR (512MB)</li><li>一旦初始化DDR成功後，MLO將<code>u-boot.img</code>載入至DDR，並交由U-Boot接管。</li></ul></li><li>18KB area (0x4030B800-0x4030FFFF): ROM Code使用該區域。</li></ul><p><img src="https://ijrbxq.bn.files.1drv.com/y4m4Moeghhw0ihVSV10wtEpfV51hlm3BlYa0MaWEVLa_ekCytzWsPBV6pRNWlq-huq-RPbjHe8MnlMNQutmLoUlVKmC6Pnu_8ye8PZTUrNFIDGewxKRvUJmDmyGLHQquJdjwUKF_mLgmAky_ttOjUaQ84do7KpIys2FbGmsSIHA3UEPYdhVSRA4GNv7Yp7QJ1Xt7adi1CPaKicmHUoswQK17g?width=914&height=637&cropmode=none" alt="Figure 4: Memory Map for 128KB on-chip memory"></p><h4 id="U-boot-File-name-u-boot-img"><a href="#U-boot-File-name-u-boot-img" class="headerlink" title="U-boot (File name: u-boot.img)"></a>U-boot (File name: <code>u-boot.img</code>)</h4><p>此完整版U-Boot主要做額外platform初始化 (如: 初始化網卡等)，並載入OS Kernel。</p><p><strong>為何需要two-stage U-boot？</strong></p><p>由於On-chip memory只能提供109KB給Boot loader。然而，對於一個完整版的U-Boot，其大小約350KB (參考<a href="http://www.armhf.com/download/">ARMhf</a>編好的<a href="http://s3.armhf.com/dist/bone/bone-uboot.tar.xz">u-boot</a>)。為因應此限制，便需要一個小型的U-boot (MLO)，用以初始化DDR並將完整版U-boot載入至DDR，再將控制權交給完整版U-boot。下圖在BeagleBoard Black成功載入MLO與U-Boot終端機輸出。</p><p><img src="https://ijrcxq.bn.files.1drv.com/y4mb1ihQSrUuU4o5Gm9YglL6mLkaTvLOgqORGOXEkFkrvwveoOW5wYAf7CoOOlOgWCfswMZNgmQW1hEJr8tWyFr-7WTgkeItjQ7-FsNk0qBSYdenUNzuHddMLOQ9VKiD-RtiSTjf-Hq-Hx5yhI15hclmtEDcYFKok6R6h9OMBOugYBPd_P4-GlfjFPLdL4J7q0ZMQtmSQDT6iS29e7H0117DQ?width=875&height=661&cropmode=none"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2019/watching-notes-revolution-os/&quot;&gt;嵌入式笔记&lt;/a&gt;第三篇，原文写于2015年。&lt;/p&gt;
&lt;p&gt;在真实世界中，一个操作系统是如何被加载的？对于单片机、SoC以及我们常见的计算机，由于硬件设备和软件系统的不同，启动流程肯定会有差异。不过对于大型操作系统，启动流程有不少共通之处，本文将简单解析一个消费类电子产品常用的系统（基于TI的AM335x处理器）是如何被加载启动的。&lt;/p&gt;
&lt;p&gt;这篇笔记其实是在组队项目时，由一位队友Adrian Huang所写。相比我们这些“愣头青”，Adrian已经有八九年的Linux底层工作经验，先后在HP、联想、MTK工作过，是十足的大佬。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system course" scheme="https://blog.joouis.com/tags/embedded-system-course/"/>
    
    <category term="embedded system" scheme="https://blog.joouis.com/tags/embedded-system/"/>
    
    <category term="arm" scheme="https://blog.joouis.com/tags/arm/"/>
    
    <category term="cortex-a8" scheme="https://blog.joouis.com/tags/cortex-a8/"/>
    
    <category term="rom" scheme="https://blog.joouis.com/tags/rom/"/>
    
    <category term="ram" scheme="https://blog.joouis.com/tags/ram/"/>
    
    <category term="u-boot" scheme="https://blog.joouis.com/tags/u-boot/"/>
    
    <category term="boot" scheme="https://blog.joouis.com/tags/boot/"/>
    
    <category term="os" scheme="https://blog.joouis.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>小练习：通过反汇编一段C代码观察栈行为</title>
    <link href="https://blog.joouis.com/2019/observe-stack-behavior-by-disassembling-a-simple-c-code/"/>
    <id>https://blog.joouis.com/2019/observe-stack-behavior-by-disassembling-a-simple-c-code/</id>
    <published>2019-12-11T08:34:21.000Z</published>
    <updated>2019-12-11T08:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2019/watching-notes-revolution-os/">嵌入式笔记</a>第二篇，原文写于2015年。</p><p>深入了解计算机的底层行为是软件工程师的内功之一，有助于理解程序代码是如何被执行的。本文的练习小而完整，不需要太多背景知识，因此摘选出来与大家分享。</p><a id="more"></a><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>在學習 Linux kernel 分析的基礎課程時有分析到 C 代碼執行時 stack 的行爲，那麼這裏做一個最簡單的實驗，通過把 C 代碼反彙編成 ASM 代碼，來看堆棧的操作情況。</li><li>備註：<ul><li>直接用的 <strong>64-bit</strong> 環境，<code>gcc -S -o main.s main.c</code>（因爲網路大多都是32bit的分析，照做沒新意）</li><li>也可以用 GDB 來看，覺得有點殺雞用牛刀XDD</li></ul></li></ul><h2 id="源代碼和編譯出來的代碼"><a href="#源代碼和編譯出來的代碼" class="headerlink" title="源代碼和編譯出來的代碼"></a>源代碼和編譯出來的代碼</h2><ul><li>源代碼：</li></ul><p><img src="https://idrgxq.bn.files.1drv.com/y4m55mxQAjM25AHJzomnT_XrvcXvro540HjYgQ9-YWE09y8fx95IvWhoSZEX-fCihgqF2WPT0aP2usavJ-9JVHiK0Df1hpuHSKoc32nIMQhv0EOqu24I6tLSwlGORK0-f5cgy8h9TOug5Ny9BMstlLz-2or9oi5tnWJZ-tK9BjBXIvMKaozi_FdacFAB3OZ7WPZ39lQvXV3OnIu-XP1Tveo-A?width=351&height=441&cropmode=none"></p><ul><li>反編譯出來的代碼（64-bit）：</li></ul><p><img src="https://idrfxq.bn.files.1drv.com/y4m-JuD2XCVCaoQUn5lYvubcjojAM7X83VaMjQpRsDvGq0sVUAxDgqKZADgrFo4snyZjgSPvwX-bMDsE-GXhWhOUmnRiW2MyrMjYcssqbV3SVgMf9YAZyWO0p7gTRD26R-yP91fd0qQ6DH_1Q1trPyvE-f40Qjqzf2M_0dS1hL_FOLQazrCK3-AuhxggUb9gkhqNmsVxKdJRQvrYv8uY7_ukQ?width=464&height=720&cropmode=none"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>首先，可以看到一件事是：編譯出來的組合語言是 32-bit 和 64-bit 混合的，應該是針對寄存器的 bit 不同指令做的相應的使用</li><li>指令從第14行開始也就是 main 函數第一條指令開始執行，首先是把<code>%rbp</code>寄存器的值壓入棧內，保存當前工作的棧基指</li><li>接着把<code>rsp</code>的地址賦給<code>rbp</code>，含義是初始化一個新的 stack</li><li>第16行是預設的空間，GCC下<code>-O1</code>指令似乎可以優化</li><li>第17、18行將<code>a(1,2)</code>中的兩個參數分別存到<code>esi</code>和<code>edi</code>寄存器中，這個地方需要說明的是 x86-32 中會使用 push 將實參存入 stack 內，如下圖（原<code>main.c</code>反編譯成 32-bit ASM 代碼）：<ul><li><img src="https://idrexq.bn.files.1drv.com/y4m9pIm6sx0UjxAkcwghzHWLAOVrOAVclzqC0meFhZR9_airLB3cMJEPbWgCUtmmUPC0EV-PK3PMllvlkGVXeVzad49Uxj3ne2fiDiy6tnZlKqIaFqBwlH5idcSgefHpeOEzvOrnqmQOf8LRqxmzergtUnSeziVS0S70Lf2mqhEyK2Cqj2IMbw-LyqZgf3ugc1oUUC2GUQgg3nUgMl_KGRJag?width=213&height=54&cropmode=none"></li><li>而在 x86-64 中，如果參數在6個以內，GCC 就可以利用寄存器來存儲參數值；超過6個的參數，還是通過上述操作實現，這裏給我們了至少兩個啓發：<ul><li>儘量使用6個以下的參數列表</li><li>傳大的數值時儘量使用指針或引用，因爲寄存器只有64位並且只能存整形數值</li></ul></li></ul></li><li>然後就呼叫 a 函數了，call其實也分爲兩個動作：<ul><li>第一個是把當前<code>rip</code>的值保存</li><li>把 a 函數的指令初始地址給<code>rip</code></li></ul></li><li>a 函數也是同理，先保存當前的<code>rbp</code>然後初始化新的 stack</li><li>第4、5行，就將保存在<code>esi</code>和<code>edi</code>內的值按順序放入<code>-24(%ebp)</code>和<code>-20(%ebp)</code>內</li><li>這可以說明，<strong>在X86-64中，實參入棧和賦值給形參都是在子函數代碼段完成的</strong></li><li>第6到8行就是從 stack 中取出參數到通用寄存器完成加法運算</li><li>第9、10行是算出的值會先從<code>eax</code>存到<code>-4(%rbp)</code>，即給 tmp 變量賦值</li><li>然後再將<code>tmp</code>的值給<code>eax</code>寄存器，函數的返回值默認使用<code>eax</code>寄存器返回給上一級函數</li><li>第11行將<code>rbp</code>出棧，然後第12行ret就是把之前保存的<code>rip</code>出棧</li><li>回到第20行指令，將<code>eax</code>的值給<code>-4(%rbp)</code>，也就是給變量 i</li><li>爲了<code>return 0</code>把0給<code>eax</code></li><li>因爲是main函數，所以最後是leave（leave: Releases the local stack storage created by the previous ENTER instruction.）</li></ul><h2 id="流程圖"><a href="#流程圖" class="headerlink" title="流程圖"></a>流程圖</h2><p><img src="https://idrcxq.bn.files.1drv.com/y4mmFoqM4ecZs3QlssVTjcuH8z6o-e_krbOlw-16ePd5rX0CK_RUA1T-_-OiwFiYzJJGdaRBY17Ho75BE-3SPqpq7IHFceINb4r5LSXGAu2Y3Qhxq0nrnJalDmHKeXIP9qrPYS8tJUxtZMqHpNVSbyy7zgDg7HbfBq5Su1oYFgtSDn7cFjv3LmeT9opN-qF4c4iXS-Rh02InCUeXh-JlhbLtA?width=1502&height=719&cropmode=none"></p><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul><li><a href="http://www.searchtb.com/2013/03/x86-64_register_and_function_frame.html">http://www.searchtb.com/2013/03/x86-64_register_and_function_frame.html</a></li><li><a href="http://en.wikipedia.org/wiki/X86_instruction_listings">http://en.wikipedia.org/wiki/X86_instruction_listings</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2019/watching-notes-revolution-os/&quot;&gt;嵌入式笔记&lt;/a&gt;第二篇，原文写于2015年。&lt;/p&gt;
&lt;p&gt;深入了解计算机的底层行为是软件工程师的内功之一，有助于理解程序代码是如何被执行的。本文的练习小而完整，不需要太多背景知识，因此摘选出来与大家分享。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system course" scheme="https://blog.joouis.com/tags/embedded-system-course/"/>
    
    <category term="stack" scheme="https://blog.joouis.com/tags/stack/"/>
    
    <category term="assembly" scheme="https://blog.joouis.com/tags/assembly/"/>
    
    <category term="disassemble" scheme="https://blog.joouis.com/tags/disassemble/"/>
    
    <category term="c" scheme="https://blog.joouis.com/tags/c/"/>
    
    <category term="gcc" scheme="https://blog.joouis.com/tags/gcc/"/>
    
  </entry>
  
  <entry>
    <title>观影简记：《Revolution OS（操作系统革命）》</title>
    <link href="https://blog.joouis.com/2019/watching-notes-revolution-os/"/>
    <id>https://blog.joouis.com/2019/watching-notes-revolution-os/</id>
    <published>2019-12-09T15:54:55.000Z</published>
    <updated>2019-12-09T15:54:55.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是我的<a href="https://blog.joouis.com/2019/watching-notes-revolution-os/">嵌入式笔记</a>第一篇，原文写于2015年。</p><p>这篇笔记是当年参加Embedded System 2015课程的作业之一。Jserv的课程使我受益良多，也帮助我迈入了计算机科学的殿堂。他的课程在成大是出了名的“硬”，信息量巨大，上课基本就是划重点加答疑，课下需要大量时间去自学和实践。同时他也一直鼓励学生参与开源活动，甚至把作业发布到例如Hackpad（现今Dropbox Paper）、HackMD等协同文档平台上，既可以作为自己的网络备份（这也是为什么我还能找到这些“黑历史”😂），也可以供其他人参考、交流。</p><p>2016年随着Hackpad被Dropbox收购并推出新的产品Paper，Hackpad上的数据也被自动移植到了Paper上。在这次数据自动迁移中，当年的不少作业笔记被遗失。在2019年的尾声，我会陆续将仅存的少量有意思、有干货的笔记从Dropbox Paper中翻出来放到博客中，也算是对当年热血岁月的一次纪念。</p><a id="more"></a><h2 id="Revolution-OS"><a href="#Revolution-OS" class="headerlink" title="Revolution OS"></a><a href="https://youtu.be/vWwvh3036Fw">Revolution OS</a></h2><p>链接和下方的影片来自YouTube，外网可看~</p><div class="video-container"><iframe src="https://www.youtube.com/embed/vWwvh3036Fw" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h2 id="關鍵人物、事件"><a href="#關鍵人物、事件" class="headerlink" title="關鍵人物、事件"></a>關鍵人物、事件</h2><ul><li><p>Eric Raymond: Author, “The cathedral and the bazaar”</p></li><li><p>Linus Torvalds</p></li><li><p>Bruce Perens: Author, Open source Definition</p></li><li><p>Richard Stallman</p><ul><li>哲學觀念：<ul><li>Whoever sitting at the computer, should be able to do whatever he wants. And somebody else who was there yesterday shouldn’t be controlling what you do today. </li><li>A free software refers not to price but to freedom, so think of free speech not free beer. The freedoms that I’m talking about are the freedoms to make changes if you want to, or hire somebody else to make changes for you if you’re using a free software for your business. To redistribute the copies to share with other people, and to make improvements and publish them so other people can get benefit of them too.</li><li>Copyleft</li><li>GPL(General Public License)</li><li>1984.01 GNU started</li><li>GNU is recursive acronym XDD</li></ul></li></ul></li><li><p>BSD(12:36終於第一次提到)</p><ul><li>關於BSD電影裏提到的太少，詳細補充借用Jserv的《<strong>從 Revolution OS 看作業系統生態變化</strong>》：<ul><li>作為技術創新者，BSD 在本紀錄片只零星出現四次 (談及 Apache 的成功歸於開發者社群, GNU 計畫源始, 開放原始碼授權, 對 Microsoft 提出反托拉斯訴訟)，幾乎一面倒向 Linux，實在可惜</li><li>增添 Berkeley Unix / BSD 發展歷程、和 AT&amp;T 的官司爭議</li></ul></li></ul></li><li><p>Michael Tiemann: Co-Founder, Cygnus Solutions</p></li><li><p>Larry Augustin: Co-Founder, VA Linux Systems</p></li><li><p>ERL: 啓發GNU與Linux商業應用的誕生地</p></li><li><p>Linux: Monolithic</p></li><li><p>GNU Hurd: <a href="http://zh.wikipedia.org/wiki/GNU_Hurd">http://zh.wikipedia.org/wiki/GNU_Hurd</a></p></li><li><p>Brian Belhendorf: Apache Web Server，使得Linux第一次在商業市場上大獲成功</p></li><li><p>RedHat Software: 首間上市的Linux公司</p></li><li><p>Netscape</p><ul><li>第一個參與開放原始碼的大公司，爲了對抗IE</li><li>後來的Mozilla</li></ul></li><li><p>Open Source vs Free Software</p></li><li><p>資料庫軟體供應商的倒戈</p></li><li><p>Linux Users Groups</p></li><li><p>Linux World Conference</p></li></ul><h2 id="思考與疑問"><a href="#思考與疑問" class="headerlink" title="思考與疑問"></a>思考與疑問</h2><ul><li><p>昨天看了一遍，感覺很爽，今天再看一遍，把想法都寫出來</p></li><li><p>6:27 Stallman在信息裏說安全機制不過是個玩笑，讓我想到，自由軟體/開源軟體如何確保我們使用的安全性，如果有人利用它的易修改來惡意傳播帶有問題的軟體，會不會是個災難？</p></li><li><p>7:30 Bill Gates提到的軟體知識產權問題，我覺得並沒有錯(當然本片站在開源者的角度肯定是否定態度)。開源和閉源是兩種不同的價值觀，無論是哪種價值觀，從它的出發點去考慮都是合理的，最後也都被證明是可以賺錢、成功的。所以我覺得如今這個多元化的社會，開源和閉源同時存在、相互競爭是非常正常的現象。</p></li><li><p>另外不得不說，微軟這麼多年屹立不倒，也得益與Bill Gates大學念得法律系，面對各種官司都能從容不迫(雖然不是他去打官司)。多元化的社會，如果追求更高的目標，對自己的定位不能僅僅只是懂技術的工程師，有時候還需要更多東西。</p></li><li><p>11:05 Stallman想到自己就是一個OS開發者，決定自己開始幹時，我想到多少次似曾相識，很多成功人士都是這麼說的”XXX不好用，我乾脆自己來做一個”。我們很多時候都在抱怨，卻沒有動力去用自己的專業知識解決問題。往往行動起來的人，就成功了。</p></li><li><p>從1984年開始GNU計劃，到1990年Stallman等人才寫完了UNIX上各種免費的套件包，還沒有寫kernel，工程量的浩大和困難可見一斑</p></li><li><p>14:29 Stallman一開始對釋出源代碼也是存有戒心的，人類的天性吧</p></li><li><p>16:45 Augustin談到自己去找工作時身邊的人用的都是自己寫的程式，這就像Jserv老師說的找工作時給HR或主管秀出自己的Google搜索結果一樣，簡單有效</p></li><li><p>20:33 Stallman分析自由軟體如何能賺錢，邏輯太精彩了，壟斷往往百害而無一利</p></li><li><p>24:11 Linus提出自己開始寫一個OS，完全沒有提到Minix</p></li><li><p>30:47 Linus在被問到”有人建議該寫成GNU/Linux”時認爲只有GNU自己發佈的Linux Distribution才能叫GNU/Linux(或隨他們怎麼稱呼)。但是所有版本的Linux毫無疑問都用到GNU的各種系統軟體，Stallman在意的可能是大家(特別是非IT業的人，但這部分人才是未來更廣闊的目標羣體)只記住了Linux，而忽視了GNU的貢獻吧</p></li><li><p>36:42 Augustin談到自由軟體找風投，那個時候幾乎所有風投都不太信任自由軟體，可見此時自由軟體並未獲得主流的認可</p></li><li><p>48:35 Stallman在談到爲什麼他支持Free Software而不是Open Source時顯得更像一位哲學家，其實也更像一個保持童真的小孩或者說是理想主義者。我還是更支持Perens所說的，自由軟體和非自由軟體可以共存。</p></li><li><p>58:25 電影又開始“攻擊”微軟了，我個人一直認爲微軟是家偉大的公司，推動了平民化電腦市場，使得普通百姓也可以輕鬆使用電腦。不過壟斷確實不是一件好事，Linux等OS的飛速發展可以迫使微軟努力向前走(1:01:17畫面中的“Microsoft Welcome the Linux Community”無論是公關還是誠心的歡迎都是一個很好的舉措，有大企業該有的氣度，至於爭論的話題，個人覺得推給OEM沒問題)</p></li><li><p>1:02:47 “共產主義”這個問題更多是意識形態上的東西，電影裏就可以看出，當這些開源人士與社會主流意見不同時，又因爲行爲上有共產的思想，就被說成是“共產主義”。實際上意識形態這種東西，被統治階級拿來使用，畢然是要求人人信服的(至少在表面上)，不然如何維繫穩定。至於把“共產主義”和Open Source扯在一起，真的是有夠搞笑的(特別是Eric迴應的那副表情)</p></li><li><p>VA Linux首次IPO真的讓人吃驚，開盤價30塊，期間達到了320、340塊，最後收盤價299塊，打破了最高開盤交易記錄，what the fxxk!!! 科技創造奇蹟!!!</p></li><li><p>最後關於RedHat和VA Linux的兩個鏡頭是想說黃金時代後的泡沫崩潰嗎？Linux未來發展該何去何從還有待進一步的觀望？</p></li></ul><h2 id="字幕勘誤"><a href="#字幕勘誤" class="headerlink" title="字幕勘誤"></a>字幕勘誤</h2><ul><li>2:11  “它有12萬使用者”—-&gt;“它有1200萬使用者”</li><li>28:58 “(約238萬新臺幣)”—&gt;”(約17萬5千新臺幣)”(91-92年匯率大概爲TWD1=USD 0.04)</li><li>36:33 “2萬5千行程式碼”—&gt;”25萬行程式碼”</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的&lt;a href=&quot;https://blog.joouis.com/2019/watching-notes-revolution-os/&quot;&gt;嵌入式笔记&lt;/a&gt;第一篇，原文写于2015年。&lt;/p&gt;
&lt;p&gt;这篇笔记是当年参加Embedded System 2015课程的作业之一。Jserv的课程使我受益良多，也帮助我迈入了计算机科学的殿堂。他的课程在成大是出了名的“硬”，信息量巨大，上课基本就是划重点加答疑，课下需要大量时间去自学和实践。同时他也一直鼓励学生参与开源活动，甚至把作业发布到例如Hackpad（现今Dropbox Paper）、HackMD等协同文档平台上，既可以作为自己的网络备份（这也是为什么我还能找到这些“黑历史”😂），也可以供其他人参考、交流。&lt;/p&gt;
&lt;p&gt;2016年随着Hackpad被Dropbox收购并推出新的产品Paper，Hackpad上的数据也被自动移植到了Paper上。在这次数据自动迁移中，当年的不少作业笔记被遗失。在2019年的尾声，我会陆续将仅存的少量有意思、有干货的笔记从Dropbox Paper中翻出来放到博客中，也算是对当年热血岁月的一次纪念。&lt;/p&gt;</summary>
    
    
    
    <category term="系统与底层" scheme="https://blog.joouis.com/categories/%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%BA%95%E5%B1%82/"/>
    
    
    <category term="embedded system course" scheme="https://blog.joouis.com/tags/embedded-system-course/"/>
    
    <category term="os" scheme="https://blog.joouis.com/tags/os/"/>
    
    <category term="open source" scheme="https://blog.joouis.com/tags/open-source/"/>
    
    <category term="free software" scheme="https://blog.joouis.com/tags/free-software/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft Hackathon 2019 Winner</title>
    <link href="https://blog.joouis.com/2019/microsoft-hackathon-2019-winner/"/>
    <id>https://blog.joouis.com/2019/microsoft-hackathon-2019-winner/</id>
    <published>2019-11-29T17:50:38.000Z</published>
    <updated>2019-11-29T17:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="https://hzrzxq.bn.files.1drv.com/y4my5VWQjPz_VXUhyL_goql12qS5FYtb_-sIBFRtzF93-Cenee-f8mMtWOpjC_lKRfsJNVpH68wgbzFHd19I3JxD4Ilqcnf89z_HYGYvomN9C9SXfsm9UsXlNNx0jFBm1r7hbEkN3bksY4gDoEAtDV81jJ9-GY_qim98MNc5Lp9DrV5Lahn25prbnjjnNKtPWBbQmA8E1HbcXBHI7DTdkaR1A?width=3024&height=3780&cropmode=none"></p><h3 id="Biang"><a href="#Biang" class="headerlink" title="Biang!!!"></a><strong>Biang!!!</strong></h3><a id="more"></a><br /><p>有时候过程不对，但结果对了。</p><p>Sometimes you did wrong thing or nothing, but you got something.</p><p>有时候付出很多，期待的结果没拿到，却机缘巧合收获意外惊喜。</p><p>Sometimes you did a lot, got surprise rather than what you expected.</p><p>只能说，享受当下吧，并在下一刻忘掉这些，继续追逐自己原本的计划。</p><p>Enjoy the moment, then forget about it, keep on your plan for the future.</p><br />]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://hzrzxq.bn.files.1drv.com/y4my5VWQjPz_VXUhyL_goql12qS5FYtb_-sIBFRtzF93-Cenee-f8mMtWOpjC_lKRfsJNVpH68wgbzFHd19I3JxD4Ilqcnf89z_HYGYvomN9C9SXfsm9UsXlNNx0jFBm1r7hbEkN3bksY4gDoEAtDV81jJ9-GY_qim98MNc5Lp9DrV5Lahn25prbnjjnNKtPWBbQmA8E1HbcXBHI7DTdkaR1A?width=3024&amp;height=3780&amp;cropmode=none&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Biang&quot;&gt;&lt;a href=&quot;#Biang&quot; class=&quot;headerlink&quot; title=&quot;Biang!!!&quot;&gt;&lt;/a&gt;&lt;strong&gt;Biang!!!&lt;/strong&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="技术人生谈" scheme="https://blog.joouis.com/categories/%E6%8A%80%E6%9C%AF%E4%BA%BA%E7%94%9F%E8%B0%88/"/>
    
    
    <category term="microsoft" scheme="https://blog.joouis.com/tags/microsoft/"/>
    
    <category term="hackathon" scheme="https://blog.joouis.com/tags/hackathon/"/>
    
    <category term="reward" scheme="https://blog.joouis.com/tags/reward/"/>
    
  </entry>
  
  <entry>
    <title>Build web E2E test system from scratch</title>
    <link href="https://blog.joouis.com/2019/build-web-e2e-test-system-from-scratch/"/>
    <id>https://blog.joouis.com/2019/build-web-e2e-test-system-from-scratch/</id>
    <published>2019-10-06T09:31:00.000Z</published>
    <updated>2019-10-19T18:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>The topic of end-to-end (E2E) test is a platitude in web front-end (FE) domain, especially most of blogs are talking about testing frameworks out of the real web production. The real world needs solution, for E2E test which means a service can do E2E testing and alerting with stability and even good performance. This article will introduce how we design and build our E2E test service for the newer version of our <a href="https://docs.microsoft.com/en-us/azure/machine-learning/studio/what-is-ml-studio">web application</a> based on popular web FE frameworks and integration with abundant Microsoft services, including several workarounds to tell the problems we met and how we overcame them.</p><p>In addition, I shared this system internally at first, then it becomes my first blog article in English. Probably I will translate it into Chinese sooner or later.</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote><p>“End-to-end testing involves ensuring that the integrated components of an application function as expected. The entire application is tested in a real-world scenario such as communicating with the database, network, hardware and other applications.” Defined by Techopeida. </p></blockquote><p>This topic is a platitude in web FE domain, especially most of online blogs are talking about testing frameworks out of the real web production. When we were facing the task to build E2E test for the newer version of our web application, these questions came across my mind:</p><ul><li><p>How did previous version of our production (V1) do E2E testing?</p></li><li><p>Can we leverage V1’s work?</p></li><li><p>If the legacy solution doesn’t meet our requirement and we need to build another one from scratch…</p><ul><li>Which FE test framework is the best for us?</li><li>How can we run E2E test as service with stability?</li><li>How to associate our test data with internal alerting service?</li></ul></li></ul><p>As you can see, there are bunch of questions for us to figure out. It costed two teammates’ and my 2 weeks full-time work and another 2 months part-time work (about 1 day per week) of mine to deliver the first <strong>acceptable</strong> version, though test service had been online after first two weeks work with some workarounds.</p><p>The following parts will cover the answers for questions above, several workarounds we made, and an use case to help our team achieve more 😊.</p><h2 id="Legacy-solution"><a href="#Legacy-solution" class="headerlink" title="Legacy solution"></a>Legacy solution</h2><p><img src="https://izqxiw.bn.files.1drv.com/y4mVIEZDs-Pp1DhfEUUOk8Enojm1rCeKLwoiO39tEFHVND_OkQ_HsiOi3aJsMXEvoIwAJaHphIn9g2J3Ht0G95NzAWMLUOIfDeurNKwBPDZtSLHuon-P4ZyyaVgMLKJvmg4HNgVQbjeoPPRcW5xWBsWxjT85pap2x-xizPAk0GagJ4LtvS6WUQbjaoNLYBEoNbP78OPm4EMdFFeDvi7VzbEOQ?width=3563&height=1506&cropmode=none"></p><p>Solution for V1 is developed in about 5 years ago. Selenium is chosen as test framework, it’s usually for automating web applications for testing purpose. Test service is based on .Net framework as well as test cases coded in C# which is a very typical Microsoft style. They will manipulate Selenium client to do testing on different browsers for various scenarios by browser drivers. And the service is hosted by Geneva Runner Service, the part of Geneva Monitoring system. This system is a really useful and important internal system, Metrics and Alerting services can help for logging runner data, filing tickets in Incident Management system (IcM) and finally reporting to service owner through phone call , text message and E-mail when high priority ticket issued.</p><p>Here are the thoughts why we deprecated this solution:</p><ol><li>Most of us are web FE developers, it needs efforts to learn C# stuffs and write new E2E tests.</li><li>Documents are incomplete, hard to set up and deploy, and we also don’t know the details about how it works with Geneva system.</li><li>Tests can’t work for Chrome/IE/Firefox since 2016 Spring due to browser drivers were out of date, needing effort to fix it.</li><li>Checking log on Geneva system is not so friendly.</li><li>More technical debts concern for such an old project.</li></ol><h2 id="Dynatrace"><a href="#Dynatrace" class="headerlink" title="Dynatrace"></a>Dynatrace</h2><p>Since legacy solution had been rejected, one of my teammates YL surveyed another sophisticated solution named Dynatrace and created a basic run experiment test for all regions. Dynatrace is a no-code platform and can create test case easily by recording user operations on the target website after installing its Chrome extension. It’s also easy to integrate with IcM system due to a custom Dynatrace service already exists internally.</p><p>Sounds perfect right? But nothing is perfect. The same test in just one region couldn’t pass while in other regions were ok, layout and DOM elements were all the same except different URLs, and of course we could pass the test manually. It took YL and me 2 days to find what’s the matter, and finally we gave up 😭.</p><p>Besides the unknown reason above, I also think it’s inconvenient to customize amounts of test cases due to the visual interface, at last the auto generated CSS selectors can be improved :).</p><h2 id="Main-goals-of-our-FE-solution"><a href="#Main-goals-of-our-FE-solution" class="headerlink" title="Main goals of our FE solution"></a>Main goals of our FE solution</h2><p>Since we decided to design and implement our own solution, first of all was to make clear our main goals. To build a complete solution at least as good as the legacy one, we need to:</p><ul><li>Select a popular JavaScript (JS) test framework and write new tests based on it to cover main scenarios of our production.</li><li>Set up runners to run tests periodically and save test metrics to database like Geneva Runners Service does.</li><li>Associate our test service with IcM System to enable alerting feature, it’s best to leverage Geneva Monitoring system.</li></ul><h2 id="Test-framework"><a href="#Test-framework" class="headerlink" title="Test framework"></a>Test framework</h2><p>We’re good at JS and web page things, and there are lots of popular JS E2E test frameworks, so it is no doubt to choose a test framework in JS. We would write JS script based on this test framework to automate browser: navigate to our target site, login with our test account, then do what we expect by capturing DOM elements via CSS selectors and trigger DOM events like clicking button.</p><p>We already picked Jest as unit test framework for our React components, but another teammate YC chose TestCafe for E2E test at beginning because he had bad experience in E2E stuffs with Jest before. The most fantastic feature of TestCafe is it automates browsers by injecting JS scripts instead of invoking exposed APIs from browsers like Selenium does, so this allows TestCafe to run on any browser, including on mobile devices, and have a full control over the JS execution loop.</p><p>Unfortunately, after YC and I wrote some complicated test cases, we both found that tests would fail inexplicable at some steps, elements couldn’t be captured by our scripts. We didn’t have too much time to solve this problem, thus YC had to switch to Jest with Puppeteer plan quickly. Fortunately this plan was not bad, most of steps worked fine and then I wrote more test cases based on it, including common functions like login and full scenarios like run an experiment.</p><p><img src="https://izqwiw.bn.files.1drv.com/y4m2Nc_cet04-QcpRzOp96cELYLtivmdXJafashQoIjgEf-NqD2Rh0zj8QvKJKKnlPrB7z-0-xkzuy2i43jwve-lRbrA4elIXUuBlVD-52oIP00K8bCqQmCJDFEtM4o4evMpc0VUZ5G66-upk1mTOvr079loRvaEjF5tBVcA2S1ZVgjTQTUBtG2h1eWDB_QnGMkvXwKO8wy41Ka0EsA8F8zlg?width=2289&height=1528&cropmode=none"></p><p>The biggest challenge of this part is robustness of test case scripts, which means test case can’t fail when our web application is healthy, false positive rate should be as low as possible. The unexpected failures may caused by network traffic or browser lag, we need to reorder our actions with reasonable sequence, set enough timeout and try many times to make sure test cases are stable.</p><h2 id="Service-framework-Windows-Task-Scheduler"><a href="#Service-framework-Windows-Task-Scheduler" class="headerlink" title="Service framework: Windows Task Scheduler"></a>Service framework: Windows Task Scheduler</h2><p>I don’t have any preference on the OS of platform, there was an idle Windows server virtual machine (VM), so I started work on Windows firstly, meanwhile also applied for another Ubuntu server which I was more familiar with as backup.</p><p>YL proposed to use Windows Task Scheduler to run our test cases as runner. It’s easy to set a test runner, just create a new task, add “Start a program” action as trigger with the instruction we used to type in command line to run test cases, that’s it. However, this tool is obviously not design for service, these drawbacks really annoyed me:</p><ul><li>Tedious configuration: can’t add multiple runner actions in one task, having to create a new task with repetitive settings for a new test case.</li><li>Unfriendly log: too simple to see what’s happened to the runner, can’t see any log emitted by console, “History” tab and “Last Run Result” tag are really… useless.</li><li>Not stable: sometimes runner just exited for one or two minutes, while sometimes it went well.</li></ul><p>So we can say that Task Scheduler helped us do proof of concept (POC) quickly without any code, but it’s not design for service, we should find another plan. Before we talk about the new plan, let me introduce the metrics feature I did to make up the drawbacks mentioned above.</p><h2 id="Metrics-Flow-connectors"><a href="#Metrics-Flow-connectors" class="headerlink" title="Metrics: Flow connectors"></a>Metrics: Flow connectors</h2><p>Metrics is a very common part in system. It’s the data source for monitoring health status of our E2E test, here we need metrics of runner status like test name, region, test result, duration and so on. Moreover, since we can’t get too much runner information from Task Scheduler, I had to log some metrics of running status to help me debug runner process.</p><p>Metrics is usally stored in database. There are two ways to communicate with database, the simple one is using client library provided by database vendor and call database APIs directly, this usually need authorization work in connection stage. For Kusto database which is also used by our production, it’s not easy to write data ingestion function (like data insertion in SQL) in Node.js due to the bad support of SDK and complicated configurations (finally I did it 😂, but we’ll talk about it later). So we had to try another way, using an authored service to forward our requests. Of course .NET framework can do this thing easily, we already did it before for client-side metrics. But I still made a quick survey and found a handy tool called Microsoft Flow.</p><p>Flow is a no-code platform that helps customers to leverage plenty of Microsoft services by corresponding connectors, including database connectors for Kusto and SQL. Simply to say, forget about authorization, just add a Kusto query connector into your flow, configure settings and query instruction for your Kusto database, lastly run your flow, then you can get your Kusto data. However Kusto doesn’t support ingestion connector, I had to applied for a new Azure SQL database resource and set a SQL insertion connector.</p><p>How to receive data from runner was not a hard thing too, Flow provides a set of HTTP triggers with public links as APIs, our runner will send a HTTP POST request to our trigger after finishing test work, and the trigger will collect HTTP payload which is our metrics and pass it to our SQL insertion connector.</p><p>This flow looks like the one in following picture.</p><p><img src="https://ijqriw.bn.files.1drv.com/y4mdq9rJEIcZscmSbBmGaXVQFCWqbn6B_Jtpez7xoXqO9ahNGPtn2FTgqUCaP5u6AbDqj3MguU_TKAdv6tKkrGn5EILeTX-i7371AOvXup0ALgv9BM87OMN2ZMxZhJ52dtGfljMvoPuGN58Ierv4-HRY34k9nZq1SrttqvdbJVRgsSUdLUM2-oEvAtuI_zfHT8KdfhrFuDzMSffRKABtG_ieA?width=1029&height=1544&cropmode=none"></p><p>One more important thing in this section that you may think about for a while: <strong>our runners are running on a VM instead of cloud service, also Task Scheduler is not stable, how to ensure our test service is always running? Or how to keep stability of our service?</strong> If once the service stopped, how to recognize this disaster as soon as possible? A simple but useful solution is detecting heartbeat. Since we already stored metrics in database, we could query latest row and check its timestamp regularly to see if runners were still working. If time interval between latest record and current time exceeds an hour (one hour is the timeout of run experiment test), our flow will trigger IcM connector to file a ticket named like <code>[E2E][AUE] Runners are missing heartbeat more than 60 minutes!</code>.</p><p>We also built several dashboards for service stability which will be introduced later, at present we have simple metrics and alert, let’s take a look at following diagram to see the whole process.</p><p><img src="https://izqviw.bn.files.1drv.com/y4mT0O6QIR606q0fqHpLm__3PE8AqIiR2YDgNuGNeSkJDTjL1e3hexU_3FeC89QcZPS7bVfQ3xOmPCT7LxoXWv5qZjz7Hed0E-gD6tbolOrpNSAoP55rzq1EuQQU0xF-oC_oNE_KtowDQCzEN9p-Yee7V789d7JTSlfAKNduujL5zC5lX6f5b6SHEgkzrqxNd8LdihMo9iVdi77WOvWj5Ca0g?width=3514&height=1469&cropmode=none"></p><h2 id="Service-framework-Egg-js"><a href="#Service-framework-Egg-js" class="headerlink" title="Service framework: Egg.js"></a>Service framework: Egg.js</h2><p>Although data flow has came from runners continuously and somehow went to the database and IcM system, it’s far from a real service. We would replace Task Scheduler because of its drawbacks, then optimize the rest parts of data flow.</p><p>You can’t imagine how fast JS is developing. From Express.js, KOA.js to Egg.js, server-side JS Frameworks now act more and more important role in business world. There are three reasons for me to build our service based on Egg.js:</p><ul><li><p>Not only I’m familiar with this framework, but it’s also an out of box framework with well documentation. Comparing with Express.js, KOA.js offers a middleware onion model to handle asynchronous operations easily,     and Egg.js is based on KOA.js with more key features for building enterprise application, such as clusters and production mode.</p><p><img src="https://izqyiw.bn.files.1drv.com/y4mD34YcwXwufGCN7tTO-TyujEuRZjnrv-_98U7WHiLaeoDs6iwI_zXBt_JTPCte6HzX8QetLutH3h4NNAoucWTSNCLmVXTy2pNKSdHex1V34HPverU_Ze6tp7inz7v7ucKDQglgzrwq7IY4fbJTmpJNF9DufS8_AZcTTvSBV4eCY0GD1_ULYkvwVoAcw4jvsHkSEtrRFgPYxzf4X__-IP6GQ?width=478&height=435&cropmode=none"></p></li><li><p>High performance with robustness, we already built several productions based on it in Alibaba for 11.11 shopping festival in last few years. Node.js service is good at I/O operations, and Egg.js offers a multi-process model to take advantage of modern CPU. We’ll talk about how it applies to our scenario soon.</p><p><img src="https://ijqsiw.bn.files.1drv.com/y4mbX_cLLffjERi_Ux4rpLqFnq7sy5JilYOgB2QG7mtef3KC1IQ3Je0QX2RHeaAoUNGAOU9rYP0Z4lH8FC62lnKBRWNNjL1Ltp1sa5v7EWPV1Wx-MYN9_GrWB5ljJU-K9OqSBL9kpvE-aLVipsraSj7ort1pAe6CA0ScNNlGDElYFjMP01Lb-X1GwxC4kfKq1iAa_0a-91A2v7cuwbqCfMczg?width=1131&height=782&cropmode=none"></p></li><li><p>Featured plugins like logger, scheduler, static server, i18n, session, security, template engine and so on.</p></li></ul><p>For our application, the core requirement is writing several scheduler scripts to spawn child processes for executing our test cases, framework will call schedulers by the intervals we set, and distribute the job to workers due to their workload. Egg.js has a master process as daemon process, then spawns an agent process to do common works like logging, at last creates numbers of workers (usually the number of CPU cores) to handle controller’s and scheduler’s business.</p><p>We intend to store metrics to Kusto database, then use Kusto to Geneva Metrics service so we can take advantage of Dashboard and Alerts features of Geneva Monitoring system. In current stage, I could only check results in SQL client tool. We would implement it in next chapter.</p><p>Moreover, <strong>there is a gap between runner and E2E test</strong>, only runner finished correctly and then metrics of E2E test can be stored in database, what about run-time status of runner and what if runner goes wrong? So I built a trivial dashboard (time is too precious 😔) to show basic information of runners in running or failed status within a day by React.js and Fabric UI components, hosting all resource on our service.</p><h2 id="Metrics-Kusto-Node-js-SDK-Kusto-to-Geneva-Metrics-service"><a href="#Metrics-Kusto-Node-js-SDK-Kusto-to-Geneva-Metrics-service" class="headerlink" title="Metrics: Kusto Node.js SDK, Kusto to Geneva Metrics service"></a>Metrics: Kusto Node.js SDK, Kusto to Geneva Metrics service</h2><p>Based on powerful service framework, now we can migrate data insertion work from test case script to service scheduler. It will bring three benefits:</p><ul><li>We can leverage Dashboard and Alerts features of Geneva Monitoring system, this is the most important.</li><li>More robustness since insertion request will not be sent if test case script exits unexpected.</li><li>More efficiency since no more request forward needed.</li></ul><p>There’s no doubt that it’s the first time to use Node.js with Kusto SDK in my team, but after consulting several senior colleagues, I realized it’s also the first time to use Geneva Metrics via Kusto to Metrics service. Following various documents as well as spending lots of labor work, finally whole data flow could work. It is worth to mention that official data ingestion library named “azure-kusto-ingest” had bug for a long time, I created a issue under their GitHub repo and used inline query way to bypass this problem.</p><p>So here is our new system work flow.</p><p><img src="https://ijqqiw.bn.files.1drv.com/y4mlEoQnSUS7uj0M79I1RAUaT-PNrYMLKZA2vcDLn2d4FZz_9LA2ivxaXEVQPOzLefIvTlizATcKXT_luuuf_5aUosX23XWM5mCQvBx37p0dDE1qGCwryp3CHJYyMyUmJM1hibz_bMuBxIIjNKWLdROIWYPCI5I8qInisKeU5Xp8vefx2QDNfNYuFzpXHlUohB65zt7br_mOaZV0_oQVZCw3g?width=3594&height=1945&cropmode=none"></p><p>Node.js can run across all popular platforms, I put service on Ubuntu server because we need to take full advantage of VM, graphical interface of Windows server is meaningless but also costs some resources. Each runner will cost about 500MB memory space (mostly taken by headless Chromium), when 30 runners work simultaneously I can’t even move the pointer on Windows server but nothing is difference on Ubuntu server through SSH connection.</p><p>You may find another “Heartbeat” flow disappeared in above diagram too, Alerting service of Geneva takes this responsibility away. We set several alerting rules for E2E test metrics, if the “real time” (actually 15 minutes delay due to Kusto to Metrics service, it’s also a crucial problem) data can’t meet one or more rules, Geneva system will file ticket automatically with preset configurations such as severity, team/owner to assign, trouble shooting guide and so on.</p><h2 id="Use-case-Supporting-benchmark-test"><a href="#Use-case-Supporting-benchmark-test" class="headerlink" title="Use case: Supporting benchmark test"></a>Use case: Supporting benchmark test</h2><p>While we ramp up E2E test work, a senior teammate led a benchmark test targeting at performance bottleneck of running experiments. This test needs both persistent and appropriate pressure to keep the loading of related backend service, our E2E test service is the perfect choice to trigger new experiments. Here are some highlights during this cooperation:</p><ul><li>Comparing with no-code solutions like Dynatrace, our test cases can be extended easily for various experiment type, regions and compute targets. Sometimes coding is faster than “clicking”.</li><li>As we mentioned above, more than 30 runners worked well simultaneously, limitation comes from the 16GB memory. And we ever triggered more than 1000 experiments per day stably.</li><li>Validation showed that our test results came from web page were uniform with backend service.</li></ul><h2 id="Looking-forward"><a href="#Looking-forward" class="headerlink" title="Looking forward"></a>Looking forward</h2><p>You can take first chapter “TL;DR” as conclusion, in the last chapter is about improvements from several aspects. We’ve said that this is just an “acceptable” version in the introduction, obviously lots of progress can be made, there are some thoughts in my mind:</p><ul><li>Deploy this system on Azure DevOps and connect to more Azure service like Azure Key Vault.</li><li>Support other popular browsers and cover all essential scenarios.</li><li>Enhancement of service and runner management. Providing a UI tool to empower other teammates (especially on-call guys) to manipulate E2E test, like restart specific runner, or create new runner based on configurable template.</li><li>Better experience to debug failed E2E test. For example, our test framework can generate screenshot of failed moment, but how to management and display these screenshots need well design, and of course these can help us debug more efficient.</li><li>Share the service to help other teams which are obsessed with E2E test. For instance they need only write custom test cases then upload to our system, no worry about runner execution, runner management and dashboard service, sounds like another Geneva but designed for E2E test.</li><li>Leverage AI technologies to explore new test experience. Write and update test scripts are really heavy loadings, instead of repeating these boring works, can we use reinforcement learning to answer this classification problem with snapshot pictures and test result as inputs? Label snapshots is very easy, all we have to do is train a robust model.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;The topic of end-to-end (E2E) test is a platitude in web front-end (FE) domain, especially most of blogs are talking about testing frameworks out of the real web production. The real world needs solution, for E2E test which means a service can do E2E testing and alerting with stability and even good performance. This article will introduce how we design and build our E2E test service for the newer version of our &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/machine-learning/studio/what-is-ml-studio&quot;&gt;web application&lt;/a&gt; based on popular web FE frameworks and integration with abundant Microsoft services, including several workarounds to tell the problems we met and how we overcame them.&lt;/p&gt;
&lt;p&gt;In addition, I shared this system internally at first, then it becomes my first blog article in English. Probably I will translate it into Chinese sooner or later.&lt;/p&gt;</summary>
    
    
    
    <category term="Web 前端" scheme="https://blog.joouis.com/categories/Web-%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://blog.joouis.com/tags/javascript/"/>
    
    <category term="e2e test" scheme="https://blog.joouis.com/tags/e2e-test/"/>
    
    <category term="nodejs" scheme="https://blog.joouis.com/tags/nodejs/"/>
    
    <category term="ui test" scheme="https://blog.joouis.com/tags/ui-test/"/>
    
    <category term="jest" scheme="https://blog.joouis.com/tags/jest/"/>
    
    <category term="testcafe" scheme="https://blog.joouis.com/tags/testcafe/"/>
    
    <category term="puppeteer" scheme="https://blog.joouis.com/tags/puppeteer/"/>
    
    <category term="kusto" scheme="https://blog.joouis.com/tags/kusto/"/>
    
    <category term="geneva" scheme="https://blog.joouis.com/tags/geneva/"/>
    
  </entry>
  
  <entry>
    <title>2019 说走就走的珠海之旅（下）</title>
    <link href="https://blog.joouis.com/2019/2019-zhuhai-trip-2/"/>
    <id>https://blog.joouis.com/2019/2019-zhuhai-trip-2/</id>
    <published>2019-06-23T08:42:44.000Z</published>
    <updated>2019-06-23T08:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-yaAKqGdn" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="18663106" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-mini="true"    ></div><h2 id="上一集"><a href="#上一集" class="headerlink" title="上一集"></a>上一集</h2><p>《<a href="https://blog.joouis.com/2019/2019-zhuhai-trip-1/">2019 说走就走的珠海之旅（上）</a>》</p><h2 id="6-8"><a href="#6-8" class="headerlink" title="6.8"></a>6.8</h2><p>书接上文，由于大姐不幸病倒，接下来的一天半基本就是三妹带着我到处吃吃走走。这个下午的时光感觉失而复得，也不再遵循之前的计划，就先找个地方吃饭，容三妹研究路线后再做决定。</p><p>从急诊大楼出来就能看到新葡京酒店和澳门旅游塔，山顶医院的位置实属不错，闹中取静。</p><p><img src="https://jtpu8w.bn.files.1drv.com/y4mGLfIQwxFhHEeHb30ncExKbQ3F622mbW5GsbAgcZCwAhD8CYIOysr971nYk7ehGVuNOMHKG9sCe6N3wvOazzdeXdIcscYW8VQr7L1c6oU42fo-GTD6UqOU0C7km-gQLPpWAcU6GEc7NJrTIfx8bL9Jk579DI1Vdj4WiJxIJSCx4bXgcF6kqQdYPKI2a7kAKRksU_T96LYnuEHlhCW3pjCnA?width=1512&height=2016&cropmode=none"></p><p><img src="https://hzomaa.bn.files.1drv.com/y4m1VBXLfVCNiPkEjKWjA9mee7zMfL92va0Pj6n7r-pS_Y3dKFdWJW9o7PcCm-0OLKE_GAhBSoYLVhEKcsp5Thr4XpPp-gNJJe5tK-wZy4Avbb1mLCHZAcG2TnNkAJ8YXVxarETPVmqM05JKjm_DsmSoRw2Ur9HVzQszzmQnAvuKtbZ4KzkR3xEJrkLg1Tz5kutC65qV9DMwTho73_9eFEDnA?width=1512&height=2016&cropmode=none"></p><p>走了大概一刻钟就来到了闹市区，街头的游客非常多，尤其是公交站附近人头攒动。几次路过新葡京时都能看到很长的等候接驳车的游客队伍。道路是右舵驾驶，街头也能看到不少破旧的矮房子，这个顶着中国银行 LOGO 的大楼有点扎眼哈哈。</p><p><img src="https://hjoqaa.bn.files.1drv.com/y4mxoYvBcTv5YxdPgsZtMjA61_BKUgxZ2xI-kEQKMcqqBLU4sbF0QCAL7eZAODT9ygn5-NFS3MwAh5M-fVnIaN-BqO5rACrEiH376HjwZIf9wo_EAX1SGqbDBaixilDyHLjwZz3RenYBB5f_4ngKlq7gGj5ulwvjaLaQNynNI2tTj5xD1m9qfNRE9ClpOBkpr7VFIakunE8m-eNw2IqUjLmgQ?width=1512&height=2016&cropmode=none"></p><p>新八佰伴是澳门唯一一间百货公司，挨着它的马路中间有家很有格调的花店，等红灯时刚好可以进去看一眼。</p><p><img src="https://idooaa.bn.files.1drv.com/y4m3QaRqchereKbIIKSaWsPnLjldFbTFPZpaC2z6sY07s2fk-BwdL_ef2NSfmYmIQNu73rIeIqLqxYkGSO_3eSHvp65JEJFcUPktZyM4AfV7TJqH4LR-FJv44H4sSYbtolGP5b9xu_O9wyFbSuyuPfMsPJdD0sWgObjNepw69fQY4fU2mVi1JizOeyEQBtxmW7Otmd3y8gayrpJ4f8US1MaHg?width=1512&height=2016&cropmode=none"></p><p><img src="https://jjps8w.bn.files.1drv.com/y4mV6sOTlZpJ3_2V_XK7XRQt3XdbI_JioJ1kquBE9VDLr8f3RnapQJBdlPHJ4YdQlLpw_1iMpQxogJitAAGARHnCvuC5chRuO6ils5iJ0GikEZKBORWCvIr1Wn9LyQfnER2ndVR1wyNAt9MHWFquAnk3Ofk1P6XUc49H-ErphoffmstFV6Ge3isi7xIJVxQg42-yZq3GQNAvY8NjssyyPYinw?width=1512&height=2016&cropmode=none"></p><p>此时已经下午两点，饿意渐浓，我们先进新八佰伴吃午餐。美食广场在八楼，没想到这个点人还非常多，等我们找到位置、拿到餐点已经两点半。食物的味道还行，就是一开始觉得好饿点多了。</p><p><img src="https://hjokaa.bn.files.1drv.com/y4mew2vYuc7mVlOV6B7bGECoG1hTglKnGSCK9uyLGw9pZVI2fg0FS06J7HmH1RYKQxYl6ly_c90XJy2v-RFeHWTdAFdcvgvVoQc75rmNvxyvUsv3hEG80qM77ducxyHcKKLTC1Haxenxn3LLLUt8evT7u574UCFz7SWWHMVpz8AaBPJxHDXc9ImahCMupQKzPqJzmxHUkTG0HKrbzT91R5nGw?width=2016&height=1512&cropmode=none"></p><p><img src="https://jdpy8w.bn.files.1drv.com/y4mM46NyicARWpktlGUjJRYUGINaAREDvXwaDN1-jVq0DCO355YHCY9mPAxgf4_LXEk2DcVjRuqW3wvuGtZ7R3kFDwMtJ_yKdQLw4HfbaTGkbPNKNh0VRltWhslHgiH4lYaHc-Y36gYGKHk4vpzzG7L8E0xWa_IFn4U47BChe1liygG291jEp49ss9T4O1xl3wyGkIX_gz7qVYzwvaD3zP9xA?width=2016&height=1512&cropmode=none"></p><p>这个烤鳗鱼甜不拉几的又比较肥，差评。</p><p><img src="https://jtp08w.bn.files.1drv.com/y4mDi9LKGg32k_b8f4Rnf2trh0VfpJn376vKkfJ1RDIg7zN9gYIcYlF4CZhygt8BSrS_sh_mbQLG4ChCz_owuEip8SmWUtLw4TazM0OzQLu3efIpKE5h3rY2-7ZmQwT-9Wq7OqcefhO6hZiX1AVBdBbzLlAPo87LhkZgH45eJmWSUkCsgSnItu-ohJSsnawqRGcpfwrm88D8V8NL-oxBYvuuA?width=2016&height=1512&cropmode=none"></p><p>人生就是容易陷入两个极端，要么太饿，要么撑得不行。我们坐手扶电梯慢慢晃悠下去，逛超市为冒烟的嗓子买了龙角散，三妹路过柜台迅速买了个化妆品（土豪的大气 😏），最后回到一楼时看好路线：先去玛嘉烈买蛋挞，随后去大三巴打卡。</p><p>再次回到街上真的是要把人热化了，本来想看劳力士的心情也荡然无存。路过 Omega 橱窗时被这个小金人闪到。</p><p><img src="https://izpy8w.bn.files.1drv.com/y4mdwbqQv5t57UMfXZTx5B-3VHB9sOh59hHYrB8MUKaLaTOlJz6wAyxZf-OAY2fNTnQxqPWUrzILv9uNPlBV6beLxkESd1YZ_YG-f63SuMOGDMeQfxoY5RKdrfsOSFDdBN7DXeS4i4F7zclwzUwaINhOhxwDkfENLX3ZnIFBPGaqQKM_74KH9K7TNuOMe2UNcUdBOmlnsy2QFALpy6i9ZaKTg?width=1512&height=2016&cropmode=none"></p><p>澳门的葡式蛋挞非常有名，可能最出名的店就是安德鲁，但是名气大就意味着人多。三妹带我来的这家叫玛嘉烈，取自老板娘的名字。据说她曾经是安德鲁的妻子，离婚后自己开了这家店，所以味道和安德鲁差不多，人气也是非常旺。从店的门口往外共有两条队伍，先排左手边的这条点餐和付钱，拿到号牌后再去右边的队伍等待取餐。</p><p>为了几个蛋挞和牛角包排了大约半小时，我也不知道为什么我会干出这么傻逼的事情。更重要的是当时天那么热，我们不久前才吃了午饭，现在哪有胃口再吃别的东西。后面就一路把蛋挞和牛角包背回了珠海，蛋挞给三妹带回家，牛角包放了一夜太硬直接被我扔了… 😓</p><p><img src="https://idpw8w.bn.files.1drv.com/y4m8EaVBLcF5uRg1NnsqE61iDO_bR0lsoHcvOvJqAg9rdZmVkF88F96r822XqyrvQ6lzR4V-uAlUVN3ZfIqU0IAqXAKXvuaCWl47DUXtkB3EXp1jcTnZDa1pW-7ZFhrvqgl8mNZvynAyttJDOeIm81di9aS3CH-xvEa0LL7FhEXr2XV4avIceAB4nZ4_eCxd2l-OjkRpZJoJtMT_tURWU3etw?width=2016&height=1512&cropmode=none"></p><p>沿路可以看到有不少旧房子，即使是再繁华的都市也少不了衰败的街景。新葡京酒店就像电影里召唤外星怪兽的建筑一样，毅然耸立在一群 “老破小” 之上，画面冲击感太强了！</p><p><img src="https://itoqaa.bn.files.1drv.com/y4moGSChOEc7tVniHUkEaYzW8OfWRXbQFk9wUAUFdk7Dkg2IB2GihyS1E7uWJYQb5AQni8n0bEbIn23XJYSmK-l7Xdr_VbPAH6-ZJ3SGIQqowHgoRBxlfVVD7jgucquwLp85BXV1yAoW1ZlfxHVD34wp8oj00qofEIsQ7sAT_OyVuWvLULxf1lOwrOY0fK2-iQo6iUvXSnbnspx-5p2IthiLA?width=1512&height=2016&cropmode=none"></p><p>打开流量看下微信，大姐依然没动静，我们就继续向大三巴前进。我们距离大三巴其实并不远，全程也就花了二十分钟的样子。只不过走到还剩一公里时，路上基本全都是人，三妹干脆直接走我身后抓着我的书包，以防走散。</p><p>坦白讲看到大三巴这个牌坊的时候，我的内心是失望的。这么热的天，这么艰辛走到这里，就为了看一堵墙？虽说拿别的历史遗迹作对比没有意义，但当下的直觉就是青岛的天主教堂完全秒杀这里嘛。</p><p><img src="https://jdps8w.bn.files.1drv.com/y4mdHV4MLGRhXn0LIAyeHGIvsvoKzNEjTCALNKWfS5TrHtw_sxy9D7oXm4nbaF1sRi5sNdar5C6V5Zf5v6rUImrOHdTXyPM0_looEGHyutxJtIVJlL-R9Oyvu0vyggV6x1wZAxeY0_demM8J8uzqMAhcYfOUQ7D-yGtkE_WBDl21ysAsaiSjFiD-vANrZqIEOqeX7Xoy2xoZG-IwcwhIgQtOw?width=2016&height=1512&cropmode=none"></p><p><img src="https://jtpz8w.bn.files.1drv.com/y4m7bMoW9Om1SUnFMHqg_NDlUa2sMOittwiNViWARqv93ps-Ifq-esgPD5skdlRHMQkKT107E8LYPb_xweJGsYNZwquXL1eBV7cmRkvJULqb7qCv6bWTWHhEL47zFQ_NOdP1pFWmT3K2NQgoYvCLGafT2GXPqoLxhILNeTVWhbqv5by3Y9HW0KadlSdWQE04ASowdEUhPSp4GN28Jl1MjoF2g?width=2016&height=1512&cropmode=none"></p><p>过了这堵墙是炮台遗址，但是为什么坑里只有沙子连个大炮的配件都见不着，这不逗人玩么 🙄！最里面还有个在半地下的天主教艺术博物馆，只想说，真凉快啊…</p><p>在大三巴牌坊的侧面有一块不显眼的石碑，应该是 1602 年教堂重建的奠基石。</p><p><img src="https://itooaa.bn.files.1drv.com/y4mG1p0BJvya2MatFl-JmZRa3XQvP_9Wr_ROAlB4ClZyOWnwgAgjWGEJeh4_eU0mjpl0bWnToTHzchyzHcgYTrMoYCYsDVaGpAfbfEVUDj3vHwW310P2CZNDs3kX705MqOpjA60K8xOEi2vpHf7uovD1Hm4NGU5uioR7m20PDW5y5j9wNmIiL2hVPt0nAni7oUIG1nz_IPrHxgtzbOouNsG0A?width=2016&height=1512&cropmode=none"></p><p>『你在桥上看风景，看风景的人在楼上看你』。</p><p><img src="https://ijolaa.bn.files.1drv.com/y4mQQTctCgo05yRA1GF4c9Ut-5CcsOQSFff6KSsdnREdGRz_dPQ4CBqYI23wIVMH0QH8_bTDCO3J6ql_Xq6TquR-oEAdtVKdvqdDWhT9qblWUPKQKB3EX2V-oOJdFUKACHTKOqBcbU7WP2Mwi_1Um0Svk7jgFctEgADYfrNtvmFhEap-xUN9M7PtFM3Nse42VyC0Fs9Wh_7WrQT53ZtqsMk-w?width=2016&height=1512&cropmode=none"></p><p>嗯国人素质… 👍！</p><p><img src="https://htohaa.bn.files.1drv.com/y4m4S6ERM0xYV9LnscWmhD9h3QCIyLS-9GNwPSbtlOJcP9gEVOYAkVF3Yl7E2u6g6X8-cyBTg55_N-HTps7c3OL-Qc838dqLgyHWolJ0iKmRBEpItRVVIu-G9DHUm_nr4IjDvuroeyWfHKfvvCpW3uTu5L-b5Nb0dl7jAI5iEJFFaZ5PF1DyVv9vNWQFlLpS_7THTNlJu5KvbNhSalyB1DGQg?width=1512&height=2016&cropmode=none"></p><p>就这么简单看完大三巴后，大姐还是毫无音讯，我们去附近的老店蕃茄屋吃布丁休息下。在穿过各种小巷时听到了舞狮的打鼓声。</p><p><img src="https://hzoiaa.bn.files.1drv.com/y4mmy42hG-bIzFqBW1Cy754T7q0DIfHLvbhaw_7vlPidNsbPKP-H1K7CcjGNuvnnoGAu80gMwACxPpzsL2I2KLJgj04bGApIg2lMapLNt_0iht2UvuqEV2CPMdvarm0fsfvMK7h0w_l-pTYWohKm98yHv45MPwgEG1hbW7n0HETUSjQj1mWgtqEnk-2_3GYrqr_ydFPLSSahDtlyS-xsY8jWQ?width=1512&height=2016&cropmode=none"></p><p>蕃茄屋主打葡式料理，我和三妹都还不饿，就要了两个布丁和一瓶葡萄牙啤酒。布丁不错，啤酒很难喝（好吧我一直都不爱喝啤酒，可以忽略我对啤酒的评价）。</p><p><img src="https://jjpv8w.bn.files.1drv.com/y4mGvAmP4U7Lttx0i8lAAdW0SAqTZNHT-WXmi7MDUlUK-Zua0WpOKzvTyyJhRvh36J9K-E1aM0enJ5HC656E6-XIGuQyBJb5xG1nwMllyTYnlmmxKnvVPflRxDkwd0GJ6Nrl5zRINf793RowGNh62sdqy_J97IeOSKfIo32a7jUllXLFnHIbxQHL8CnA5PBdh5e_iK4cRW2sqBNG_ByAc6KEA?width=1512&height=2016&cropmode=none"></p><p>这时大姐终于发来消息说她可以出院了，我们立即返程回去接她。往返都看到了这个教堂，颜值不错，那就拍一张吧。</p><p><img src="https://itpw8w.bn.files.1drv.com/y4mdjkQissp6aIfgq4dg2CD5bXcewzDNZvEGhmYqGO07X7uIXWqzXStn62E_5PTtsA4sN5x_b91l_LotlqLU4W76zGoOPSeSqbtGRfefJOxskKsIO-Bs68K067e4eWzEpwXWOYA0o96bfrDPjmK5gWLsaokxvv6l7c55Xoo7kaqlPTW9tJwDt2FL78CggG0gKm-6fhB90DyPQLf6ggpEHD7fA?width=2016&height=1512&cropmode=none"></p><p>途中还路过了书店，也进去瞧了瞧，中英葡文的书籍都有，类型上和大陆的书店并没什么大的区别。接到大姐后担心她身体没完全康复，我们计划直接去新葡京坐接驳车回珠海再吃晚饭。澳门的傍晚很好看，随手一拍都是好风景。</p><p><img src="https://ijp18w.bn.files.1drv.com/y4ma_h9IvCiaWRwkawfFI4c4kZk5IJE94YpjwY6lHbFoZYMJp9lfntgSsKojZ-1qoxGX5FWIWkcSb_Hvt-Lyq8RQhvvCwJO_6IEUhrHCee0_dLF-w4XVqf22d3diNJLFk1DoANVylU9KBHby4N6osUoJnd1BYzETYVHKb06gjlkfHrpE5bU4h1Y9_1KKG2vy4CbTbBRjipA7FXBTn_IPDvHXA?width=1512&height=2016&cropmode=none"></p><p><img src="https://jtpv8w.bn.files.1drv.com/y4mjlPKbkdNY1uJpHuLrj3YJQcGnrEqXCytsht7ng330WnHXDb12b7-E51HUCbGcEMe716zd7VU_nirn1HqsPkVcE9DzGRir7uFmjOlSTEw-DGolTVlEXsZilLwanwhJLu6hiH53ebTLX2jEytP3T-fSdvVpTqTRROWr7_56wIP_wW4VyxLmuVLkx9620CtHaERn3ptvYXUBC5yXm1efr5CPA?width=2016&height=1512&cropmode=none"></p><p><img src="https://izpu8w.bn.files.1drv.com/y4mXOOyaa2bEpTVGluZvNzIz83n4W2Ow5czKTuNnemxkVPPRHbK5yrCrnDCP1yEN_yhAaiYJfybV4of5qyosFxZ1z-wXYbbHGwrYyHrc0mToksYuBo2VSVF6j4m-GcxLoncdsNuPQttPxBgttYfvHBU2Y05fSTNTTcLF0_p0gn1hCcmznwWloCx-1jfsqSTODE-ZKv4W4qY4JKnrsQ-rVxKvw?width=2016&height=1512&cropmode=none"></p><p><img src="https://jjpy8w.bn.files.1drv.com/y4mvZDCSgs5eLF1jFohl6HEHgSWSb0_BqQhiHB9ySx-6Ij1ublqu-zXWesZNmdPWYNC3AB13eMhzIhFi9QNVbZqZH73G9csJivyvwmu-jKaVtKzOE2Ks54TitDRTWtzzRpjG6OKWeW8jbFCHz-7pGBhq3BqNp3N4yUksjs5aEktznG91_q1lRcPWJfQ8xFfDDcyqYitDMASu3I7Y0u79u2etg?width=2016&height=1512&cropmode=none"></p><p>等到了新葡京我们才知道想坐上接驳车大概要等一个小时，我们又去马路对面的永利和美高梅，发现一样要等很久，考虑到大姐的身体经不住折腾，胃又开始疼，就直接打车解决问题了。说起来女人的天性果真强大，尽管胃疼，大姐还是坚持在美高梅的免税店里和日本的朋友同步价格后扫了点货 😂。</p><p>当看到永利大酒店的那一刻我震惊了！之前在杭州乐佳国际上班时隔壁有个万利大厦，那会我们都觉得它的外观非常骚气像家酒店，原来是抄袭了永利（Google 了下两者并没有关联），连 LOGO 这个签名都抄袭得有模有样，呵呵 🙃。</p><p><img src="https://jjp18w.bn.files.1drv.com/y4mt--da15_ezI3KdjP6fqsbI0-0eSO1Kx0e7qxZsxEO3evFPnYJ8UBnkK_cIOm2Tkzv57SNsnCdiGXRWBro990dtJd3ibn6OhEIykzFxT1fnQ_CGvfCto3isuJhh_LD-sAA2BBnamOP7b6GVFb9ts8-KB685DDjuHmrNp7TDk_pDLhFz9Gk8gkMGIwSN010UvbsDgAWFJEFUUOT9HbWtFMew?width=2016&height=1512&cropmode=none"></p><p>回到珠海后很难打车，拱北口岸门前的马路堵得水泄不通。在第一次叫滴滴失败后，我们艰难地走到侨光路，打车去苏记潮汕砂锅粥。先给大姐叫了碗白粥，她喝完吃了药就先回去休息了。苏记的味道不错，此外它家的凉茶和王老吉有点像，应该是用了某些同款中草药配方。</p><p>好久没吃潮汕砂锅粥，还是熟悉的味道，很香。</p><p><img src="https://izopaa.bn.files.1drv.com/y4mkjHxzDd4vC7R5XXjW_GUpXaZgBVZGT4BWLV6fBk6TzYN7eKHkfcTJ0oLZeFD44GkkCUUFjRp0rn6PLbZEJ2h57_jxHbXw4x-dbRDT5zWbWiSxpImPnLN1K_qeaYdLXRGZFVFNvkoXK-Spfxm6DRPYRaICczujoulE-KUDJIDnB3MktidheFTgqZdG8bs6AOFX99kKe9HalR_YrE5US0dvg?width=2016&height=1512&cropmode=none"></p><p>这个豆腐外面炸得酥脆，但里面特别嫩！</p><p><img src="https://hjoiaa.bn.files.1drv.com/y4mjCIhkjwMryWvLldzoSA-fN2UWSM2dL19lyczvZr_vRN1q-LhCsBsVbIfreq8ZHKGMHVDM14PJiGsrbd7NUkVUQ3bBjMtrHmNX33_MDbQXXuNanYm5e8gkaQcTLArPK6HES9nP7-Bwchi4AZerZy_oRxENZuUCLNskOSXCkI0ASg4T55xty6f9wFm9Nx0tBa1BdFvUk0ZoqY0oYn8E1Td2A?width=2016&height=1512&cropmode=none"></p><p>看过 《人间一串》的朋友们应该都知道这么一句话：『男人的加油站，女人的美容院』。</p><p><img src="https://ijpw8w.bn.files.1drv.com/y4mLncBw6Pf_cszv1iVIP-xgJrmV6QyCixb0ppTge1n7-SKjsZkcwdYwSlu6r4TUSKzFjWPb5n5xuaeQ_QoEi99RM3t1dUjWN2HUEfcc165P0fhu_zIzkrQtWdzJ8PJU2noicTG-2fVwPFWYRwqTBwoNJbNvRjYes-_fItVxZ9E1ky-aOhw5OCZBOEV01jnC-N1viIydqfoQzhrujvOYQkOFA?width=2016&height=1512&cropmode=none"></p><p>晚上回去洗完又是两点，大姐终于找到了她的 “归宿”，在沙发上安稳地度过了一夜。</p><h2 id="6-9"><a href="#6-9" class="headerlink" title="6.9"></a>6.9</h2><p>今天白天大姐留在家休息，三妹带我沿海边走走。碰头时已经十一点多，三妹租了辆共享汽车作为今天的出行工具。我们先开车到珠海博物馆对面的海怡酒家吃午茶，请教三妹才知道，原来这顿饭在早上吃就叫早茶，中午吃就叫午茶，晚上吃就叫晚茶 😂。</p><p>这个虾饺的虾肉很多，味道不错。</p><p><img src="https://htokaa.bn.files.1drv.com/y4mBAu5aHC0pZTMnWKu1htbfyYDNRXpL3L0iGvABUjx-GHmZ9iJXU_HqGOhfrk1JtSgJ3od6kT732O0-cdlNYCPKl0tecisSBSUErtSbC-nyeERBaxa9SUFhnXoXCEMLj6Bbg-AJy42muoJeAcMnntHYRmc8T29jWxaL-VomqMYAZC6GFh06hT0fBOsKXhlux8mki17n1ngm2eDC3GTwpRKBA?width=2016&height=1512&cropmode=none"></p><p>乳鸽被三妹嫌弃长得不好看（呵，女人.jpg），但味道不输石岐佬。</p><p><img src="https://jdpw8w.bn.files.1drv.com/y4mBHTn4fpjQRoSbRQLZn5mKFA9jLYxFvhTDE5RYImT8XB-pWhb7UP2h6UExq8PClr0RS_7wVt518WKhoMJHVYwJa_mM95Fq0kxwKQ_k-wQxGOY9ezgHFCEJjaoBGUiE7BI5Ad5zEwdMK9bYzNkw4H1pdOshZMYDe-10YifOopls5Jwl--ppoeYD_im9-xAGcORgLw9i6DPlashTYSEyzVnuA?width=2016&height=1512&cropmode=none"></p><p>下面这三道菜就一般了，尤其烧麦和我想象中不太一样，不好吃。</p><p><img src="https://idomaa.bn.files.1drv.com/y4mSmvM9R1YgS480dKouJHf4gdJBwCFm92xQwqSCZ2R2HeM4ouX6FT8vi0rxXuK3n5sjQWAyzZJ33-Fu4g87OM8SfULjWaE_ivFM2fD1dCwVp146Gt1ChKUlvAkouK9417f09x4OmmBs8dpQoLFsNOEhAVZdk4-V6Cd3e8mZwluntTj-rA9Huq1HNR0OUjPGJCsUZDtelUAH7kQWRAjiUaZFw?width=2016&height=1512&cropmode=none"></p><p>吃完喝茶聊了好一会，到两点的样子我们开车去格力海岸的无界书店。沿路的风光很棒，滨海之城的魅力所在。</p><p><img src="https://izpz8w.bn.files.1drv.com/y4mcj7urxdkmjPhFbn2zjA50xyC_qQgD7uyP4uNy5sSLvHETSUVT0ivmYbXULAdccYPo5gU7zfV2ddTStb9YDc5eddZpyheiEveJdPGjldE8Ufzju8Kx43-JkAlt5ihVjCb4TqHVl1M1fapWlxWd-2BtqqkyjHCbNpgRDLN8pMEU1p7VkNeVTNQmwHIigfeCyLDaMJVGNprvO0MsfV_ZBpbAQ?width=2016&height=1512&cropmode=none"></p><p><img src="https://htolaa.bn.files.1drv.com/y4mTbY4A3jOee1IB55nrScWinOp86L-_fK-P437wtfl-gmUeg8pZ-7TflDc0BleUMjyaXxUVFUN9KzTahywe0vbYiEL-aWZynIY2gRYn45ND3vFWG4uPMeBoPZaZTq0R1xFoeutcuDMG78VUpGrRgI-P666qfU7x2IvKTH6lpBzxxSEJezIMlyrR82AxaUDjQVpjprCn8ipAK7jMRYrQcxMzQ?width=2016&height=1512&cropmode=none"></p><p>去格力海岸会路过金山软件园，附近还有南方软件园和珠海北站，位置挺不错的，房价也还可以（咦）。这个商圈是都市小清新风格，此次主题是 WHIKO 迷之生物，很可爱。</p><p><img src="https://ijopaa.bn.files.1drv.com/y4mrkokJXPT-kWfpasDp0_ZmXfGKZnEKaNiCNjE4pr0ZK3q-qDZDJ5Z1FLjD2vOoiWU2rKxhBvi9vO_PbT7yqYmfPmnCZ57Dv5BCINslBG64RFV_k4F1NgPKq_VAwnuHD-8iOBocNihXHKrKphtPNSfG_ouVfpFz6YNKDJowUN-3TLOXG3HB8RPik1U4CaKLep-uR4NsUGkhnOaJVgnyOyC4Q?width=2016&height=1512&cropmode=none"></p><p><img src="https://itojaa.bn.files.1drv.com/y4mPgdK_7KzrDlPpoly8BxaemsG61C-MLiWZnX7-kUPJAs_WZENeFn4JIC90087S71lDyG3lT5uLcACNWFk1bbwQICX6XmkAmFzwWVbgawxc8eREfpq9QLKetiHBqab0p0Nmjys9ySaeUwJx8b8cVLjpRXK91BkFR3WLv5otLxUZB9O5_p6GQhyLEraer-YxXhnm_NPuPm90CuvTd4_YH-zvw?width=1512&height=2016&cropmode=none"></p><p>无界书店和普通书店最大的区别恐怕就是这个海景视角了，看书看累了，抬头放松一下眼睛，太享受了有没有！！！</p><p><img src="https://itps8w.bn.files.1drv.com/y4m6omDCneVRrqvTm0N8TYxnY05qPGJrsYzGaJ5EgXhnaWkQ3wFFtn06CgXc7jCEGTdGQhGzAFW_9JxOyBtnLt7FA1B3uYLPyUxg0D4xJaSpQQI5OByaJsO8HfCoI0EIovLFMpKEr2L-3YCdvWOJTCV8YzhiQHHJWuKBI3kSuejBXSzIIq515RdNi1OxkaJu_7gQVKpAd6aZb0_MThHPw7Y3A?width=2016&height=1512&cropmode=none"></p><p>旁边还有个天台，坐久了可以过去活动一下。</p><p><img src="https://jtpt8w.bn.files.1drv.com/y4mzki-j3CllfZZCD4mTB8_2lNAHq3ARpLLjDaeqv13yjulZOezpuIs0hrmEQzvCI9NizWax7jcrH3TSo0vklob1xjiqKDY__FPgTjuRKz5YtDERn82cSdB2QvpIWlhHu13mdAIWnRrrt4T2B_1M5JwGKNoTFmxc758d1PucQTpxBnNqg16rldolbITZS7HJALNAV37e8BWCC0JrFGq5CuH2A?width=2016&height=1512&cropmode=none"></p><p><img src="https://hzoqaa.bn.files.1drv.com/y4mtb2I3lIWc-alWR2Vr03uEQ4sI9IwCubQ1gKO9C6OAP9VUDizkDdEMKj5ASZq0RVYz2stnSYavSUzBe1jscE8YNQlYGA7Kr5n5q1o8WTXnGdhz0EnfbOFXJK5kE1ClQ25di5BckoUkzPGU2ycoBFBfnYZ4QE02hEx1gxZLKBhC5N-9Xq5yEykERoDqt5FOb0NiHwF-vPO9Zpn5JouSELCIA?width=2016&height=1512&cropmode=none"></p><p>大概五点的样子，我们去海鲜市场买菜，回去找大姐。</p><p><img src="https://itomaa.bn.files.1drv.com/y4m_q7XtA5Ag2e0lSamEpBI9Z3Uu8FOwGLUFJViUjEFQLtptGWXb_Z4hmn61lk3ampSj-2gwFibO22yXCOyulaXvgi2gxvWsEeUgJjLEEX5BOz_9UY3iBdXnHRDvNaCCTq3Y2idPAn-zIWzQblIkZDURKCDJHBb6l162dzPIJS-pxklxBZ-2W-pWCr5o16uvOd6zgGKqnnkGBxs4U0_UC_stg?width=2016&height=1512&cropmode=none"></p><p>室外稍微凉快一点，沙滩上也能看到些游客。</p><p><img src="https://jtp18w.bn.files.1drv.com/y4m8xqmuLEGbyyb-06ZnBfRUwo_pCObHuDJKRbV9o2E4xwrjb1NTdb878NiIfNZUUOAM1PQnGbcVwSE3r_O2xlR2pkCRwJY9ZzDUYz9DfRgLGgXt_2DGK-LZy6wufAr1qLidT7D1yiCzpMuriMcP99px3L9SNqcNZ3E17M79j4Byyi7_ShDne4QF6xe6daC58fRg5XIDaqr5R-QbQVM4CSKIQ?width=2016&height=1512&cropmode=none"></p><p>最后，看看三妹的成果~ 我觉得稍微有点清淡，不过对一个不经常做饭的孩子来说已经不错了。</p><p><img src="https://jtpy8w.bn.files.1drv.com/y4mcIrSZ97B0EEF8Mxggpk4LblYuusrJtjm9qCKV9CLGSmUn6sT885goHjYZRhdVJHba2PORjxkKaVR7pnGgHNspunoatZU1v-o1oJM7ooJmYWnxMr-kz7GfNbAlRXdm14zNiMIYTsetO0E6p3LSYQbzD4p_GfIpP6UYSLC8r3jVjKw20WA4Y8_BVu6q5pPI-TLgDsDalzMShSPr6w8TB3J7g?width=1512&height=2016&cropmode=none"></p><p>吃完饭大家一起看 《向往的生活》 聊到了一点… 要跟美好的假期和美好的相聚说再见了，把三妹送上滴滴，也意味着这次珠海之行告一段落。</p><p>珠海是个美丽的城市，抛开房价和交通来说，是个适合生活和养老的好地方。已经计划今年冬天给我妈在这租个小公寓过冬，如果实现，再来珠海就不只是句口号。</p><p>这几个月，不如先把在无界书店列好的书单刷完。</p>]]></content>
    
    
    <summary type="html">难忘珠海，后会有期！</summary>
    
    
    
    <category term="人生游记" scheme="https://blog.joouis.com/categories/%E4%BA%BA%E7%94%9F%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="trip" scheme="https://blog.joouis.com/tags/trip/"/>
    
    <category term="travel" scheme="https://blog.joouis.com/tags/travel/"/>
    
    <category term="holiday" scheme="https://blog.joouis.com/tags/holiday/"/>
    
    <category term="zhuhai" scheme="https://blog.joouis.com/tags/zhuhai/"/>
    
    <category term="macau" scheme="https://blog.joouis.com/tags/macau/"/>
    
    <category term="food" scheme="https://blog.joouis.com/tags/food/"/>
    
  </entry>
  
</feed>
